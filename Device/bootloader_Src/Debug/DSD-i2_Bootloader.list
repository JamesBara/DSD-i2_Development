
DSD-i2_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd5c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800def0  0800def0  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df80  0800df80  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800df80  0800df80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df88  0800df88  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df8c  0800df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800df90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dec  20000204  0800e194  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff0  0800e194  00021ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de83  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d83  00000000  00000000  0003e0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00042e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  00044478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028156  00000000  00000000  000458a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efa4  00000000  00000000  0006d9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9d38  00000000  00000000  0008c9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001666da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a9c  00000000  00000000  0016672c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000204 	.word	0x20000204
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800ded8 	.word	0x0800ded8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000208 	.word	0x20000208
 80001d0:	0800ded8 	.word	0x0800ded8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <disable_app_err>:

/*********************************************************************************************************************************/


void disable_app_err()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ACK);
 80004dc:	2079      	movs	r0, #121	; 0x79
 80004de:	f000 fbeb 	bl	8000cb8 <send_reply>
	if (is_app_err)
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <disable_app_err+0x40>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d013      	beq.n	8000512 <disable_app_err+0x3a>
	{
		is_app_err = !is_app_err;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <disable_app_err+0x40>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	bf14      	ite	ne
 80004f2:	2301      	movne	r3, #1
 80004f4:	2300      	moveq	r3, #0
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <disable_app_err+0x40>)
 8000506:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <disable_app_err+0x44>)
 800050e:	f003 faed 	bl	8003aec <HAL_GPIO_WritePin>
	}
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000054b 	.word	0x2000054b
 800051c:	48000400 	.word	0x48000400

08000520 <enable_app_err>:
void enable_app_err()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	if(!is_app_err)
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <enable_app_err+0x40>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f083 0301 	eor.w	r3, r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d013      	beq.n	800055a <enable_app_err+0x3a>
	{
		is_app_err = !is_app_err;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <enable_app_err+0x40>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <enable_app_err+0x40>)
 800054e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <enable_app_err+0x44>)
 8000556:	f003 fac9 	bl	8003aec <HAL_GPIO_WritePin>
	}

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	2000054b 	.word	0x2000054b
 8000564:	48000400 	.word	0x48000400

08000568 <bootloader_init>:
  *
  * @param
  * @retval
  */
void bootloader_init(void)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af06      	add	r7, sp, #24
	uint32_t timer = HAL_GetTick();
 800056e:	f001 fdf1 	bl	8002154 <HAL_GetTick>
 8000572:	60b8      	str	r0, [r7, #8]
	uint32_t timeout = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
	/*Run a simple check to see if the first 8 bytes of the application are available*/
	/*Run a simple check to see if the size is bigger than the available size or 0*/
	/*Run a crc check*/
	if (*(volatile uint64_t*)(USER_APPLICATION_STARTING_ADDRESS) == -1 || \
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <bootloader_init+0xac>)
 800057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000582:	bf08      	it	eq
 8000584:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000588:	d02b      	beq.n	80005e2 <bootloader_init+0x7a>
			((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) == 0 || \
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <bootloader_init+0xb0>)
 800058c:	681b      	ldr	r3, [r3, #0]
	if (*(volatile uint64_t*)(USER_APPLICATION_STARTING_ADDRESS) == -1 || \
 800058e:	2b00      	cmp	r3, #0
 8000590:	d027      	beq.n	80005e2 <bootloader_init+0x7a>
			(((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) > (FLASH_SIZE-BOOTLOADER_SIZE)) || \
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <bootloader_init+0xb0>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <bootloader_init+0xb4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b29b      	uxth	r3, r3
 800059c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d007      	beq.n	80005b4 <bootloader_init+0x4c>
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <bootloader_init+0xb4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	0299      	lsls	r1, r3, #10
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <bootloader_init+0xb8>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80005b2:	e001      	b.n	80005b8 <bootloader_init+0x50>
 80005b4:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
			((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) == 0 || \
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d312      	bcc.n	80005e2 <bootloader_init+0x7a>
			(*(volatile uint32_t*)(USER_APPLICATION_HEADER_CRC_ADDRESS) != calculate_crc(hcrc)))
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <bootloader_init+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4e19      	ldr	r6, [pc, #100]	; (8000628 <bootloader_init+0xc0>)
 80005c4:	466d      	mov	r5, sp
 80005c6:	f106 0410 	add.w	r4, r6, #16
 80005ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ce:	6823      	ldr	r3, [r4, #0]
 80005d0:	602b      	str	r3, [r5, #0]
 80005d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005d6:	f000 fb81 	bl	8000cdc <calculate_crc>
 80005da:	4603      	mov	r3, r0
			(((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) > (FLASH_SIZE-BOOTLOADER_SIZE)) || \
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d001      	beq.n	80005e6 <bootloader_init+0x7e>
	{
		enable_app_err();
 80005e2:	f7ff ff9d 	bl	8000520 <enable_app_err>
	}
	/*400ms seems to work*/
 	 if (!is_app_err)
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <bootloader_init+0xc4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f083 0301 	eor.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00a      	beq.n	800060a <bootloader_init+0xa2>
 	 {
	 	 while (timeout <400)
 80005f4:	e005      	b.n	8000602 <bootloader_init+0x9a>
	 	 {
	 		timeout = HAL_GetTick()-timer;
 80005f6:	f001 fdad 	bl	8002154 <HAL_GetTick>
 80005fa:	4602      	mov	r2, r0
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	60fb      	str	r3, [r7, #12]
	 	 while (timeout <400)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000608:	d3f5      	bcc.n	80005f6 <bootloader_init+0x8e>
	 	 }
 	 }

}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	bf00      	nop
 8000614:	08010000 	.word	0x08010000
 8000618:	08010194 	.word	0x08010194
 800061c:	1fff75e0 	.word	0x1fff75e0
 8000620:	03fffc00 	.word	0x03fffc00
 8000624:	08010198 	.word	0x08010198
 8000628:	200002a4 	.word	0x200002a4
 800062c:	2000054b 	.word	0x2000054b

08000630 <mode_handler>:
  *
  * @param
  * @retval
  */
void mode_handler()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

	send_reply((uint8_t) RDY_TO_RCV);
 8000636:	20be      	movs	r0, #190	; 0xbe
 8000638:	f000 fb3e 	bl	8000cb8 <send_reply>
	if (!usb_cmd_timeout(50))
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 fb1f 	bl	8000c80 <usb_cmd_timeout>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d140      	bne.n	80006ca <mode_handler+0x9a>
	{
		uint8_t buf[4];
		CDC_Read_FS(buf, sizeof(buf));
 8000648:	463b      	mov	r3, r7
 800064a:	2104      	movs	r1, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f00c fda1 	bl	800d194 <CDC_Read_FS>
		uint32_t init_sequence = (uint32_t)(buf[0]<<24) | (uint32_t)(buf[1]<<16) | (uint32_t)(buf[2]<<8) | (uint32_t)(buf[3]);
 8000652:	783b      	ldrb	r3, [r7, #0]
 8000654:	061b      	lsls	r3, r3, #24
 8000656:	461a      	mov	r2, r3
 8000658:	787b      	ldrb	r3, [r7, #1]
 800065a:	041b      	lsls	r3, r3, #16
 800065c:	4313      	orrs	r3, r2
 800065e:	78ba      	ldrb	r2, [r7, #2]
 8000660:	0212      	lsls	r2, r2, #8
 8000662:	4313      	orrs	r3, r2
 8000664:	78fa      	ldrb	r2, [r7, #3]
 8000666:	4313      	orrs	r3, r2
 8000668:	607b      	str	r3, [r7, #4]

		switch(init_sequence)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a19      	ldr	r2, [pc, #100]	; (80006d4 <mode_handler+0xa4>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d018      	beq.n	80006a4 <mode_handler+0x74>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <mode_handler+0xa4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d823      	bhi.n	80006c2 <mode_handler+0x92>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <mode_handler+0xa8>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d016      	beq.n	80006b0 <mode_handler+0x80>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <mode_handler+0xa8>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d81b      	bhi.n	80006c2 <mode_handler+0x92>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b99      	cmp	r3, #153	; 0x99
 800068e:	d015      	beq.n	80006bc <mode_handler+0x8c>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <mode_handler+0xac>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d114      	bne.n	80006c2 <mode_handler+0x92>
		{
		case INIT_STM:
			is_stm = true;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <mode_handler+0xb0>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
			disable_app_err();
 800069e:	f7ff ff1b 	bl	80004d8 <disable_app_err>
		break;
 80006a2:	e012      	b.n	80006ca <mode_handler+0x9a>
		case INIT_PS:
			is_fpga = true;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <mode_handler+0xb4>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
			disable_app_err();
 80006aa:	f7ff ff15 	bl	80004d8 <disable_app_err>
		break;
 80006ae:	e00c      	b.n	80006ca <mode_handler+0x9a>
		case INIT_ESP:
			is_esp = true;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <mode_handler+0xb8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
			disable_app_err();
 80006b6:	f7ff ff0f 	bl	80004d8 <disable_app_err>
		break;
 80006ba:	e006      	b.n	80006ca <mode_handler+0x9a>
		case RESET: /*Not used*/
			HAL_NVIC_SystemReset();
 80006bc:	f001 fed5 	bl	800246a <HAL_NVIC_SystemReset>
		break;
 80006c0:	e003      	b.n	80006ca <mode_handler+0x9a>
		default:
			/*Wrong command*/
			send_reply((uint8_t) NACK);
 80006c2:	206e      	movs	r0, #110	; 0x6e
 80006c4:	f000 faf8 	bl	8000cb8 <send_reply>
		break;
 80006c8:	bf00      	nop
		}
	}
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	f1a541c1 	.word	0xf1a541c1
 80006d8:	5ec932c3 	.word	0x5ec932c3
 80006dc:	57932145 	.word	0x57932145
 80006e0:	20000548 	.word	0x20000548
 80006e4:	20000549 	.word	0x20000549
 80006e8:	2000054a 	.word	0x2000054a

080006ec <stm_cmd_handler>:
  *
  * @param
  * @retval
  */
void stm_cmd_handler()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	send_reply((uint8_t) STM_RDY);
 80006f2:	20c4      	movs	r0, #196	; 0xc4
 80006f4:	f000 fae0 	bl	8000cb8 <send_reply>
	if (!usb_cmd_timeout(50))
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f000 fac1 	bl	8000c80 <usb_cmd_timeout>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d122      	bne.n	800074a <stm_cmd_handler+0x5e>
	{
		uint8_t cmd;
		CDC_Read_FS(&cmd, 1);
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f00c fd43 	bl	800d194 <CDC_Read_FS>

		switch(cmd)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b99      	cmp	r3, #153	; 0x99
 8000712:	d012      	beq.n	800073a <stm_cmd_handler+0x4e>
 8000714:	2b99      	cmp	r3, #153	; 0x99
 8000716:	dc13      	bgt.n	8000740 <stm_cmd_handler+0x54>
 8000718:	2b02      	cmp	r3, #2
 800071a:	d002      	beq.n	8000722 <stm_cmd_handler+0x36>
 800071c:	2b31      	cmp	r3, #49	; 0x31
 800071e:	d003      	beq.n	8000728 <stm_cmd_handler+0x3c>
 8000720:	e00e      	b.n	8000740 <stm_cmd_handler+0x54>
		{
		case GET_INFO:
			get_info_cmd();
 8000722:	f000 f876 	bl	8000812 <get_info_cmd>
		break;
 8000726:	e010      	b.n	800074a <stm_cmd_handler+0x5e>
		case STM_FLASH_PROGRAM:
			if (flash_program_cmd())
 8000728:	f000 f8be 	bl	80008a8 <flash_program_cmd>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00a      	beq.n	8000748 <stm_cmd_handler+0x5c>
			{
				send_reply((uint8_t) NACK);
 8000732:	206e      	movs	r0, #110	; 0x6e
 8000734:	f000 fac0 	bl	8000cb8 <send_reply>
			}
		break;
 8000738:	e006      	b.n	8000748 <stm_cmd_handler+0x5c>
		case RESET:
			HAL_NVIC_SystemReset();
 800073a:	f001 fe96 	bl	800246a <HAL_NVIC_SystemReset>
		break;
 800073e:	e004      	b.n	800074a <stm_cmd_handler+0x5e>
		default:
			/*Wrong command*/
			send_reply((uint8_t) NACK);
 8000740:	206e      	movs	r0, #110	; 0x6e
 8000742:	f000 fab9 	bl	8000cb8 <send_reply>
		break;
 8000746:	e000      	b.n	800074a <stm_cmd_handler+0x5e>
		break;
 8000748:	bf00      	nop
		}
	}
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <fpga_cmd_handler>:

void fpga_cmd_handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	send_reply((uint8_t) FPGA_RDY);
 800075a:	2008      	movs	r0, #8
 800075c:	f000 faac 	bl	8000cb8 <send_reply>
	if (!usb_cmd_timeout(50))
 8000760:	2032      	movs	r0, #50	; 0x32
 8000762:	f000 fa8d 	bl	8000c80 <usb_cmd_timeout>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d125      	bne.n	80007b8 <fpga_cmd_handler+0x64>
	{
		uint8_t cmd;
		CDC_Read_FS(&cmd, 1);
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f00c fd0f 	bl	800d194 <CDC_Read_FS>

		switch(cmd)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2bc5      	cmp	r3, #197	; 0xc5
 800077a:	d00f      	beq.n	800079c <fpga_cmd_handler+0x48>
 800077c:	2bc5      	cmp	r3, #197	; 0xc5
 800077e:	dc16      	bgt.n	80007ae <fpga_cmd_handler+0x5a>
 8000780:	2b33      	cmp	r3, #51	; 0x33
 8000782:	d002      	beq.n	800078a <fpga_cmd_handler+0x36>
 8000784:	2b99      	cmp	r3, #153	; 0x99
 8000786:	d00f      	beq.n	80007a8 <fpga_cmd_handler+0x54>
 8000788:	e011      	b.n	80007ae <fpga_cmd_handler+0x5a>
		{
		case FPGA_PROGRAM:
			if (flash_fpga_cmd())
 800078a:	f000 fb21 	bl	8000dd0 <flash_fpga_cmd>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d010      	beq.n	80007b6 <fpga_cmd_handler+0x62>
			{
				send_reply((uint8_t) NACK);
 8000794:	206e      	movs	r0, #110	; 0x6e
 8000796:	f000 fa8f 	bl	8000cb8 <send_reply>
			}
		break;
 800079a:	e00c      	b.n	80007b6 <fpga_cmd_handler+0x62>
		case FPGA_COM:
			is_console_enabled = true;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <fpga_cmd_handler+0x6c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
			fpga_usb_to_uart();
 80007a2:	f000 fc0d 	bl	8000fc0 <fpga_usb_to_uart>
		break;
 80007a6:	e007      	b.n	80007b8 <fpga_cmd_handler+0x64>
		case RESET:
			reset_fpga();
 80007a8:	f000 fc58 	bl	800105c <reset_fpga>
		break;
 80007ac:	e004      	b.n	80007b8 <fpga_cmd_handler+0x64>
		default:
			/*Wrong command*/
			send_reply((uint8_t) NACK);
 80007ae:	206e      	movs	r0, #110	; 0x6e
 80007b0:	f000 fa82 	bl	8000cb8 <send_reply>
		break;
 80007b4:	e000      	b.n	80007b8 <fpga_cmd_handler+0x64>
		break;
 80007b6:	bf00      	nop
		}
	}
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000848 	.word	0x20000848

080007c4 <esp_cmd_handler>:
  *
  * @param
  * @retval
  */
void esp_cmd_handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ESP_RDY);
 80007ca:	20c5      	movs	r0, #197	; 0xc5
 80007cc:	f000 fa74 	bl	8000cb8 <send_reply>
	if (!usb_cmd_timeout(50))
 80007d0:	2032      	movs	r0, #50	; 0x32
 80007d2:	f000 fa55 	bl	8000c80 <usb_cmd_timeout>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d116      	bne.n	800080a <esp_cmd_handler+0x46>
	{
		uint8_t cmd;
		CDC_Read_FS(&cmd, 1);
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f00c fcd7 	bl	800d194 <CDC_Read_FS>

		switch(cmd)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b32      	cmp	r3, #50	; 0x32
 80007ea:	d002      	beq.n	80007f2 <esp_cmd_handler+0x2e>
 80007ec:	2b99      	cmp	r3, #153	; 0x99
 80007ee:	d005      	beq.n	80007fc <esp_cmd_handler+0x38>
 80007f0:	e007      	b.n	8000802 <esp_cmd_handler+0x3e>
		{
		case ESP_FLASH_PROGRAM:
			esp_init();
 80007f2:	f000 fc4b 	bl	800108c <esp_init>
			esp_usb_to_uart();
 80007f6:	f000 fc8b 	bl	8001110 <esp_usb_to_uart>
		break;
 80007fa:	e006      	b.n	800080a <esp_cmd_handler+0x46>
		case RESET:
			HAL_NVIC_SystemReset();
 80007fc:	f001 fe35 	bl	800246a <HAL_NVIC_SystemReset>
		break;
 8000800:	e003      	b.n	800080a <esp_cmd_handler+0x46>
		default:
			/*Wrong command*/
			send_reply((uint8_t) NACK);
 8000802:	206e      	movs	r0, #110	; 0x6e
 8000804:	f000 fa58 	bl	8000cb8 <send_reply>
		break;
 8000808:	bf00      	nop
		}
	}
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <get_info_cmd>:
  * @param
  * @retval
  */

static void get_info_cmd()
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b08c      	sub	sp, #48	; 0x30
 8000816:	af00      	add	r7, sp, #0
	uint16_t dev_id = (uint16_t)(HAL_GetDEVID() & 0xFFF);
 8000818:	f001 fccc 	bl	80021b4 <HAL_GetDEVID>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000824:	85fb      	strh	r3, [r7, #46]	; 0x2e
	FLASH_OBProgramInitTypeDef OBInit;
	OBInit.OptionType = OPTIONBYTE_RDP;
 8000826:	2302      	movs	r3, #2
 8000828:	607b      	str	r3, [r7, #4]
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fd93 	bl	8003358 <HAL_FLASHEx_OBGetConfig>
	uint8_t cmd_pack[] = {(uint8_t)(dev_id>>8),(uint8_t)(dev_id),(uint8_t)OBInit.RDPLevel};
 8000832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	703b      	strb	r3, [r7, #0]
 800083c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800083e:	b2db      	uxtb	r3, r3
 8000840:	707b      	strb	r3, [r7, #1]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	70bb      	strb	r3, [r7, #2]
	CDC_Transmit_FS(cmd_pack,sizeof(cmd_pack));
 8000848:	463b      	mov	r3, r7
 800084a:	2103      	movs	r1, #3
 800084c:	4618      	mov	r0, r3
 800084e:	f00c fc63 	bl	800d118 <CDC_Transmit_FS>
}
 8000852:	bf00      	nop
 8000854:	3730      	adds	r7, #48	; 0x30
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <jump_cmd>:
  *
  * @param
  * @retval
  */
void jump_cmd()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
	typedef void (*func_ptr)(void);
	func_ptr jump_to_app;
	uint32_t address = (uint32_t) USER_APPLICATION_STARTING_ADDRESS;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <jump_cmd+0x44>)
 8000864:	60fb      	str	r3, [r7, #12]
	uint32_t stack = (uint32_t)*((uint32_t*)address);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	60bb      	str	r3, [r7, #8]
	jump_to_app = (func_ptr)*(uint32_t*)(address+4);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3304      	adds	r3, #4
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	607b      	str	r3, [r7, #4]
	deInitializer();
 8000874:	f000 ff64 	bl	8001740 <deInitializer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f383 8808 	msr	MSP, r3
}
 8000886:	bf00      	nop
	__disable_irq();
	__set_MSP(stack);
	SCB->VTOR = address;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <jump_cmd+0x48>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800088e:	b662      	cpsie	i
}
 8000890:	bf00      	nop
	__enable_irq();
	jump_to_app();
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4798      	blx	r3
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	08010000 	.word	0x08010000
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <flash_program_cmd>:
  * @param :
  * @retval
  */

static uint8_t flash_program_cmd()
{
 80008a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008ac:	b0ba      	sub	sp, #232	; 0xe8
 80008ae:	af00      	add	r7, sp, #0
	uint32_t address = (uint32_t)USER_APPLICATION_STARTING_ADDRESS;
 80008b0:	4bbe      	ldr	r3, [pc, #760]	; (8000bac <flash_program_cmd+0x304>)
 80008b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint32_t file_size;
	uint32_t chunk_size = 64; /*Size of a usb packet*/
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t bytes_written = 0; /*bytes written in flash*/
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	uint32_t loop_correction = 8; /*correcting the loop which make the bytes into doublewords depending on the leftover bytes*/
 80008c2:	2308      	movs	r3, #8
 80008c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint8_t data[64];
	uint64_t dword = 0;
 80008c8:	f04f 0200 	mov.w	r2, #0
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	send_reply((uint8_t) ACK);
 80008d4:	2079      	movs	r0, #121	; 0x79
 80008d6:	f000 f9ef 	bl	8000cb8 <send_reply>

	if (usb_cmd_timeout(50))
 80008da:	2032      	movs	r0, #50	; 0x32
 80008dc:	f000 f9d0 	bl	8000c80 <usb_cmd_timeout>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <flash_program_cmd+0x42>
	{
		return 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e1c2      	b.n	8000c70 <flash_program_cmd+0x3c8>
	}
	else
	{
		uint8_t temp_num[4];
		CDC_Read_FS(temp_num,sizeof(temp_num));
 80008ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00c fc4f 	bl	800d194 <CDC_Read_FS>
		file_size = (uint32_t)(temp_num[0]<<24) | (uint32_t)(temp_num[1]<<16) | (uint32_t)(temp_num[2]<<8) | (uint32_t)(temp_num[3]);
 80008f6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80008fa:	061b      	lsls	r3, r3, #24
 80008fc:	461a      	mov	r2, r3
 80008fe:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000902:	041b      	lsls	r3, r3, #16
 8000904:	431a      	orrs	r2, r3
 8000906:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	431a      	orrs	r2, r3
 800090e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000912:	4313      	orrs	r3, r2
 8000914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		/*if the number of bytes is 0 or bigger than the available size then something is wrong*/
		if (file_size == 0 || file_size > (FLASH_END - USER_APPLICATION_STARTING_ADDRESS))
 8000918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <flash_program_cmd+0x82>
 8000920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000924:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000928:	d301      	bcc.n	800092e <flash_program_cmd+0x86>
		{
			return 1;
 800092a:	2301      	movs	r3, #1
 800092c:	e1a0      	b.n	8000c70 <flash_program_cmd+0x3c8>
		}

		/*Notify the host that we started erasing*/
		send_reply((uint8_t) ACK);
 800092e:	2079      	movs	r0, #121	; 0x79
 8000930:	f000 f9c2 	bl	8000cb8 <send_reply>

		/*Calculate the first page that we need to erase*/
		uint8_t first_page = (USER_APPLICATION_STARTING_ADDRESS - FLASH_BASE) / 0x800; /*0x800 is the page size*/
 8000934:	2320      	movs	r3, #32
 8000936:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

		/*Erase part*/
		FLASH_EraseInitTypeDef pEraseInit;
		pEraseInit.TypeErase=FLASH_TYPEERASE_PAGES;
 800093a:	2300      	movs	r3, #0
 800093c:	66fb      	str	r3, [r7, #108]	; 0x6c
		pEraseInit.Banks=FLASH_BANK_1;
 800093e:	2301      	movs	r3, #1
 8000940:	673b      	str	r3, [r7, #112]	; 0x70
		pEraseInit.Page = first_page;
 8000942:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000946:	677b      	str	r3, [r7, #116]	; 0x74
		pEraseInit.NbPages= 256-first_page;
 8000948:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800094c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000950:	67bb      	str	r3, [r7, #120]	; 0x78
		uint32_t PageError = 0xFFFFFFFF;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	66bb      	str	r3, [r7, #104]	; 0x68
		HAL_FLASH_Unlock();
 8000958:	f002 fb7e 	bl	8003058 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 800095c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f002 fc5c 	bl	8003224 <HAL_FLASHEx_Erase>
		/*Notify the host if the erase was successful or not*/
		HAL_FLASH_Lock();
 800096c:	f002 fb96 	bl	800309c <HAL_FLASH_Lock>
		if (PageError != 0xFFFFFFFF)
 8000970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000976:	d001      	beq.n	800097c <flash_program_cmd+0xd4>
		{
			return 1;
 8000978:	2301      	movs	r3, #1
 800097a:	e179      	b.n	8000c70 <flash_program_cmd+0x3c8>
		}
/*Write in flash part*/
		do
		{
			/*Request the next packet*/
			send_reply((uint8_t) ACK);
 800097c:	2079      	movs	r0, #121	; 0x79
 800097e:	f000 f99b 	bl	8000cb8 <send_reply>
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2110      	movs	r1, #16
 8000986:	488a      	ldr	r0, [pc, #552]	; (8000bb0 <flash_program_cmd+0x308>)
 8000988:	f003 f8b0 	bl	8003aec <HAL_GPIO_WritePin>
			if(usb_cmd_timeout(50))
 800098c:	2032      	movs	r0, #50	; 0x32
 800098e:	f000 f977 	bl	8000c80 <usb_cmd_timeout>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <flash_program_cmd+0xf4>
			{
				return 1;
 8000998:	2301      	movs	r3, #1
 800099a:	e169      	b.n	8000c70 <flash_program_cmd+0x3c8>
			}
			else
			{
				uint8_t usb_data_rx_size = CDC_Available_FS();
 800099c:	f00c fbf3 	bl	800d186 <CDC_Available_FS>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
				CDC_Read_FS(data, usb_data_rx_size);
 80009a6:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 80009aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00c fbef 	bl	800d194 <CDC_Read_FS>
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2110      	movs	r1, #16
 80009ba:	487d      	ldr	r0, [pc, #500]	; (8000bb0 <flash_program_cmd+0x308>)
 80009bc:	f003 f896 	bl	8003aec <HAL_GPIO_WritePin>

				HAL_FLASH_Unlock();
 80009c0:	f002 fb4a 	bl	8003058 <HAL_FLASH_Unlock>
				/*No mutex is needed here since we won't get new chunk of data unless we send an ack*/
				for (uint32_t i=0;i<loop_correction;i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009ca:	e103      	b.n	8000bd4 <flash_program_cmd+0x32c>
				{
					dword = (uint64_t)(data[i*8])   | (uint64_t)(data[i*8+1]) << 8 | (uint64_t)(data[i*8+2]) << 16 | (uint64_t)(data[i*8+3]) << 24
 80009cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	3380      	adds	r3, #128	; 0x80
 80009d4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80009d8:	4413      	add	r3, r2
 80009da:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	653b      	str	r3, [r7, #80]	; 0x50
 80009e4:	657a      	str	r2, [r7, #84]	; 0x54
 80009e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	3301      	adds	r3, #1
 80009ee:	3380      	adds	r3, #128	; 0x80
 80009f0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80009f4:	4413      	add	r3, r2
 80009f6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2200      	movs	r2, #0
 80009fe:	663b      	str	r3, [r7, #96]	; 0x60
 8000a00:	667a      	str	r2, [r7, #100]	; 0x64
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000a0c:	020b      	lsls	r3, r1, #8
 8000a0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a10:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8000a14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a16:	020a      	lsls	r2, r1, #8
 8000a18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000a1a:	4311      	orrs	r1, r2
 8000a1c:	64b9      	str	r1, [r7, #72]	; 0x48
 8000a1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000a20:	430b      	orrs	r3, r1
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	3380      	adds	r3, #128	; 0x80
 8000a2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a32:	4413      	add	r3, r2
 8000a34:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000a4a:	040b      	lsls	r3, r1, #16
 8000a4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000a4e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8000a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000a54:	040a      	lsls	r2, r1, #16
 8000a56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000a58:	4311      	orrs	r1, r2
 8000a5a:	6439      	str	r1, [r7, #64]	; 0x40
 8000a5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	647b      	str	r3, [r7, #68]	; 0x44
 8000a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	3303      	adds	r3, #3
 8000a6a:	3380      	adds	r3, #128	; 0x80
 8000a6c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a70:	4413      	add	r3, r2
 8000a72:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a7c:	637a      	str	r2, [r7, #52]	; 0x34
 8000a7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000a82:	460b      	mov	r3, r1
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a88:	460b      	mov	r3, r1
 8000a8a:	061b      	lsls	r3, r3, #24
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000a94:	4602      	mov	r2, r0
 8000a96:	4313      	orrs	r3, r2
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
							| (uint64_t)(data[i*8+4]) << 32 | (uint64_t)(data[i*8+5]) << 40 | (uint64_t)(data[i*8+6]) << 48 | (uint64_t)(data[i*8+7])<< 56;
 8000aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	3380      	adds	r3, #128	; 0x80
 8000aac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	627a      	str	r2, [r7, #36]	; 0x24
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	f04f 0300 	mov.w	r3, #0
 8000ac6:	6a39      	ldr	r1, [r7, #32]
 8000ac8:	000b      	movs	r3, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ace:	ea41 0a02 	orr.w	sl, r1, r2
 8000ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ad4:	ea41 0b03 	orr.w	fp, r1, r3
 8000ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	3305      	adds	r3, #5
 8000ae0:	3380      	adds	r3, #128	; 0x80
 8000ae2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ae6:	4413      	add	r3, r2
 8000ae8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2200      	movs	r2, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	61fa      	str	r2, [r7, #28]
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	69b9      	ldr	r1, [r7, #24]
 8000afe:	020b      	lsls	r3, r1, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	ea4a 0802 	orr.w	r8, sl, r2
 8000b06:	ea4b 0903 	orr.w	r9, fp, r3
 8000b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	3306      	adds	r3, #6
 8000b12:	3380      	adds	r3, #128	; 0x80
 8000b14:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000b18:	4413      	add	r3, r2
 8000b1a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	617a      	str	r2, [r7, #20]
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	6939      	ldr	r1, [r7, #16]
 8000b30:	040b      	lsls	r3, r1, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	ea48 0402 	orr.w	r4, r8, r2
 8000b38:	ea49 0503 	orr.w	r5, r9, r3
 8000b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	3307      	adds	r3, #7
 8000b44:	3380      	adds	r3, #128	; 0x80
 8000b46:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2200      	movs	r2, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	60fa      	str	r2, [r7, #12]
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	060b      	lsls	r3, r1, #24
 8000b64:	2200      	movs	r2, #0
					dword = (uint64_t)(data[i*8])   | (uint64_t)(data[i*8+1]) << 8 | (uint64_t)(data[i*8+2]) << 16 | (uint64_t)(data[i*8+3]) << 24
 8000b66:	ea44 0102 	orr.w	r1, r4, r2
 8000b6a:	6039      	str	r1, [r7, #0]
 8000b6c:	432b      	orrs	r3, r5
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b74:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, dword);
 8000b78:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8000b7c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000b80:	2000      	movs	r0, #0
 8000b82:	f002 f9fd 	bl	8002f80 <HAL_FLASH_Program>
					/*Check if the data written matches the data in the buffer*/
					if (dword != *(volatile uint64_t*)(address))
 8000b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b8e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8000b92:	428b      	cmp	r3, r1
 8000b94:	bf08      	it	eq
 8000b96:	4282      	cmpeq	r2, r0
 8000b98:	d00c      	beq.n	8000bb4 <flash_program_cmd+0x30c>
					{
						HAL_FLASH_Lock();
 8000b9a:	f002 fa7f 	bl	800309c <HAL_FLASH_Lock>
						HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <flash_program_cmd+0x308>)
 8000ba4:	f002 ffa2 	bl	8003aec <HAL_GPIO_WritePin>
						return 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e061      	b.n	8000c70 <flash_program_cmd+0x3c8>
 8000bac:	08010000 	.word	0x08010000
 8000bb0:	48000400 	.word	0x48000400
					}
					else
					{
						/*clear the dword*/
						dword = 0;
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
						/*Increment the address*/
						address+=8;
 8000bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				for (uint32_t i=0;i<loop_correction;i++)
 8000bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bce:	3301      	adds	r3, #1
 8000bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000bd4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f4ff aef5 	bcc.w	80009cc <flash_program_cmd+0x124>
					}
				}
				HAL_FLASH_Lock();
 8000be2:	f002 fa5b 	bl	800309c <HAL_FLASH_Lock>
				/*Increment the bytes_written*/
				bytes_written+=chunk_size;
 8000be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000bee:	4413      	add	r3, r2
 8000bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				/*Clear the buffer*/
				memset(data,'\0',sizeof(data));
 8000bf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00d f851 	bl	800dca4 <memset>
				/*Correcting the loop due to leftover bytes*/
				if(file_size - bytes_written < chunk_size)
 8000c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000c0a:	1ad2      	subs	r2, r2, r3
 8000c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d918      	bls.n	8000c46 <flash_program_cmd+0x39e>
				{
					chunk_size = file_size - bytes_written;
 8000c14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

					if (chunk_size%8)
 8000c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <flash_program_cmd+0x394>
					{
						loop_correction = (chunk_size/8)+1;
 8000c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	3301      	adds	r3, #1
 8000c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000c3a:	e004      	b.n	8000c46 <flash_program_cmd+0x39e>
					}
					else
					{
						loop_correction = (chunk_size/8);
 8000c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					}
				}
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2110      	movs	r1, #16
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <flash_program_cmd+0x3d4>)
 8000c4c:	f002 ff4e 	bl	8003aec <HAL_GPIO_WritePin>
			}
		}
		while(bytes_written-file_size);
 8000c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f47f ae8f 	bne.w	800097c <flash_program_cmd+0xd4>
		send_reply((uint8_t) ACK);
 8000c5e:	2079      	movs	r0, #121	; 0x79
 8000c60:	f000 f82a 	bl	8000cb8 <send_reply>
		/*MCU resets too fast and the last reply is not sent
		 * this delay solves that issue */
		HAL_Delay(50);
 8000c64:	2032      	movs	r0, #50	; 0x32
 8000c66:	f001 fa81 	bl	800216c <HAL_Delay>
		HAL_NVIC_SystemReset();
 8000c6a:	f001 fbfe 	bl	800246a <HAL_NVIC_SystemReset>
	}
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	37e8      	adds	r7, #232	; 0xe8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400

08000c80 <usb_cmd_timeout>:
  *
  * @param timeout: Timeout set by the user.
  * @retval uint8_t: Return 0 if the host sends data else return 1 if the time run out.
  */
uint8_t usb_cmd_timeout(uint32_t timeout)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	uint32_t timer = HAL_GetTick();
 8000c88:	f001 fa64 	bl	8002154 <HAL_GetTick>
 8000c8c:	60f8      	str	r0, [r7, #12]

	while (HAL_GetTick()-timer <timeout)
 8000c8e:	e006      	b.n	8000c9e <usb_cmd_timeout+0x1e>
	{
		if (CDC_Available_FS()>0)
 8000c90:	f00c fa79 	bl	800d186 <CDC_Available_FS>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <usb_cmd_timeout+0x1e>
		{
			return 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e008      	b.n	8000cb0 <usb_cmd_timeout+0x30>
	while (HAL_GetTick()-timer <timeout)
 8000c9e:	f001 fa59 	bl	8002154 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d8f0      	bhi.n	8000c90 <usb_cmd_timeout+0x10>
		}
	}
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <send_reply>:
  *
  * @param timeout: byte to be returned.
  * @retval uint8_t: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t send_reply(uint8_t data)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t reply = data;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	73fb      	strb	r3, [r7, #15]
	return CDC_Transmit_FS(&reply,1);
 8000cc6:	f107 030f 	add.w	r3, r7, #15
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f00c fa23 	bl	800d118 <CDC_Transmit_FS>
 8000cd2:	4603      	mov	r3, r0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <calculate_crc>:
  *
  * @param hcrc: crc handler.
  * @retval uint8_t: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
static uint32_t calculate_crc(CRC_HandleTypeDef hcrc)
{
 8000cdc:	b084      	sub	sp, #16
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f107 0c10 	add.w	ip, r7, #16
 8000ce8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/*Retrieve the size of the application from the header.*/
	uint32_t app_size = *(volatile uint32_t*)(USER_APPLICATION_STARTING_ADDRESS+0x194);
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <calculate_crc+0x48>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	607b      	str	r3, [r7, #4]

	/*Calculate the crc value of the vector table (404 bytes) plus the size of the application (4 bytes)*/
	HAL_CRC_Calculate(&hcrc, (uint32_t*)USER_APPLICATION_STARTING_ADDRESS, 0x198);
 8000cf2:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000cf6:	490c      	ldr	r1, [pc, #48]	; (8000d28 <calculate_crc+0x4c>)
 8000cf8:	f107 0010 	add.w	r0, r7, #16
 8000cfc:	f001 fc9e 	bl	800263c <HAL_CRC_Calculate>

	return HAL_CRC_Accumulate(&hcrc, (uint32_t*)(USER_APPLICATION_STARTING_ADDRESS+0x19C), (app_size-0x19C));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000d06:	461a      	mov	r2, r3
 8000d08:	4908      	ldr	r1, [pc, #32]	; (8000d2c <calculate_crc+0x50>)
 8000d0a:	f107 0010 	add.w	r0, r7, #16
 8000d0e:	f001 fc51 	bl	80025b4 <HAL_CRC_Accumulate>
 8000d12:	4603      	mov	r3, r0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d1e:	b004      	add	sp, #16
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	08010194 	.word	0x08010194
 8000d28:	08010000 	.word	0x08010000
 8000d2c:	0801019c 	.word	0x0801019c

08000d30 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <HAL_UARTEx_RxEventCallback+0x88>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d119      	bne.n	8000d7a <HAL_UARTEx_RxEventCallback+0x4a>
	{
		HAL_UART_DMAPause(&huart1);
 8000d46:	481d      	ldr	r0, [pc, #116]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x8c>)
 8000d48:	f006 fc1d 	bl	8007586 <HAL_UART_DMAPause>
		CDC_Transmit_FS(uart_rx_buf, Size);
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x90>)
 8000d52:	f00c f9e1 	bl	800d118 <CDC_Transmit_FS>
		memset(uart_rx_buf,'\0',sizeof(uart_rx_buf));
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x90>)
 8000d5c:	f00c ffa2 	bl	800dca4 <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_rx_buf,sizeof(uart_rx_buf));
 8000d60:	2240      	movs	r2, #64	; 0x40
 8000d62:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x90>)
 8000d64:	4815      	ldr	r0, [pc, #84]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x8c>)
 8000d66:	f007 fee0 	bl	8008b2a <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <HAL_UARTEx_RxEventCallback+0x94>)
 8000d70:	f002 febc 	bl	8003aec <HAL_GPIO_WritePin>
		HAL_UART_DMAResume(&huart1);
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x8c>)
 8000d76:	f006 fca1 	bl	80076bc <HAL_UART_DMAResume>
	}

	if (huart->Instance == UART4)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <HAL_UARTEx_RxEventCallback+0x98>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d114      	bne.n	8000dae <HAL_UARTEx_RxEventCallback+0x7e>
	{
		HAL_UART_DMAPause(&huart4);
 8000d84:	4811      	ldr	r0, [pc, #68]	; (8000dcc <HAL_UARTEx_RxEventCallback+0x9c>)
 8000d86:	f006 fbfe 	bl	8007586 <HAL_UART_DMAPause>
		CDC_Transmit_FS(uart_rx_buf, Size);
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x90>)
 8000d90:	f00c f9c2 	bl	800d118 <CDC_Transmit_FS>
		memset(uart_rx_buf,'\0',sizeof(uart_rx_buf));
 8000d94:	2240      	movs	r2, #64	; 0x40
 8000d96:	2100      	movs	r1, #0
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x90>)
 8000d9a:	f00c ff83 	bl	800dca4 <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart4,uart_rx_buf,sizeof(uart_rx_buf));
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x90>)
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <HAL_UARTEx_RxEventCallback+0x9c>)
 8000da4:	f007 fec1 	bl	8008b2a <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_UART_DMAResume(&huart4);
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <HAL_UARTEx_RxEventCallback+0x9c>)
 8000daa:	f006 fc87 	bl	80076bc <HAL_UART_DMAResume>
	}
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	200003b0 	.word	0x200003b0
 8000dc0:	20000260 	.word	0x20000260
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	40004c00 	.word	0x40004c00
 8000dcc:	2000032c 	.word	0x2000032c

08000dd0 <flash_fpga_cmd>:
extern uint8_t usb_rx_buf[64];
extern uint8_t uart_rx_buf[64];


uint8_t flash_fpga_cmd()
{
 8000dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dd4:	b089      	sub	sp, #36	; 0x24
 8000dd6:	af00      	add	r7, sp, #0
	uint32_t file_size;
	uint32_t bytes_written = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
	uint32_t timer = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
	/*Flash fpga cmd ACK*/
	send_reply((uint8_t) ACK);
 8000de0:	2079      	movs	r0, #121	; 0x79
 8000de2:	f7ff ff69 	bl	8000cb8 <send_reply>

	if (usb_cmd_timeout(50))
 8000de6:	2032      	movs	r0, #50	; 0x32
 8000de8:	f7ff ff4a 	bl	8000c80 <usb_cmd_timeout>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <flash_fpga_cmd+0x26>
	{
		return 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e0d6      	b.n	8000fa4 <flash_fpga_cmd+0x1d4>
	}
	else
	{
		uint8_t temp_num[4];
		CDC_Read_FS(temp_num,sizeof(temp_num));
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00c f9ca 	bl	800d194 <CDC_Read_FS>
		file_size = (uint32_t)(temp_num[0]<<24) | (uint32_t)(temp_num[1]<<16) | (uint32_t)(temp_num[2]<<8) | (uint32_t)(temp_num[3]);
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	061b      	lsls	r3, r3, #24
 8000e04:	461a      	mov	r2, r3
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	041b      	lsls	r3, r3, #16
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	79ba      	ldrb	r2, [r7, #6]
 8000e0e:	0212      	lsls	r2, r2, #8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
		/*if the number of bytes is 0 or bigger than the available size then something is wrong*/
		if (file_size == 0 || file_size > SRAM_MAX_SIZE)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <flash_fpga_cmd+0x58>
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f248 32d6 	movw	r2, #33750	; 0x83d6
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d901      	bls.n	8000e2c <flash_fpga_cmd+0x5c>
		{
			return 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e0bb      	b.n	8000fa4 <flash_fpga_cmd+0x1d4>
		}
		/*File Size received ACK*/
		send_reply((uint8_t) ACK);
 8000e2c:	2079      	movs	r0, #121	; 0x79
 8000e2e:	f7ff ff43 	bl	8000cb8 <send_reply>
		/*Start configuration process.*/
		/*To begin we set the nCONFIG pin to high then low and high*/
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2104      	movs	r1, #4
 8000e36:	485e      	ldr	r0, [pc, #376]	; (8000fb0 <flash_fpga_cmd+0x1e0>)
 8000e38:	f002 fe58 	bl	8003aec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000e3c:	2032      	movs	r0, #50	; 0x32
 8000e3e:	f001 f995 	bl	800216c <HAL_Delay>
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2104      	movs	r1, #4
 8000e46:	485a      	ldr	r0, [pc, #360]	; (8000fb0 <flash_fpga_cmd+0x1e0>)
 8000e48:	f002 fe50 	bl	8003aec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000e4c:	2032      	movs	r0, #50	; 0x32
 8000e4e:	f001 f98d 	bl	800216c <HAL_Delay>
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2104      	movs	r1, #4
 8000e56:	4856      	ldr	r0, [pc, #344]	; (8000fb0 <flash_fpga_cmd+0x1e0>)
 8000e58:	f002 fe48 	bl	8003aec <HAL_GPIO_WritePin>
		send_reply((uint8_t) ACK);
 8000e5c:	2079      	movs	r0, #121	; 0x79
 8000e5e:	f7ff ff2b 	bl	8000cb8 <send_reply>
		do
		{
			/*nSTATUS Pin should change to PA2 in the final design*/
			if (HAL_GPIO_ReadPin(nSTATUS_GPIO_Port, nSTATUS_Pin) == GPIO_PIN_RESET)
 8000e62:	2102      	movs	r1, #2
 8000e64:	4853      	ldr	r0, [pc, #332]	; (8000fb4 <flash_fpga_cmd+0x1e4>)
 8000e66:	f002 fe29 	bl	8003abc <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d106      	bne.n	8000e7e <flash_fpga_cmd+0xae>
			{
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2110      	movs	r1, #16
 8000e74:	484f      	ldr	r0, [pc, #316]	; (8000fb4 <flash_fpga_cmd+0x1e4>)
 8000e76:	f002 fe39 	bl	8003aec <HAL_GPIO_WritePin>
				return 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e092      	b.n	8000fa4 <flash_fpga_cmd+0x1d4>
			}
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2110      	movs	r1, #16
 8000e82:	484c      	ldr	r0, [pc, #304]	; (8000fb4 <flash_fpga_cmd+0x1e4>)
 8000e84:	f002 fe32 	bl	8003aec <HAL_GPIO_WritePin>
			if(usb_cmd_timeout(50))
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f7ff fef9 	bl	8000c80 <usb_cmd_timeout>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <flash_fpga_cmd+0xc8>
			{
				return 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e085      	b.n	8000fa4 <flash_fpga_cmd+0x1d4>
			}
			else
			{
 8000e98:	466b      	mov	r3, sp
 8000e9a:	461e      	mov	r6, r3
				uint8_t usb_data_rx_size = CDC_Available_FS();
 8000e9c:	f00c f973 	bl	800d186 <CDC_Available_FS>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	74fb      	strb	r3, [r7, #19]
				uint8_t data[usb_data_rx_size];
 8000ea4:	7cf9      	ldrb	r1, [r7, #19]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	b2cb      	uxtb	r3, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	461c      	mov	r4, r3
 8000eb2:	4615      	mov	r5, r2
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	00eb      	lsls	r3, r5, #3
 8000ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ec2:	00e2      	lsls	r2, r4, #3
 8000ec4:	b2cb      	uxtb	r3, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4698      	mov	r8, r3
 8000eca:	4691      	mov	r9, r2
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ed8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000edc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	3307      	adds	r3, #7
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8000eec:	466b      	mov	r3, sp
 8000eee:	3300      	adds	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
				if (CDC_Read_FS(data, usb_data_rx_size))
 8000ef2:	7cfb      	ldrb	r3, [r7, #19]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f00c f94c 	bl	800d194 <CDC_Read_FS>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <flash_fpga_cmd+0x138>
				{
					return 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	46b5      	mov	sp, r6
 8000f06:	e04d      	b.n	8000fa4 <flash_fpga_cmd+0x1d4>
				}

				HAL_SPI_Transmit(&hspi2, data, usb_data_rx_size, 100);
 8000f08:	7cfb      	ldrb	r3, [r7, #19]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <flash_fpga_cmd+0x1e8>)
 8000f12:	f005 ff4a 	bl	8006daa <HAL_SPI_Transmit>
				bytes_written+=usb_data_rx_size;
 8000f16:	7cfb      	ldrb	r3, [r7, #19]
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	61fb      	str	r3, [r7, #28]
				/*Request the next packet*/
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2110      	movs	r1, #16
 8000f22:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <flash_fpga_cmd+0x1e4>)
 8000f24:	f002 fde2 	bl	8003aec <HAL_GPIO_WritePin>
				send_reply((uint8_t) ACK);
 8000f28:	2079      	movs	r0, #121	; 0x79
 8000f2a:	f7ff fec5 	bl	8000cb8 <send_reply>
 8000f2e:	46b5      	mov	sp, r6
			}
		}while(bytes_written-file_size);
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d194      	bne.n	8000e62 <flash_fpga_cmd+0x92>

		/*Once all the data has been transmitted wait for CONF_DONE to be SET*/
		timer = HAL_GetTick();
 8000f38:	f001 f90c 	bl	8002154 <HAL_GetTick>
 8000f3c:	61b8      	str	r0, [r7, #24]
		while (HAL_GetTick() - timer< 10000)
 8000f3e:	e006      	b.n	8000f4e <flash_fpga_cmd+0x17e>
		{
			if (HAL_GPIO_ReadPin(CONF_DONE_GPIO_Port, CONF_DONE_Pin) == GPIO_PIN_SET)
 8000f40:	2102      	movs	r1, #2
 8000f42:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <flash_fpga_cmd+0x1e0>)
 8000f44:	f002 fdba 	bl	8003abc <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d009      	beq.n	8000f62 <flash_fpga_cmd+0x192>
		while (HAL_GetTick() - timer< 10000)
 8000f4e:	f001 f901 	bl	8002154 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d9ef      	bls.n	8000f40 <flash_fpga_cmd+0x170>
 8000f60:	e000      	b.n	8000f64 <flash_fpga_cmd+0x194>
			{
			break;
 8000f62:	bf00      	nop
			}
		}

		/*Wait for the INIT_DONE to be SET*/
			timer = HAL_GetTick();
 8000f64:	f001 f8f6 	bl	8002154 <HAL_GetTick>
 8000f68:	61b8      	str	r0, [r7, #24]
			while (HAL_GetTick() - timer< 10000)
 8000f6a:	e011      	b.n	8000f90 <flash_fpga_cmd+0x1c0>
			{
				if (HAL_GPIO_ReadPin(INIT_DONE_GPIO_Port, INIT_DONE_Pin) == GPIO_PIN_SET)
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <flash_fpga_cmd+0x1e4>)
 8000f70:	f002 fda4 	bl	8003abc <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10a      	bne.n	8000f90 <flash_fpga_cmd+0x1c0>
				{
					send_reply((uint8_t) ACK);
 8000f7a:	2079      	movs	r0, #121	; 0x79
 8000f7c:	f7ff fe9c 	bl	8000cb8 <send_reply>
					is_fpga_conf = true;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <flash_fpga_cmd+0x1ec>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f001 f8f0 	bl	800216c <HAL_Delay>
					return 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e009      	b.n	8000fa4 <flash_fpga_cmd+0x1d4>
			while (HAL_GetTick() - timer< 10000)
 8000f90:	f001 f8e0 	bl	8002154 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d9e4      	bls.n	8000f6c <flash_fpga_cmd+0x19c>
				}
			}
	}
	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3724      	adds	r7, #36	; 0x24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	200002c8 	.word	0x200002c8
 8000fbc:	200002a0 	.word	0x200002a0

08000fc0 <fpga_usb_to_uart>:


void fpga_usb_to_uart()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	if (!is_fpga_conf)
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <fpga_usb_to_uart+0x88>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <fpga_usb_to_uart+0x1e>
	{
		send_reply((uint8_t) NACK);
 8000fd6:	206e      	movs	r0, #110	; 0x6e
 8000fd8:	f7ff fe6e 	bl	8000cb8 <send_reply>
		if (is_reset)
		{
			reset_fpga();
		}
	}
}
 8000fdc:	e030      	b.n	8001040 <fpga_usb_to_uart+0x80>
		send_reply((uint8_t) ACK);
 8000fde:	2079      	movs	r0, #121	; 0x79
 8000fe0:	f7ff fe6a 	bl	8000cb8 <send_reply>
		while(!is_reset && is_console_enabled)
 8000fe4:	e018      	b.n	8001018 <fpga_usb_to_uart+0x58>
			uint32_t data_length = CDC_Available_FS();
 8000fe6:	f00c f8ce 	bl	800d186 <CDC_Available_FS>
 8000fea:	6078      	str	r0, [r7, #4]
			if (data_length>0)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d012      	beq.n	8001018 <fpga_usb_to_uart+0x58>
				CDC_Read_FS(usb_rx_buf, data_length);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4815      	ldr	r0, [pc, #84]	; (800104c <fpga_usb_to_uart+0x8c>)
 8000ff6:	f00c f8cd 	bl	800d194 <CDC_Read_FS>
				HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f001 f8b6 	bl	800216c <HAL_Delay>
				HAL_UART_Transmit(&huart4,usb_rx_buf,data_length,10);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b29a      	uxth	r2, r3
 8001004:	230a      	movs	r3, #10
 8001006:	4911      	ldr	r1, [pc, #68]	; (800104c <fpga_usb_to_uart+0x8c>)
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <fpga_usb_to_uart+0x90>)
 800100a:	f006 fa28 	bl	800745e <HAL_UART_Transmit>
				memset(usb_rx_buf,'\0',data_length);
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	2100      	movs	r1, #0
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <fpga_usb_to_uart+0x8c>)
 8001014:	f00c fe46 	bl	800dca4 <memset>
		while(!is_reset && is_console_enabled)
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <fpga_usb_to_uart+0x94>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f083 0301 	eor.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <fpga_usb_to_uart+0x72>
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <fpga_usb_to_uart+0x98>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1d9      	bne.n	8000fe6 <fpga_usb_to_uart+0x26>
		if (is_reset)
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <fpga_usb_to_uart+0x94>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <fpga_usb_to_uart+0x80>
			reset_fpga();
 800103c:	f000 f80e 	bl	800105c <reset_fpga>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002a0 	.word	0x200002a0
 800104c:	20000220 	.word	0x20000220
 8001050:	2000032c 	.word	0x2000032c
 8001054:	20000847 	.word	0x20000847
 8001058:	20000848 	.word	0x20000848

0800105c <reset_fpga>:

void reset_fpga()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2104      	movs	r1, #4
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <reset_fpga+0x2c>)
 8001066:	f002 fd41 	bl	8003aec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800106a:	2032      	movs	r0, #50	; 0x32
 800106c:	f001 f87e 	bl	800216c <HAL_Delay>
	HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <reset_fpga+0x2c>)
 8001076:	f002 fd39 	bl	8003aec <HAL_GPIO_WritePin>
	/*Reset STM*/
	HAL_Delay(50);
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f001 f876 	bl	800216c <HAL_Delay>
	HAL_NVIC_SystemReset();
 8001080:	f001 f9f3 	bl	800246a <HAL_NVIC_SystemReset>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	48000800 	.word	0x48000800

0800108c <esp_init>:
extern uint8_t uart_rx_buf[64];



void esp_init()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ACK);
 8001090:	2079      	movs	r0, #121	; 0x79
 8001092:	f7ff fe11 	bl	8000cb8 <send_reply>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_rx_buf,sizeof(uart_rx_buf));
 8001096:	2240      	movs	r2, #64	; 0x40
 8001098:	4918      	ldr	r1, [pc, #96]	; (80010fc <esp_init+0x70>)
 800109a:	4819      	ldr	r0, [pc, #100]	; (8001100 <esp_init+0x74>)
 800109c:	f007 fd45 	bl	8008b2a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <esp_init+0x78>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <esp_init+0x78>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
	/*ESP download mode sequence*/

	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_RESET); /*IO9 strapping pin high*/
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <esp_init+0x7c>)
 80010b8:	f002 fd18 	bl	8003aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET); /*Reset pin low, esp is on reset*/
 80010bc:	2201      	movs	r2, #1
 80010be:	2101      	movs	r1, #1
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <esp_init+0x80>)
 80010c2:	f002 fd13 	bl	8003aec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f001 f850 	bl	800216c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_SET); /*IO9 strapping pin low, esp is on download mode*/
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <esp_init+0x7c>)
 80010d4:	f002 fd0a 	bl	8003aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET); /*Reset pin high, esp is out of reset and in bootloader mode*/
 80010d8:	2200      	movs	r2, #0
 80010da:	2101      	movs	r1, #1
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <esp_init+0x80>)
 80010de:	f002 fd05 	bl	8003aec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e6:	f001 f841 	bl	800216c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_RESET); /*IO9 strapping pin high, download sequence completed*/
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <esp_init+0x7c>)
 80010f2:	f002 fcfb 	bl	8003aec <HAL_GPIO_WritePin>

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000260 	.word	0x20000260
 8001100:	200003b0 	.word	0x200003b0
 8001104:	20000500 	.word	0x20000500
 8001108:	48000400 	.word	0x48000400
 800110c:	48000800 	.word	0x48000800

08001110 <esp_usb_to_uart>:

void esp_usb_to_uart()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	while(!is_reset)
 8001116:	e01d      	b.n	8001154 <esp_usb_to_uart+0x44>
	{
		/*There is a race condition that I can't detect. Adding a 10 ms delay is a workaround that works for whatever reason.*/

		uint32_t data_length = CDC_Available_FS();
 8001118:	f00c f835 	bl	800d186 <CDC_Available_FS>
 800111c:	6078      	str	r0, [r7, #4]
		if (data_length>0)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d017      	beq.n	8001154 <esp_usb_to_uart+0x44>
		{
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2110      	movs	r1, #16
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <esp_usb_to_uart+0x80>)
 800112a:	f002 fcdf 	bl	8003aec <HAL_GPIO_WritePin>
			CDC_Read_FS(usb_rx_buf, data_length);
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4818      	ldr	r0, [pc, #96]	; (8001194 <esp_usb_to_uart+0x84>)
 8001132:	f00c f82f 	bl	800d194 <CDC_Read_FS>
			HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 f818 	bl	800216c <HAL_Delay>
			HAL_UART_Transmit(&huart1,usb_rx_buf,data_length,10);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	b29a      	uxth	r2, r3
 8001140:	230a      	movs	r3, #10
 8001142:	4914      	ldr	r1, [pc, #80]	; (8001194 <esp_usb_to_uart+0x84>)
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <esp_usb_to_uart+0x88>)
 8001146:	f006 f98a 	bl	800745e <HAL_UART_Transmit>
			memset(usb_rx_buf,'\0',data_length);
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	2100      	movs	r1, #0
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <esp_usb_to_uart+0x84>)
 8001150:	f00c fda8 	bl	800dca4 <memset>
	while(!is_reset)
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <esp_usb_to_uart+0x8c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1d9      	bne.n	8001118 <esp_usb_to_uart+0x8>
		}
	}
/*Reset ESP*/
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2101      	movs	r1, #1
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <esp_usb_to_uart+0x90>)
 800116a:	f002 fcbf 	bl	8003aec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800116e:	20c8      	movs	r0, #200	; 0xc8
 8001170:	f000 fffc 	bl	800216c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2101      	movs	r1, #1
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <esp_usb_to_uart+0x90>)
 800117a:	f002 fcb7 	bl	8003aec <HAL_GPIO_WritePin>
	/*Reset STM*/
	HAL_Delay(50);
 800117e:	2032      	movs	r0, #50	; 0x32
 8001180:	f000 fff4 	bl	800216c <HAL_Delay>
	HAL_NVIC_SystemReset();
 8001184:	f001 f971 	bl	800246a <HAL_NVIC_SystemReset>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000400 	.word	0x48000400
 8001194:	20000220 	.word	0x20000220
 8001198:	200003b0 	.word	0x200003b0
 800119c:	20000847 	.word	0x20000847
 80011a0:	48000800 	.word	0x48000800

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011aa:	f000 ff27 	bl	8001ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ae:	f000 f859 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b2:	f000 f9cd 	bl	8001550 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b6:	f000 f999 	bl	80014ec <MX_DMA_Init>
  MX_UART4_Init();
 80011ba:	f000 f907 	bl	80013cc <MX_UART4_Init>
  MX_USART1_UART_Init();
 80011be:	f000 f935 	bl	800142c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011c2:	f000 f963 	bl	800148c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80011c6:	f00b fe79 	bl	800cebc <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80011ca:	f000 f89f 	bl	800130c <MX_CRC_Init>
  MX_SPI2_Init();
 80011ce:	f000 f8bf 	bl	8001350 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  bootloader_init();
 80011d2:	f7ff f9c9 	bl	8000568 <bootloader_init>
  uint32_t timer = HAL_GetTick();
 80011d6:	f000 ffbd 	bl	8002154 <HAL_GetTick>
 80011da:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_app_err || (((HAL_GetTick()-timer)<400) && !is_stm && !is_fpga && !is_esp))
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <main+0xb0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d11c      	bne.n	800121e <main+0x7a>
 80011e4:	f000 ffb6 	bl	8002154 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011f2:	d217      	bcs.n	8001224 <main+0x80>
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <main+0xb4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d010      	beq.n	8001224 <main+0x80>
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <main+0xb8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d009      	beq.n	8001224 <main+0x80>
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <main+0xbc>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f083 0301 	eor.w	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <main+0x80>
	  {
		  mode_handler();
 800121e:	f7ff fa07 	bl	8000630 <mode_handler>
 8001222:	e016      	b.n	8001252 <main+0xae>
	  }
	  else if(is_stm)
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <main+0xb4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <main+0x8e>
	  {
		  stm_cmd_handler();
 800122c:	f7ff fa5e 	bl	80006ec <stm_cmd_handler>
 8001230:	e7d4      	b.n	80011dc <main+0x38>
	  }
	  else if(is_fpga)
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <main+0xb8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <main+0x9c>
	  {
		  fpga_cmd_handler();
 800123a:	f7ff fa8b 	bl	8000754 <fpga_cmd_handler>
 800123e:	e7cd      	b.n	80011dc <main+0x38>
	  }
	  else if (is_esp)
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <main+0xbc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0xaa>
	  {
		  esp_cmd_handler();
 8001248:	f7ff fabc 	bl	80007c4 <esp_cmd_handler>
 800124c:	e7c6      	b.n	80011dc <main+0x38>
	  }
	  else
	  {
		  jump_cmd();
 800124e:	f7ff fb05 	bl	800085c <jump_cmd>
	  if (is_app_err || (((HAL_GetTick()-timer)<400) && !is_stm && !is_fpga && !is_esp))
 8001252:	e7c3      	b.n	80011dc <main+0x38>
 8001254:	2000054b 	.word	0x2000054b
 8001258:	20000548 	.word	0x20000548
 800125c:	20000549 	.word	0x20000549
 8001260:	2000054a 	.word	0x2000054a

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b096      	sub	sp, #88	; 0x58
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2244      	movs	r2, #68	; 0x44
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00c fd16 	bl	800dca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128a:	f004 fa41 	bl	8005710 <HAL_PWREx_ControlVoltageScaling>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001294:	f000 fa8e 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001298:	2322      	movs	r3, #34	; 0x22
 800129a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012a2:	2301      	movs	r3, #1
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ae:	2302      	movs	r3, #2
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012b6:	230a      	movs	r3, #10
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012be:	2302      	movs	r3, #2
 80012c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fb1e 	bl	800590c <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x76>
  {
    Error_Handler();
 80012d6:	f000 fa6d 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2303      	movs	r3, #3
 80012e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2104      	movs	r1, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 ff2a 	bl	800614c <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012fe:	f000 fa59 	bl	80017b4 <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3758      	adds	r7, #88	; 0x58
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_CRC_Init+0x3c>)
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <MX_CRC_Init+0x40>)
 8001314:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_CRC_Init+0x3c>)
 8001318:	2200      	movs	r2, #0
 800131a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_CRC_Init+0x3c>)
 800131e:	2200      	movs	r2, #0
 8001320:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_CRC_Init+0x3c>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MX_CRC_Init+0x3c>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_CRC_Init+0x3c>)
 8001330:	2201      	movs	r2, #1
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_CRC_Init+0x3c>)
 8001336:	f001 f8a9 	bl	800248c <HAL_CRC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001340:	f000 fa38 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002a4 	.word	0x200002a4
 800134c:	40023000 	.word	0x40023000

08001350 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_SPI2_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_SPI2_Init+0x74>)
 800135c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001360:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_SPI2_Init+0x74>)
 800136a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800136e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_SPI2_Init+0x74>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_SPI2_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_SPI2_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_SPI2_Init+0x74>)
 800139e:	2207      	movs	r2, #7
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_SPI2_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SPI2_Init+0x74>)
 80013aa:	2208      	movs	r2, #8
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_SPI2_Init+0x74>)
 80013b0:	f005 fc30 	bl	8006c14 <HAL_SPI_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f9fb 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200002c8 	.word	0x200002c8
 80013c8:	40003800 	.word	0x40003800

080013cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_UART4_Init+0x58>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <MX_UART4_Init+0x5c>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_UART4_Init+0x58>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_UART4_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_UART4_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_UART4_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_UART4_Init+0x58>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_UART4_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_UART4_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_UART4_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_UART4_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_UART4_Init+0x58>)
 8001410:	f005 ff9e 	bl	8007350 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800141a:	f000 f9cb 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000032c 	.word	0x2000032c
 8001428:	40004c00 	.word	0x40004c00

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_USART1_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART1_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART1_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART1_UART_Init+0x58>)
 8001470:	f005 ff6e 	bl	8007350 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 f99b 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003b0 	.word	0x200003b0
 8001488:	40013800 	.word	0x40013800

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_USART2_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014d0:	f005 ff3e 	bl	8007350 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f96b 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000434 	.word	0x20000434
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_DMA_Init+0x60>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_DMA_Init+0x60>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6493      	str	r3, [r2, #72]	; 0x48
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_DMA_Init+0x60>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_DMA_Init+0x60>)
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <MX_DMA_Init+0x60>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6493      	str	r3, [r2, #72]	; 0x48
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_DMA_Init+0x60>)
 8001518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	200f      	movs	r0, #15
 8001528:	f000 ff67 	bl	80023fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800152c:	200f      	movs	r0, #15
 800152e:	f000 ff80 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	203c      	movs	r0, #60	; 0x3c
 8001538:	f000 ff5f 	bl	80023fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800153c:	203c      	movs	r0, #60	; 0x3c
 800153e:	f000 ff78 	bl	8002432 <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b71      	ldr	r3, [pc, #452]	; (800172c <MX_GPIO_Init+0x1dc>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a70      	ldr	r2, [pc, #448]	; (800172c <MX_GPIO_Init+0x1dc>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b6e      	ldr	r3, [pc, #440]	; (800172c <MX_GPIO_Init+0x1dc>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	4b6b      	ldr	r3, [pc, #428]	; (800172c <MX_GPIO_Init+0x1dc>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a6a      	ldr	r2, [pc, #424]	; (800172c <MX_GPIO_Init+0x1dc>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b68      	ldr	r3, [pc, #416]	; (800172c <MX_GPIO_Init+0x1dc>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <MX_GPIO_Init+0x1dc>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a64      	ldr	r2, [pc, #400]	; (800172c <MX_GPIO_Init+0x1dc>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a5e      	ldr	r2, [pc, #376]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	4b59      	ldr	r3, [pc, #356]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <MX_GPIO_Init+0x1dc>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_RST_Pin|nCONFIG_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	4853      	ldr	r0, [pc, #332]	; (8001730 <MX_GPIO_Init+0x1e0>)
 80015e4:	f002 fa82 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2120      	movs	r1, #32
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f0:	f002 fa7c 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUSY_LED_Pin|ERROR_LED_Pin|ESP_IO9_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 710c 	mov.w	r1, #560	; 0x230
 80015fa:	484e      	ldr	r0, [pc, #312]	; (8001734 <MX_GPIO_Init+0x1e4>)
 80015fc:	f002 fa76 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001606:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4846      	ldr	r0, [pc, #280]	; (8001730 <MX_GPIO_Init+0x1e0>)
 8001618:	f001 fffc 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RST_Pin nCONFIG_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin|nCONFIG_Pin;
 800161c:	2305      	movs	r3, #5
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	483f      	ldr	r0, [pc, #252]	; (8001730 <MX_GPIO_Init+0x1e0>)
 8001634:	f001 ffee 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONF_DONE_Pin */
  GPIO_InitStruct.Pin = CONF_DONE_Pin;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONF_DONE_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4839      	ldr	r0, [pc, #228]	; (8001730 <MX_GPIO_Init+0x1e0>)
 800164c:	f001 ffe2 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001650:	f248 73d2 	movw	r3, #34770	; 0x87d2
 8001654:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001656:	2303      	movs	r3, #3
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f001 ffd4 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800166c:	2320      	movs	r3, #32
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001686:	f001 ffc5 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800168a:	f241 73f0 	movw	r3, #6128	; 0x17f0
 800168e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4824      	ldr	r0, [pc, #144]	; (8001730 <MX_GPIO_Init+0x1e0>)
 80016a0:	f001 ffb8 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80016a4:	f64f 1301 	movw	r3, #63745	; 0xf901
 80016a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	481e      	ldr	r0, [pc, #120]	; (8001734 <MX_GPIO_Init+0x1e4>)
 80016ba:	f001 ffab 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTATUS_Pin INIT_DONE_Pin */
  GPIO_InitStruct.Pin = nSTATUS_Pin|INIT_DONE_Pin;
 80016be:	2306      	movs	r3, #6
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_GPIO_Init+0x1e4>)
 80016d2:	f001 ff9f 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d6:	2304      	movs	r3, #4
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <MX_GPIO_Init+0x1e8>)
 80016ea:	f001 ff93 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_LED_Pin ERROR_LED_Pin ESP_IO9_Pin */
  GPIO_InitStruct.Pin = BUSY_LED_Pin|ERROR_LED_Pin|ESP_IO9_Pin;
 80016ee:	f44f 730c 	mov.w	r3, #560	; 0x230
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	; (8001734 <MX_GPIO_Init+0x1e4>)
 8001708:	f001 ff84 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800170c:	2308      	movs	r3, #8
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001710:	2303      	movs	r3, #3
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_GPIO_Init+0x1ec>)
 8001720:	f001 ff78 	bl	8003614 <HAL_GPIO_Init>

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	48000800 	.word	0x48000800
 8001734:	48000400 	.word	0x48000400
 8001738:	48000c00 	.word	0x48000c00
 800173c:	48001c00 	.word	0x48001c00

08001740 <deInitializer>:

/* USER CODE BEGIN 4 */
void deInitializer()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	HAL_CRC_DeInit(&hcrc);
 8001744:	4814      	ldr	r0, [pc, #80]	; (8001798 <deInitializer+0x58>)
 8001746:	f000 ff05 	bl	8002554 <HAL_CRC_DeInit>
	MX_USB_DEVICE_DeInit();
 800174a:	f00b fbab 	bl	800cea4 <MX_USB_DEVICE_DeInit>
	HAL_UART_DeInit(&huart2);
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <deInitializer+0x5c>)
 8001750:	f005 fe4c 	bl	80073ec <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart1);
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <deInitializer+0x60>)
 8001756:	f005 fe49 	bl	80073ec <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart4);
 800175a:	4812      	ldr	r0, [pc, #72]	; (80017a4 <deInitializer+0x64>)
 800175c:	f005 fe46 	bl	80073ec <HAL_UART_DeInit>
	HAL_SPI_DeInit(&hspi2);
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <deInitializer+0x68>)
 8001762:	f005 fafa 	bl	8006d5a <HAL_SPI_DeInit>
	HAL_GPIO_DeInit(LD4_GPIO_Port, LD4_Pin);
 8001766:	2120      	movs	r1, #32
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f002 f8cc 	bl	8003908 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(B1_GPIO_Port, B1_Pin);
 8001770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <deInitializer+0x6c>)
 8001776:	f002 f8c7 	bl	8003908 <HAL_GPIO_DeInit>

	HAL_RCC_DeInit();
 800177a:	f004 f82f 	bl	80057dc <HAL_RCC_DeInit>
	HAL_DeInit();
 800177e:	f000 fc5d 	bl	800203c <HAL_DeInit>
	SysTick->CTRL = 0;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <deInitializer+0x70>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <deInitializer+0x70>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <deInitializer+0x70>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002a4 	.word	0x200002a4
 800179c:	20000434 	.word	0x20000434
 80017a0:	200003b0 	.word	0x200003b0
 80017a4:	2000032c 	.word	0x2000032c
 80017a8:	200002c8 	.word	0x200002c8
 80017ac:	48000800 	.word	0x48000800
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80017bc:	2120      	movs	r1, #32
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <Error_Handler+0x1c>)
 80017c0:	f002 f9ac 	bl	8003b1c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80017c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c8:	f000 fcd0 	bl	800216c <HAL_Delay>
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80017cc:	e7f6      	b.n	80017bc <Error_Handler+0x8>
 80017ce:	bf00      	nop
 80017d0:	48000400 	.word	0x48000400

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_MspInit+0x44>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_MspInit+0x44>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_MspInit+0x44>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_MspInit+0x44>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a08      	ldr	r2, [pc, #32]	; (8001818 <HAL_MspInit+0x44>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_MspInit+0x44>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_CRC_MspInit+0x38>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10b      	bne.n	8001846 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_CRC_MspInit+0x3c>)
 8001830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_CRC_MspInit+0x3c>)
 8001834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001838:	6493      	str	r3, [r2, #72]	; 0x48
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_CRC_MspInit+0x3c>)
 800183c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023000 	.word	0x40023000
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_CRC_MspDeInit+0x2c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d105      	bne.n	800187a <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_CRC_MspDeInit+0x30>)
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_CRC_MspDeInit+0x30>)
 8001874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001878:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40023000 	.word	0x40023000
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a25      	ldr	r2, [pc, #148]	; (8001944 <HAL_SPI_MspInit+0xb4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d144      	bne.n	800193c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a18      	ldr	r2, [pc, #96]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_SPI_MspInit+0xb8>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018fa:	2308      	movs	r3, #8
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800190a:	2305      	movs	r3, #5
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <HAL_SPI_MspInit+0xbc>)
 8001916:	f001 fe7d 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192c:	2305      	movs	r3, #5
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <HAL_SPI_MspInit+0xc0>)
 8001938:	f001 fe6c 	bl	8003614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40003800 	.word	0x40003800
 8001948:	40021000 	.word	0x40021000
 800194c:	48000800 	.word	0x48000800
 8001950:	48000400 	.word	0x48000400

08001954 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_SPI_MspDeInit+0x38>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10e      	bne.n	8001984 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_SPI_MspDeInit+0x3c>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_SPI_MspDeInit+0x3c>)
 800196c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001970:	6593      	str	r3, [r2, #88]	; 0x58

    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8001972:	2108      	movs	r1, #8
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <HAL_SPI_MspDeInit+0x40>)
 8001976:	f001 ffc7 	bl	8003908 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800197a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <HAL_SPI_MspDeInit+0x44>)
 8001980:	f001 ffc2 	bl	8003908 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40003800 	.word	0x40003800
 8001990:	40021000 	.word	0x40021000
 8001994:	48000800 	.word	0x48000800
 8001998:	48000400 	.word	0x48000400

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0a8      	sub	sp, #160	; 0xa0
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	2268      	movs	r2, #104	; 0x68
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f00c f971 	bl	800dca4 <memset>
  if(huart->Instance==UART4)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4aa5      	ldr	r2, [pc, #660]	; (8001c5c <HAL_UART_MspInit+0x2c0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f040 8090 	bne.w	8001aee <HAL_UART_MspInit+0x152>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019ce:	2308      	movs	r3, #8
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 fdbc 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019e6:	f7ff fee5 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019ea:	4b9d      	ldr	r3, [pc, #628]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	4a9c      	ldr	r2, [pc, #624]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 80019f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
 80019f6:	4b9a      	ldr	r3, [pc, #616]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b97      	ldr	r3, [pc, #604]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a96      	ldr	r2, [pc, #600]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b91      	ldr	r3, [pc, #580]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a90      	ldr	r2, [pc, #576]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f001 fddb 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a82:	4619      	mov	r1, r3
 8001a84:	4877      	ldr	r0, [pc, #476]	; (8001c64 <HAL_UART_MspInit+0x2c8>)
 8001a86:	f001 fdc5 	bl	8003614 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001a8a:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001a8c:	4a77      	ldr	r2, [pc, #476]	; (8001c6c <HAL_UART_MspInit+0x2d0>)
 8001a8e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8001a90:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a96:	4b74      	ldr	r3, [pc, #464]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9c:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa2:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ac0:	4869      	ldr	r0, [pc, #420]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001ac2:	f000 ff55 	bl	8002970 <HAL_DMA_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8001acc:	f7ff fe72 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <HAL_UART_MspInit+0x2cc>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2034      	movs	r0, #52	; 0x34
 8001ae2:	f000 fc8a 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ae6:	2034      	movs	r0, #52	; 0x34
 8001ae8:	f000 fca3 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aec:	e0b2      	b.n	8001c54 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5f      	ldr	r2, [pc, #380]	; (8001c70 <HAL_UART_MspInit+0x2d4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d16c      	bne.n	8001bd2 <HAL_UART_MspInit+0x236>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001afc:	2300      	movs	r3, #0
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fd27 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8001b10:	f7ff fe50 	bl	80017b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b14:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b20:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b44:	23c0      	movs	r3, #192	; 0xc0
 8001b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b66:	4619      	mov	r1, r3
 8001b68:	4842      	ldr	r0, [pc, #264]	; (8001c74 <HAL_UART_MspInit+0x2d8>)
 8001b6a:	f001 fd53 	bl	8003614 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b6e:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b70:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_UART_MspInit+0x2e0>)
 8001b72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b76:	2202      	movs	r2, #2
 8001b78:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b80:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ba4:	4834      	ldr	r0, [pc, #208]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001ba6:	f000 fee3 	bl	8002970 <HAL_DMA_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8001bb0:	f7ff fe00 	bl	80017b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001bb8:	671a      	str	r2, [r3, #112]	; 0x70
 8001bba:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <HAL_UART_MspInit+0x2dc>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2025      	movs	r0, #37	; 0x25
 8001bc6:	f000 fc18 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bca:	2025      	movs	r0, #37	; 0x25
 8001bcc:	f000 fc31 	bl	8002432 <HAL_NVIC_EnableIRQ>
}
 8001bd0:	e040      	b.n	8001c54 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_UART_MspInit+0x2e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d13b      	bne.n	8001c54 <HAL_UART_MspInit+0x2b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 fcb5 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001bf4:	f7ff fdde 	bl	80017b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c02:	6593      	str	r3, [r2, #88]	; 0x58
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_UART_MspInit+0x2c4>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c40:	2307      	movs	r3, #7
 8001c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f001 fce0 	bl	8003614 <HAL_GPIO_Init>
}
 8001c54:	bf00      	nop
 8001c56:	37a0      	adds	r7, #160	; 0xa0
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40004c00 	.word	0x40004c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000800 	.word	0x48000800
 8001c68:	200004b8 	.word	0x200004b8
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40013800 	.word	0x40013800
 8001c74:	48000400 	.word	0x48000400
 8001c78:	20000500 	.word	0x20000500
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	40004400 	.word	0x40004400

08001c84 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_UART_MspDeInit+0x9c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d118      	bne.n	8001cc8 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_UART_MspDeInit+0xa0>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <HAL_UART_MspDeInit+0xa0>)
 8001c9c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f001 fe2e 	bl	8003908 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8001cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cb0:	481d      	ldr	r0, [pc, #116]	; (8001d28 <HAL_UART_MspDeInit+0xa4>)
 8001cb2:	f001 fe29 	bl	8003908 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 ff10 	bl	8002ae0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001cc0:	2034      	movs	r0, #52	; 0x34
 8001cc2:	f000 fbc4 	bl	800244e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001cc6:	e027      	b.n	8001d18 <HAL_UART_MspDeInit+0x94>
  else if(huart->Instance==USART1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspDeInit+0xa8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d112      	bne.n	8001cf8 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_UART_MspDeInit+0xa0>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_UART_MspDeInit+0xa0>)
 8001cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001cde:	21c0      	movs	r1, #192	; 0xc0
 8001ce0:	4813      	ldr	r0, [pc, #76]	; (8001d30 <HAL_UART_MspDeInit+0xac>)
 8001ce2:	f001 fe11 	bl	8003908 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fef8 	bl	8002ae0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001cf0:	2025      	movs	r0, #37	; 0x25
 8001cf2:	f000 fbac 	bl	800244e <HAL_NVIC_DisableIRQ>
}
 8001cf6:	e00f      	b.n	8001d18 <HAL_UART_MspDeInit+0x94>
  else if(huart->Instance==USART2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_UART_MspDeInit+0xb0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10a      	bne.n	8001d18 <HAL_UART_MspDeInit+0x94>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_UART_MspDeInit+0xa0>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_UART_MspDeInit+0xa0>)
 8001d08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001d0e:	210c      	movs	r1, #12
 8001d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d14:	f001 fdf8 	bl	8003908 <HAL_GPIO_DeInit>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40004c00 	.word	0x40004c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	48000400 	.word	0x48000400
 8001d34:	40004400 	.word	0x40004400

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>
	...

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001d44:	2120      	movs	r1, #32
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <HardFault_Handler+0x18>)
 8001d48:	f001 fee8 	bl	8003b1c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d50:	f000 fa0c 	bl	800216c <HAL_Delay>
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001d54:	e7f6      	b.n	8001d44 <HardFault_Handler+0x4>
 8001d56:	bf00      	nop
 8001d58:	48000400 	.word	0x48000400

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <MemManage_Handler+0x4>

08001d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9c:	f000 f9c6 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Channel5_IRQHandler+0x10>)
 8001daa:	f001 f80a 	bl	8002dc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000500 	.word	0x20000500

08001db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USART1_IRQHandler+0x10>)
 8001dbe:	f005 fd0f 	bl	80077e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003b0 	.word	0x200003b0

08001dcc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <UART4_IRQHandler+0x10>)
 8001dd2:	f005 fd05 	bl	80077e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000032c 	.word	0x2000032c

08001de0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA2_Channel5_IRQHandler+0x10>)
 8001de6:	f000 ffec 	bl	8002dc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200004b8 	.word	0x200004b8

08001df4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USB_IRQHandler+0x10>)
 8001dfa:	f002 f827 	bl	8003e4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20001acc 	.word	0x20001acc

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f00b ff02 	bl	800dc40 <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20028000 	.word	0x20028000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	2000054c 	.word	0x2000054c
 8001e70:	20001ff0 	.word	0x20001ff0

08001e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <SystemInit+0x20>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <SystemInit+0x20>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <Boot_Reset_Handler>:

    .section	.text.Boot_Reset_Handler
	.weak	Boot_Reset_Handler
	.type	Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e9c:	f7ff ffea 	bl	8001e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <LoopForever+0xe>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ee4 <LoopForever+0x16>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f00b fec1 	bl	800dc4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eca:	f7ff f96b 	bl	80011a4 <main>

08001ece <LoopForever>:

LoopForever:
    b LoopForever
 8001ece:	e7fe      	b.n	8001ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001edc:	0800df90 	.word	0x0800df90
  ldr r2, =_sbss
 8001ee0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001ee4:	20001ff0 	.word	0x20001ff0

08001ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC1_IRQHandler>

08001eea <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ef6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f02:	b672      	cpsid	i
}
 8001f04:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f06:	f3bf 8f4f 	dsb	sy
}
 8001f0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f0c:	f3bf 8f6f 	isb	sy
}
 8001f10:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f18:	b672      	cpsid	i
}
 8001f1a:	bf00      	nop
 8001f1c:	f7ff fc4a 	bl	80017b4 <Error_Handler>
 8001f20:	e7fe      	b.n	8001f20 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e008      	b.n	8001f44 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d104      	bne.n	8001f44 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3a:	b672      	cpsid	i
}
 8001f3c:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001f3e:	f7ff fc39 	bl	80017b4 <Error_Handler>
 8001f42:	e7fe      	b.n	8001f42 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	705a      	strb	r2, [r3, #1]
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f66:	b672      	cpsid	i
}
 8001f68:	bf00      	nop
 8001f6a:	f7ff fc23 	bl	80017b4 <Error_Handler>
 8001f6e:	e7fe      	b.n	8001f6e <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d104      	bne.n	8001f82 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001f7c:	f7ff fc1a 	bl	80017b4 <Error_Handler>
 8001f80:	e7fe      	b.n	8001f80 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <stm32_lock_release+0x4a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f9e:	b662      	cpsie	i
}
 8001fa0:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
 8001fbc:	f7ff fbfa 	bl	80017b4 <Error_Handler>
 8001fc0:	e7fe      	b.n	8001fc0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff90 	bl	8001eea <stm32_lock_acquire>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d104      	bne.n	8001fea <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
 8001fe4:	f7ff fbe6 	bl	80017b4 <Error_Handler>
 8001fe8:	e7fe      	b.n	8001fe8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ffb3 	bl	8001f58 <stm32_lock_release>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_Init+0x3c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_Init+0x3c>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002012:	2003      	movs	r0, #3
 8002014:	f000 f9e6 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002018:	2000      	movs	r0, #0
 800201a:	f000 f84b 	bl	80020b4 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	71fb      	strb	r3, [r7, #7]
 8002028:	e001      	b.n	800202e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800202a:	f7ff fbd3 	bl	80017d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800202e:	79fb      	ldrb	r3, [r7, #7]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_DeInit+0x64>)
 8002042:	f04f 32ff 	mov.w	r2, #4294967295
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_DeInit+0x64>)
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_DeInit+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_DeInit+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_DeInit+0x64>)
 800205e:	f04f 32ff 	mov.w	r2, #4294967295
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_DeInit+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_DeInit+0x64>)
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_DeInit+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_DeInit+0x64>)
 800207a:	f04f 32ff 	mov.w	r2, #4294967295
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_DeInit+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_DeInit+0x64>)
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_DeInit+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002094:	f000 f806 	bl	80020a4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_InitTick+0x6c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_InitTick+0x70>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_InitTick+0x6c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f9c7 	bl	8002472 <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d809      	bhi.n	8002104 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f0:	2200      	movs	r2, #0
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 f97f 	bl	80023fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_InitTick+0x74>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e007      	b.n	8002114 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e004      	b.n	8002114 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e001      	b.n	8002114 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008
 8002150:	20000554 	.word	0x20000554

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000554 	.word	0x20000554

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <HAL_GetDEVID+0x18>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e0042000 	.word	0xe0042000

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db12      	blt.n	80022a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	490a      	ldr	r1, [pc, #40]	; (80022b4 <__NVIC_DisableIRQ+0x44>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	3320      	adds	r3, #32
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800229c:	f3bf 8f4f 	dsb	sy
}
 80022a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a2:	f3bf 8f6f 	isb	sy
}
 80022a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002378:	f3bf 8f4f 	dsb	sy
}
 800237c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <__NVIC_SystemReset+0x24>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002386:	4904      	ldr	r1, [pc, #16]	; (8002398 <__NVIC_SystemReset+0x24>)
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_SystemReset+0x28>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
}
 8002392:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <__NVIC_SystemReset+0x20>
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	05fa0004 	.word	0x05fa0004

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff78 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff feef 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff04 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff78 	bl	800230c <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff47 	bl	80022b8 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fef7 	bl	8002234 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff07 	bl	8002270 <__NVIC_DisableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800246e:	f7ff ff81 	bl	8002374 <__NVIC_SystemReset>

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ff90 	bl	80023a0 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e054      	b.n	8002548 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f5b      	ldrb	r3, [r3, #29]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff f9b4 	bl	800181c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	791b      	ldrb	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_CRC_Init+0xc4>)
 80024c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0218 	bic.w	r2, r2, #24
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e00c      	b.n	80024f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f9bc 	bl	8002864 <HAL_CRCEx_Polynomial_Set>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e028      	b.n	8002548 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	795b      	ldrb	r3, [r3, #5]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 32ff 	mov.w	r2, #4294967295
 8002506:	611a      	str	r2, [r3, #16]
 8002508:	e004      	b.n	8002514 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6912      	ldr	r2, [r2, #16]
 8002512:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	04c11db7 	.word	0x04c11db7

08002554 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e022      	b.n	80025ac <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7f5b      	ldrb	r3, [r3, #29]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d101      	bne.n	8002574 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
 8002572:	e01b      	b.n	80025ac <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff f95f 	bl	800185c <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2202      	movs	r2, #2
 80025c8:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d006      	beq.n	80025e0 <HAL_CRC_Accumulate+0x2c>
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d829      	bhi.n	800262a <HAL_CRC_Accumulate+0x76>
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d019      	beq.n	800260e <HAL_CRC_Accumulate+0x5a>
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d01e      	beq.n	800261c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80025de:	e024      	b.n	800262a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00a      	b.n	80025fc <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	441a      	add	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d3f0      	bcc.n	80025e6 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	e00e      	b.n	800262c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f85e 	bl	80026d4 <CRC_Handle_8>
 8002618:	6138      	str	r0, [r7, #16]
      break;
 800261a:	e007      	b.n	800262c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f8e5 	bl	80027f0 <CRC_Handle_16>
 8002626:	6138      	str	r0, [r7, #16]
      break;
 8002628:	e000      	b.n	800262c <HAL_CRC_Accumulate+0x78>
      break;
 800262a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002632:	693b      	ldr	r3, [r7, #16]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2202      	movs	r2, #2
 8002650:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d006      	beq.n	8002678 <HAL_CRC_Calculate+0x3c>
 800266a:	2b03      	cmp	r3, #3
 800266c:	d829      	bhi.n	80026c2 <HAL_CRC_Calculate+0x86>
 800266e:	2b01      	cmp	r3, #1
 8002670:	d019      	beq.n	80026a6 <HAL_CRC_Calculate+0x6a>
 8002672:	2b02      	cmp	r3, #2
 8002674:	d01e      	beq.n	80026b4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002676:	e024      	b.n	80026c2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e00a      	b.n	8002694 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	441a      	add	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3f0      	bcc.n	800267e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
      break;
 80026a4:	e00e      	b.n	80026c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f812 	bl	80026d4 <CRC_Handle_8>
 80026b0:	6138      	str	r0, [r7, #16]
      break;
 80026b2:	e007      	b.n	80026c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f899 	bl	80027f0 <CRC_Handle_16>
 80026be:	6138      	str	r0, [r7, #16]
      break;
 80026c0:	e000      	b.n	80026c4 <HAL_CRC_Calculate+0x88>
      break;
 80026c2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80026ca:	693b      	ldr	r3, [r7, #16]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	e023      	b.n	800272e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3301      	adds	r3, #1
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	440b      	add	r3, r1
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002700:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	440b      	add	r3, r1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002710:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3303      	adds	r3, #3
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	440b      	add	r3, r1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002724:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	429a      	cmp	r2, r3
 8002736:	d3d6      	bcc.n	80026e6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d04d      	beq.n	80027de <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4413      	add	r3, r2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d116      	bne.n	8002794 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21a      	sxth	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3301      	adds	r3, #1
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	440b      	add	r3, r1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21b      	sxth	r3, r3
 8002786:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	8b7a      	ldrh	r2, [r7, #26]
 8002792:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d11f      	bne.n	80027de <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	4413      	add	r3, r2
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	3301      	adds	r3, #1
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	440b      	add	r3, r1
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b21b      	sxth	r3, r3
 80027be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	8b7a      	ldrh	r2, [r7, #26]
 80027ca:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4413      	add	r3, r2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3724      	adds	r7, #36	; 0x24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e013      	b.n	800282a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	440b      	add	r3, r1
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3e6      	bcc.n	8002802 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	4413      	add	r3, r2
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002874:	231f      	movs	r3, #31
 8002876:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002878:	bf00      	nop
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	613a      	str	r2, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <HAL_CRCEx_Polynomial_Set+0x34>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b18      	cmp	r3, #24
 800289c:	d846      	bhi.n	800292c <HAL_CRCEx_Polynomial_Set+0xc8>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	08002933 	.word	0x08002933
 80028a8:	0800292d 	.word	0x0800292d
 80028ac:	0800292d 	.word	0x0800292d
 80028b0:	0800292d 	.word	0x0800292d
 80028b4:	0800292d 	.word	0x0800292d
 80028b8:	0800292d 	.word	0x0800292d
 80028bc:	0800292d 	.word	0x0800292d
 80028c0:	0800292d 	.word	0x0800292d
 80028c4:	08002921 	.word	0x08002921
 80028c8:	0800292d 	.word	0x0800292d
 80028cc:	0800292d 	.word	0x0800292d
 80028d0:	0800292d 	.word	0x0800292d
 80028d4:	0800292d 	.word	0x0800292d
 80028d8:	0800292d 	.word	0x0800292d
 80028dc:	0800292d 	.word	0x0800292d
 80028e0:	0800292d 	.word	0x0800292d
 80028e4:	08002915 	.word	0x08002915
 80028e8:	0800292d 	.word	0x0800292d
 80028ec:	0800292d 	.word	0x0800292d
 80028f0:	0800292d 	.word	0x0800292d
 80028f4:	0800292d 	.word	0x0800292d
 80028f8:	0800292d 	.word	0x0800292d
 80028fc:	0800292d 	.word	0x0800292d
 8002900:	0800292d 	.word	0x0800292d
 8002904:	08002909 	.word	0x08002909
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b06      	cmp	r3, #6
 800290c:	d913      	bls.n	8002936 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002912:	e010      	b.n	8002936 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b07      	cmp	r3, #7
 8002918:	d90f      	bls.n	800293a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800291e:	e00c      	b.n	800293a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d90b      	bls.n	800293e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800292a:	e008      	b.n	800293e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	75fb      	strb	r3, [r7, #23]
      break;
 8002930:	e006      	b.n	8002940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002932:	bf00      	nop
 8002934:	e004      	b.n	8002940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800293e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 0118 	bic.w	r1, r3, #24
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e098      	b.n	8002ab4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_DMA_Init+0x150>)
 800298a:	429a      	cmp	r2, r3
 800298c:	d80f      	bhi.n	80029ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <HAL_DMA_Init+0x154>)
 8002996:	4413      	add	r3, r2
 8002998:	4a4b      	ldr	r2, [pc, #300]	; (8002ac8 <HAL_DMA_Init+0x158>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	009a      	lsls	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_DMA_Init+0x15c>)
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
 80029ac:	e00e      	b.n	80029cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <HAL_DMA_Init+0x160>)
 80029b6:	4413      	add	r3, r2
 80029b8:	4a43      	ldr	r2, [pc, #268]	; (8002ac8 <HAL_DMA_Init+0x158>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_DMA_Init+0x164>)
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a26:	d039      	beq.n	8002a9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_DMA_Init+0x15c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d11a      	bne.n	8002a68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_DMA_Init+0x168>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f003 031c 	and.w	r3, r3, #28
 8002a3e:	210f      	movs	r1, #15
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	4924      	ldr	r1, [pc, #144]	; (8002ad8 <HAL_DMA_Init+0x168>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_DMA_Init+0x168>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f003 031c 	and.w	r3, r3, #28
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	491d      	ldr	r1, [pc, #116]	; (8002ad8 <HAL_DMA_Init+0x168>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
 8002a66:	e019      	b.n	8002a9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_DMA_Init+0x16c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f003 031c 	and.w	r3, r3, #28
 8002a74:	210f      	movs	r1, #15
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	4917      	ldr	r1, [pc, #92]	; (8002adc <HAL_DMA_Init+0x16c>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_DMA_Init+0x16c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 031c 	and.w	r3, r3, #28
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	4911      	ldr	r1, [pc, #68]	; (8002adc <HAL_DMA_Init+0x16c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40020407 	.word	0x40020407
 8002ac4:	bffdfff8 	.word	0xbffdfff8
 8002ac8:	cccccccd 	.word	0xcccccccd
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	bffdfbf8 	.word	0xbffdfbf8
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	400200a8 	.word	0x400200a8
 8002adc:	400204a8 	.word	0x400204a8

08002ae0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e072      	b.n	8002bd8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_DMA_DeInit+0x104>)
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d80f      	bhi.n	8002b2e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_DMA_DeInit+0x108>)
 8002b16:	4413      	add	r3, r2
 8002b18:	4a34      	ldr	r2, [pc, #208]	; (8002bec <HAL_DMA_DeInit+0x10c>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_DMA_DeInit+0x110>)
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b2c:	e00e      	b.n	8002b4c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_DMA_DeInit+0x114>)
 8002b36:	4413      	add	r3, r2
 8002b38:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_DMA_DeInit+0x10c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <HAL_DMA_DeInit+0x118>)
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f003 021c 	and.w	r2, r3, #28
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <HAL_DMA_DeInit+0x110>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10d      	bne.n	8002b8e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_DMA_DeInit+0x11c>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f003 031c 	and.w	r3, r3, #28
 8002b7e:	210f      	movs	r1, #15
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	491d      	ldr	r1, [pc, #116]	; (8002bfc <HAL_DMA_DeInit+0x11c>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
 8002b8c:	e00c      	b.n	8002ba8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_DMA_DeInit+0x120>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 031c 	and.w	r3, r3, #28
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4917      	ldr	r1, [pc, #92]	; (8002c00 <HAL_DMA_DeInit+0x120>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40020407 	.word	0x40020407
 8002be8:	bffdfff8 	.word	0xbffdfff8
 8002bec:	cccccccd 	.word	0xcccccccd
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	bffdfbf8 	.word	0xbffdfbf8
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	400200a8 	.word	0x400200a8
 8002c00:	400204a8 	.word	0x400204a8

08002c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_DMA_Start_IT+0x20>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e04b      	b.n	8002cbc <HAL_DMA_Start_IT+0xb8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d13a      	bne.n	8002cae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f95f 	bl	8002f20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 020e 	orr.w	r2, r2, #14
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00f      	b.n	8002c9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 020a 	orr.w	r2, r2, #10
 8002c9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e005      	b.n	8002cba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e022      	b.n	8002d34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 020e 	bic.w	r2, r2, #14
 8002cfc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f003 021c 	and.w	r2, r3, #28
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d005      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e029      	b.n	8002db8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 020e 	bic.w	r2, r2, #14
 8002d72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	f003 021c 	and.w	r2, r3, #28
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f202 	lsl.w	r2, r1, r2
 8002d96:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
    }
  }
  return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f003 031c 	and.w	r3, r3, #28
 8002de2:	2204      	movs	r2, #4
 8002de4:	409a      	lsls	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d026      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x7a>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d021      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d107      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0204 	bic.w	r2, r2, #4
 8002e14:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f003 021c 	and.w	r2, r3, #28
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2104      	movs	r1, #4
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d071      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e3a:	e06c      	b.n	8002f16 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f003 031c 	and.w	r3, r3, #28
 8002e44:	2202      	movs	r2, #2
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02e      	beq.n	8002eae <HAL_DMA_IRQHandler+0xec>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d029      	beq.n	8002eae <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020a 	bic.w	r2, r2, #10
 8002e76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f003 021c 	and.w	r2, r3, #28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d038      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002eac:	e033      	b.n	8002f16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f003 031c 	and.w	r3, r3, #28
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02a      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x156>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d025      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020e 	bic.w	r2, r2, #14
 8002eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f003 021c 	and.w	r2, r3, #28
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
}
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f003 021c 	and.w	r2, r3, #28
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d108      	bne.n	8002f64 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f62:	e007      	b.n	8002f74 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_FLASH_Program+0xd0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_FLASH_Program+0x1e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e053      	b.n	8003046 <HAL_FLASH_Program+0xc6>
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_FLASH_Program+0xd0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fa8:	f000 f888 	bl	80030bc <FLASH_WaitForLastOperation>
 8002fac:	4603      	mov	r3, r0
 8002fae:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d143      	bne.n	800303e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_FLASH_Program+0xd0>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_FLASH_Program+0xd4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_FLASH_Program+0xd4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_FLASH_Program+0xd4>)
 8002fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_FLASH_Program+0xd0>)
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	771a      	strb	r2, [r3, #28]
 8002fda:	e002      	b.n	8002fe2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_FLASH_Program+0xd0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f000 f8bd 	bl	800316c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e010      	b.n	800301a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d002      	beq.n	8003004 <HAL_FLASH_Program+0x84>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d10a      	bne.n	800301a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f000 f8d5 	bl	80031b8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d102      	bne.n	800301a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003018:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800301a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800301e:	f000 f84d 	bl	80030bc <FLASH_WaitForLastOperation>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_FLASH_Program+0xd4>)
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	4907      	ldr	r1, [pc, #28]	; (8003054 <HAL_FLASH_Program+0xd4>)
 8003036:	4013      	ands	r3, r2
 8003038:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800303a:	f000 fa11 	bl	8003460 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_FLASH_Program+0xd0>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]

  return status;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000000c 	.word	0x2000000c
 8003054:	40022000 	.word	0x40022000

08003058 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_FLASH_Unlock+0x38>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	da0b      	bge.n	8003082 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_FLASH_Unlock+0x38>)
 800306c:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_FLASH_Unlock+0x3c>)
 800306e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_FLASH_Unlock+0x38>)
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_FLASH_Unlock+0x40>)
 8003074:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_FLASH_Unlock+0x38>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	da01      	bge.n	8003082 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003082:	79fb      	ldrb	r3, [r7, #7]
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40022000 	.word	0x40022000
 8003094:	45670123 	.word	0x45670123
 8003098:	cdef89ab 	.word	0xcdef89ab

0800309c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_FLASH_Lock+0x1c>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_FLASH_Lock+0x1c>)
 80030a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030aa:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40022000 	.word	0x40022000

080030bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff f846 	bl	8002154 <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80030ca:	e00d      	b.n	80030e8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d009      	beq.n	80030e8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80030d4:	f7ff f83e 	bl	8002154 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d801      	bhi.n	80030e8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e036      	b.n	8003156 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1eb      	bne.n	80030cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <FLASH_WaitForLastOperation+0xa8>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01e      	beq.n	8003142 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <FLASH_WaitForLastOperation+0xac>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <FLASH_WaitForLastOperation+0xac>)
 800310e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <FLASH_WaitForLastOperation+0x6e>
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	618b      	str	r3, [r1, #24]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <FLASH_WaitForLastOperation+0x82>
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800313c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e009      	b.n	8003156 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <FLASH_WaitForLastOperation+0xa4>)
 8003150:	2201      	movs	r2, #1
 8003152:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000
 8003164:	0002c3fa 	.word	0x0002c3fa
 8003168:	2000000c 	.word	0x2000000c

0800316c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <FLASH_Program_DoubleWord+0x48>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <FLASH_Program_DoubleWord+0x48>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800318a:	f3bf 8f6f 	isb	sy
}
 800318e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	000a      	movs	r2, r1
 800319e:	2300      	movs	r3, #0
 80031a0:	68f9      	ldr	r1, [r7, #12]
 80031a2:	3104      	adds	r1, #4
 80031a4:	4613      	mov	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40022000 	.word	0x40022000

080031b8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <FLASH_Program_Fast+0x68>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4a13      	ldr	r2, [pc, #76]	; (8003220 <FLASH_Program_Fast+0x68>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031da:	f3ef 8310 	mrs	r3, PRIMASK
 80031de:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80031e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80031e4:	b672      	cpsid	i
}
 80031e6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	3304      	adds	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3304      	adds	r3, #4
 80031fa:	617b      	str	r3, [r7, #20]
    row_index--;
 80031fc:	7ffb      	ldrb	r3, [r7, #31]
 80031fe:	3b01      	subs	r3, #1
 8003200:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003202:	7ffb      	ldrb	r3, [r7, #31]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ef      	bne.n	80031e8 <FLASH_Program_Fast+0x30>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003214:	bf00      	nop
 8003216:	3724      	adds	r7, #36	; 0x24
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40022000 	.word	0x40022000

08003224 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800322e:	4b48      	ldr	r3, [pc, #288]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_FLASHEx_Erase+0x16>
 8003236:	2302      	movs	r3, #2
 8003238:	e085      	b.n	8003346 <HAL_FLASHEx_Erase+0x122>
 800323a:	4b45      	ldr	r3, [pc, #276]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003240:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003244:	f7ff ff3a 	bl	80030bc <FLASH_WaitForLastOperation>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d175      	bne.n	800333e <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003264:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003270:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a37      	ldr	r2, [pc, #220]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 8003276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 800327e:	2203      	movs	r2, #3
 8003280:	771a      	strb	r2, [r3, #28]
 8003282:	e016      	b.n	80032b2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 8003286:	2201      	movs	r2, #1
 8003288:	771a      	strb	r2, [r3, #28]
 800328a:	e012      	b.n	80032b2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 800329e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 80032a6:	2202      	movs	r2, #2
 80032a8:	771a      	strb	r2, [r3, #28]
 80032aa:	e002      	b.n	80032b2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d111      	bne.n	80032de <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f88c 	bl	80033dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032c8:	f7ff fef8 	bl	80030bc <FLASH_WaitForLastOperation>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 80032d6:	f023 0304 	bic.w	r3, r3, #4
 80032da:	6153      	str	r3, [r2, #20]
 80032dc:	e02d      	b.n	800333a <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	e01d      	b.n	800332a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4619      	mov	r1, r3
 80032f4:	68b8      	ldr	r0, [r7, #8]
 80032f6:	f000 f88f 	bl	8003418 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032fe:	f7ff fedd 	bl	80030bc <FLASH_WaitForLastOperation>
 8003302:	4603      	mov	r3, r0
 8003304:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_FLASHEx_Erase+0x130>)
 800330c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
          break;
 8003322:	e00a      	b.n	800333a <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3301      	adds	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4413      	add	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3d9      	bcc.n	80032ee <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800333a:	f000 f891 	bl	8003460 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <HAL_FLASHEx_Erase+0x12c>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]

  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	2000000c 	.word	0x2000000c
 8003354:	40022000 	.word	0x40022000

08003358 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2206      	movs	r2, #6
 8003364:	601a      	str	r2, [r3, #0]
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_FLASHEx_OBGetConfig+0x1e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10f      	bne.n	8003396 <HAL_FLASHEx_OBGetConfig+0x3e>
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6858      	ldr	r0, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0108 	add.w	r1, r3, #8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	330c      	adds	r3, #12
 8003390:	461a      	mov	r2, r3
 8003392:	f000 f8af 	bl	80034f4 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8003396:	f000 f8d9 	bl	800354c <FLASH_OB_GetRDP>
 800339a:	4602      	mov	r2, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80033a0:	f000 f8ee 	bl	8003580 <FLASH_OB_GetUser>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	619a      	str	r2, [r3, #24]
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d110      	bne.n	80033d4 <HAL_FLASHEx_OBGetConfig+0x7c>
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f103 001c 	add.w	r0, r3, #28
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0120 	add.w	r1, r3, #32
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3324      	adds	r3, #36	; 0x24
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 f8ea 	bl	80035a8 <FLASH_OB_GetPCROP>
  }
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <FLASH_MassErase+0x38>)
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4a08      	ldr	r2, [pc, #32]	; (8003414 <FLASH_MassErase+0x38>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <FLASH_MassErase+0x38>)
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4a05      	ldr	r2, [pc, #20]	; (8003414 <FLASH_MassErase+0x38>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6153      	str	r3, [r2, #20]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000

08003418 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <FLASH_PageErase+0x44>)
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003432:	490a      	ldr	r1, [pc, #40]	; (800345c <FLASH_PageErase+0x44>)
 8003434:	4313      	orrs	r3, r2
 8003436:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <FLASH_PageErase+0x44>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <FLASH_PageErase+0x44>)
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <FLASH_PageErase+0x44>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <FLASH_PageErase+0x44>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	6153      	str	r3, [r2, #20]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40022000 	.word	0x40022000

08003460 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <FLASH_FlushCaches+0x8c>)
 8003468:	7f1b      	ldrb	r3, [r3, #28]
 800346a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d002      	beq.n	8003478 <FLASH_FlushCaches+0x18>
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d117      	bne.n	80034a8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <FLASH_FlushCaches+0x90>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <FLASH_FlushCaches+0x90>)
 800347e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <FLASH_FlushCaches+0x90>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <FLASH_FlushCaches+0x90>)
 800348a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <FLASH_FlushCaches+0x90>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <FLASH_FlushCaches+0x90>)
 8003496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800349a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <FLASH_FlushCaches+0x90>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d002      	beq.n	80034b4 <FLASH_FlushCaches+0x54>
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d111      	bne.n	80034d8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <FLASH_FlushCaches+0x90>)
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <FLASH_FlushCaches+0x8c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	771a      	strb	r2, [r3, #28]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	40022000 	.word	0x40022000

080034f4 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <FLASH_OB_GetWRP+0x54>)
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <FLASH_OB_GetWRP+0x54>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800351c:	e00d      	b.n	800353a <FLASH_OB_GetWRP+0x46>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10a      	bne.n	800353a <FLASH_OB_GetWRP+0x46>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <FLASH_OB_GetWRP+0x54>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <FLASH_OB_GetWRP+0x54>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2da      	uxtb	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000

0800354c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <FLASH_OB_GetRDP+0x30>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2baa      	cmp	r3, #170	; 0xaa
 800355e:	d004      	beq.n	800356a <FLASH_OB_GetRDP+0x1e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2bcc      	cmp	r3, #204	; 0xcc
 8003564:	d001      	beq.n	800356a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8003566:	23bb      	movs	r3, #187	; 0xbb
 8003568:	e002      	b.n	8003570 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <FLASH_OB_GetRDP+0x30>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	b2db      	uxtb	r3, r3
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40022000 	.word	0x40022000

08003580 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <FLASH_OB_GetUser+0x24>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003592:	607b      	str	r3, [r7, #4]

  return user_config;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000

080035a8 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
    bank2_addr = FLASH_BASE;
  }
#else
  bank1_addr = FLASH_BASE;
 80035b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035b8:	617b      	str	r3, [r7, #20]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <FLASH_OB_GetPCROP+0x48>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <FLASH_OB_GetPCROP+0x68>)
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	613b      	str	r3, [r7, #16]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	00da      	lsls	r2, r3, #3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	441a      	add	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <FLASH_OB_GetPCROP+0x68>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	b29b      	uxth	r3, r3
 80035e0:	613b      	str	r3, [r7, #16]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	00da      	lsls	r2, r3, #3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4413      	add	r3, r2
 80035ea:	1dda      	adds	r2, r3, #7
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <FLASH_OB_GetPCROP+0x68>)
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e154      	b.n	80038ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8146 	beq.w	80038c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d005      	beq.n	8003654 <HAL_GPIO_Init+0x40>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d130      	bne.n	80036b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800368a:	2201      	movs	r2, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0201 	and.w	r2, r3, #1
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d017      	beq.n	80036f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	2203      	movs	r2, #3
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d123      	bne.n	8003746 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	08da      	lsrs	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3208      	adds	r2, #8
 8003706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	220f      	movs	r2, #15
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	08da      	lsrs	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3208      	adds	r2, #8
 8003740:	6939      	ldr	r1, [r7, #16]
 8003742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	2203      	movs	r2, #3
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0203 	and.w	r2, r3, #3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a0 	beq.w	80038c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_GPIO_Init+0x2d8>)
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_GPIO_Init+0x2d8>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6613      	str	r3, [r2, #96]	; 0x60
 8003794:	4b55      	ldr	r3, [pc, #340]	; (80038ec <HAL_GPIO_Init+0x2d8>)
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037a0:	4a53      	ldr	r2, [pc, #332]	; (80038f0 <HAL_GPIO_Init+0x2dc>)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	3302      	adds	r3, #2
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	220f      	movs	r2, #15
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ca:	d019      	beq.n	8003800 <HAL_GPIO_Init+0x1ec>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a49      	ldr	r2, [pc, #292]	; (80038f4 <HAL_GPIO_Init+0x2e0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_GPIO_Init+0x1e8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a48      	ldr	r2, [pc, #288]	; (80038f8 <HAL_GPIO_Init+0x2e4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_GPIO_Init+0x1e4>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a47      	ldr	r2, [pc, #284]	; (80038fc <HAL_GPIO_Init+0x2e8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x1e0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a46      	ldr	r2, [pc, #280]	; (8003900 <HAL_GPIO_Init+0x2ec>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_GPIO_Init+0x1dc>
 80037ec:	2304      	movs	r3, #4
 80037ee:	e008      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037f0:	2307      	movs	r3, #7
 80037f2:	e006      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037f4:	2303      	movs	r3, #3
 80037f6:	e004      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e002      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_GPIO_Init+0x1ee>
 8003800:	2300      	movs	r3, #0
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	f002 0203 	and.w	r2, r2, #3
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	4093      	lsls	r3, r2
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003812:	4937      	ldr	r1, [pc, #220]	; (80038f0 <HAL_GPIO_Init+0x2dc>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003820:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003844:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800386e:	4a25      	ldr	r2, [pc, #148]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800389e:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3301      	adds	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f aea3 	bne.w	8003624 <HAL_GPIO_Init+0x10>
  }
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40010000 	.word	0x40010000
 80038f4:	48000400 	.word	0x48000400
 80038f8:	48000800 	.word	0x48000800
 80038fc:	48000c00 	.word	0x48000c00
 8003900:	48001000 	.word	0x48001000
 8003904:	40010400 	.word	0x40010400

08003908 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003916:	e0b7      	b.n	8003a88 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003918:	2201      	movs	r2, #1
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80aa 	beq.w	8003a82 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800392e:	4a5d      	ldr	r2, [pc, #372]	; (8003aa4 <HAL_GPIO_DeInit+0x19c>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003956:	d019      	beq.n	800398c <HAL_GPIO_DeInit+0x84>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a53      	ldr	r2, [pc, #332]	; (8003aa8 <HAL_GPIO_DeInit+0x1a0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_GPIO_DeInit+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a52      	ldr	r2, [pc, #328]	; (8003aac <HAL_GPIO_DeInit+0x1a4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00d      	beq.n	8003984 <HAL_GPIO_DeInit+0x7c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a51      	ldr	r2, [pc, #324]	; (8003ab0 <HAL_GPIO_DeInit+0x1a8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <HAL_GPIO_DeInit+0x78>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a50      	ldr	r2, [pc, #320]	; (8003ab4 <HAL_GPIO_DeInit+0x1ac>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_GPIO_DeInit+0x74>
 8003978:	2304      	movs	r3, #4
 800397a:	e008      	b.n	800398e <HAL_GPIO_DeInit+0x86>
 800397c:	2307      	movs	r3, #7
 800397e:	e006      	b.n	800398e <HAL_GPIO_DeInit+0x86>
 8003980:	2303      	movs	r3, #3
 8003982:	e004      	b.n	800398e <HAL_GPIO_DeInit+0x86>
 8003984:	2302      	movs	r3, #2
 8003986:	e002      	b.n	800398e <HAL_GPIO_DeInit+0x86>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_GPIO_DeInit+0x86>
 800398c:	2300      	movs	r3, #0
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	f002 0203 	and.w	r2, r2, #3
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	4093      	lsls	r3, r2
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	429a      	cmp	r2, r3
 800399c:	d132      	bne.n	8003a04 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800399e:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	4944      	ldr	r1, [pc, #272]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	4940      	ldr	r1, [pc, #256]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80039ba:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	493d      	ldr	r1, [pc, #244]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80039c8:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	4939      	ldr	r1, [pc, #228]	; (8003ab8 <HAL_GPIO_DeInit+0x1b0>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039e6:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <HAL_GPIO_DeInit+0x19c>)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3302      	adds	r3, #2
 80039ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	482b      	ldr	r0, [pc, #172]	; (8003aa4 <HAL_GPIO_DeInit+0x19c>)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	400a      	ands	r2, r1
 80039fe:	3302      	adds	r3, #2
 8003a00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	2103      	movs	r1, #3
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3208      	adds	r2, #8
 8003a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	08d2      	lsrs	r2, r2, #3
 8003a38:	4019      	ands	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2103      	movs	r1, #3
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3301      	adds	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f af41 	bne.w	8003918 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	48000400 	.word	0x48000400
 8003aac:	48000800 	.word	0x48000800
 8003ab0:	48000c00 	.word	0x48000c00
 8003ab4:	48001000 	.word	0x48001000
 8003ab8:	40010400 	.word	0x40010400

08003abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e001      	b.n	8003ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
 8003af8:	4613      	mov	r3, r2
 8003afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003afc:	787b      	ldrb	r3, [r7, #1]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b08:	e002      	b.n	8003b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	041a      	lsls	r2, r3, #16
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43d9      	mvns	r1, r3
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	400b      	ands	r3, r1
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b52:	b08b      	sub	sp, #44	; 0x2c
 8003b54:	af06      	add	r7, sp, #24
 8003b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e109      	b.n	8003d76 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f009 fc4c 	bl	800d414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f005 f851 	bl	8008c30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	687e      	ldr	r6, [r7, #4]
 8003b96:	466d      	mov	r5, sp
 8003b98:	f106 0410 	add.w	r4, r6, #16
 8003b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ba4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba8:	1d33      	adds	r3, r6, #4
 8003baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	f005 f817 	bl	8008be0 <USB_CoreInit>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0d8      	b.n	8003d76 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 f84b 	bl	8008c66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e04d      	b.n	8003c72 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	440b      	add	r3, r1
 8003be6:	3305      	adds	r3, #5
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	b298      	uxth	r0, r3
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	440b      	add	r3, r1
 8003c14:	333a      	adds	r3, #58	; 0x3a
 8003c16:	4602      	mov	r2, r0
 8003c18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	3307      	adds	r3, #7
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	333c      	adds	r3, #60	; 0x3c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	3340      	adds	r3, #64	; 0x40
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	3344      	adds	r3, #68	; 0x44
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d3ac      	bcc.n	8003bd6 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e044      	b.n	8003d0c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003caa:	7bfa      	ldrb	r2, [r7, #15]
 8003cac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3b5      	bcc.n	8003c82 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	687e      	ldr	r6, [r7, #4]
 8003d1e:	466d      	mov	r5, sp
 8003d20:	f106 0410 	add.w	r4, r6, #16
 8003d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d30:	1d33      	adds	r3, r6, #4
 8003d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	f004 ffa3 	bl	8008c80 <USB_DevInit>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e014      	b.n	8003d76 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 fc8f 	bl	8005688 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f007 f9a0 	bl	800b0b4 <USB_DevDisconnect>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d7e <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e015      	b.n	8003dbc <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2203      	movs	r2, #3
 8003d94:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f007 f947 	bl	800b030 <USB_StopDevice>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e007      	b.n	8003dbc <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f009 fb97 	bl	800d4e0 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_PCD_Start+0x16>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e012      	b.n	8003e00 <HAL_PCD_Start+0x3c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 ff0b 	bl	8008c02 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f007 f948 	bl	800b086 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_PCD_Stop+0x16>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e012      	b.n	8003e44 <HAL_PCD_Stop+0x3c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_DISABLE(hpcd);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f004 ff00 	bl	8008c30 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f007 f93d 	bl	800b0b4 <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f007 f940 	bl	800b0de <USB_ReadInterrupts>
 8003e5e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fb3e 	bl	80044ec <PCD_EP_ISR_Handler>

    return;
 8003e70:	e110      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f009 fb98 	bl	800d5ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8fc 	bl	800409a <HAL_PCD_SetAddress>

    return;
 8003ea2:	e0f7      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003ec6:	e0e5      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003eea:	e0d3      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d034      	beq.n	8003f60 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0204 	bic.w	r2, r2, #4
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0208 	bic.w	r2, r2, #8
 8003f20:	b292      	uxth	r2, r2
 8003f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f001 fbce 	bl	80056dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f009 fb7b 	bl	800d63c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f58:	b292      	uxth	r2, r2
 8003f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f5e:	e099      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d027      	beq.n	8003fba <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0208 	orr.w	r2, r2, #8
 8003f7c:	b292      	uxth	r2, r2
 8003f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f94:	b292      	uxth	r2, r2
 8003f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0204 	orr.w	r2, r2, #4
 8003fac:	b292      	uxth	r2, r2
 8003fae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f009 fb28 	bl	800d608 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003fb8:	e06c      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d040      	beq.n	8004046 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd6:	b292      	uxth	r2, r2
 8003fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d12b      	bne.n	800403e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0204 	orr.w	r2, r2, #4
 8003ff8:	b292      	uxth	r2, r2
 8003ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	b292      	uxth	r2, r2
 8004012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004026:	b29b      	uxth	r3, r3
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004034:	2101      	movs	r1, #1
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 fb50 	bl	80056dc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800403c:	e02a      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f009 fae2 	bl	800d608 <HAL_PCD_SuspendCallback>
    return;
 8004044:	e026      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00f      	beq.n	8004070 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004062:	b292      	uxth	r2, r2
 8004064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f009 faa0 	bl	800d5ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800406e:	e011      	b.n	8004094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800408c:	b292      	uxth	r2, r2
 800408e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004092:	bf00      	nop
  }
}
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_PCD_SetAddress+0x1a>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e013      	b.n	80040dc <HAL_PCD_SetAddress+0x42>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 ffc6 	bl	800b05e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	70fb      	strb	r3, [r7, #3]
 80040f6:	460b      	mov	r3, r1
 80040f8:	803b      	strh	r3, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	da0f      	bge.n	800412a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	3304      	adds	r3, #4
 8004120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	705a      	strb	r2, [r3, #1]
 8004128:	e00f      	b.n	800414a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 0207 	and.w	r2, r3, #7
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	3304      	adds	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004156:	883a      	ldrh	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	78ba      	ldrb	r2, [r7, #2]
 8004160:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004174:	78bb      	ldrb	r3, [r7, #2]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d102      	bne.n	8004180 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_PCD_EP_Open+0xaa>
 800418a:	2302      	movs	r3, #2
 800418c:	e00e      	b.n	80041ac <HAL_PCD_EP_Open+0xc8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	4618      	mov	r0, r3
 800419e:	f004 fd91 	bl	8008cc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80041aa:	7afb      	ldrb	r3, [r7, #11]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	da0f      	bge.n	80041e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	705a      	strb	r2, [r3, #1]
 80041e6:	e00f      	b.n	8004208 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 0207 	and.w	r2, r3, #7
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_PCD_EP_Close+0x6e>
 800421e:	2302      	movs	r3, #2
 8004220:	e00e      	b.n	8004240 <HAL_PCD_EP_Close+0x8c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	4618      	mov	r0, r3
 8004232:	f005 f8db 	bl	80093ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	460b      	mov	r3, r1
 8004256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	f003 0207 	and.w	r2, r3, #7
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f005 fa8d 	bl	80097c6 <USB_EPStartXfer>
 80042ac:	e005      	b.n	80042ba <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f005 fa86 	bl	80097c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 0207 	and.w	r2, r3, #7
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	440b      	add	r3, r1
 80042e2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	460b      	mov	r3, r1
 8004302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004304:	7afb      	ldrb	r3, [r7, #11]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	3304      	adds	r3, #4
 800431a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2201      	movs	r2, #1
 8004340:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	b2da      	uxtb	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	4618      	mov	r0, r3
 8004360:	f005 fa31 	bl	80097c6 <USB_EPStartXfer>
 8004364:	e005      	b.n	8004372 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6979      	ldr	r1, [r7, #20]
 800436c:	4618      	mov	r0, r3
 800436e:	f005 fa2a 	bl	80097c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 0207 	and.w	r2, r3, #7
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d901      	bls.n	800439a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e04e      	b.n	8004438 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0f      	bge.n	80043c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	705a      	strb	r2, [r3, #1]
 80043c0:	e00d      	b.n	80043de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_PCD_EP_SetStall+0x82>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e01c      	b.n	8004438 <HAL_PCD_EP_SetStall+0xbc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	4618      	mov	r0, r3
 800440e:	f006 fd10 	bl	800ae32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f006 fe68 	bl	800b0fe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d901      	bls.n	800445e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e042      	b.n	80044e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800445e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004462:	2b00      	cmp	r3, #0
 8004464:	da0f      	bge.n	8004486 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	3304      	adds	r3, #4
 800447c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	705a      	strb	r2, [r3, #1]
 8004484:	e00f      	b.n	80044a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 0207 	and.w	r2, r3, #7
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_PCD_EP_ClrStall+0x86>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e00e      	b.n	80044e4 <HAL_PCD_EP_ClrStall+0xa4>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f006 fcfd 	bl	800aed4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b096      	sub	sp, #88	; 0x58
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044f4:	e39e      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
  {
    wIstr = hpcd->Instance->ISTR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004502:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004510:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 815e 	bne.w	80047d6 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800451a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	d150      	bne.n	80045c8 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	81fb      	strh	r3, [r7, #14]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	89fb      	ldrh	r3, [r7, #14]
 800453e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	332c      	adds	r3, #44	; 0x2c
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004558:	b29b      	uxth	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4413      	add	r3, r2
 800456a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	441a      	add	r2, r3
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004586:	2100      	movs	r1, #0
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f008 fff6 	bl	800d57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 834c 	beq.w	8004c34 <PCD_EP_ISR_Handler+0x748>
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 8347 	bne.w	8004c34 <PCD_EP_ISR_Handler+0x748>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b292      	uxth	r2, r2
 80045ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80045c6:	e335      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80045ce:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80045da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d032      	beq.n	800464c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	4413      	add	r3, r2
 8004600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800460a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800461c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004620:	b29b      	uxth	r3, r3
 8004622:	f006 fdba 	bl	800b19a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29a      	uxth	r2, r3
 800462e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004632:	4013      	ands	r3, r2
 8004634:	823b      	strh	r3, [r7, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	8a3a      	ldrh	r2, [r7, #16]
 800463c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004640:	b292      	uxth	r2, r2
 8004642:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f008 ff6b 	bl	800d520 <HAL_PCD_SetupStageCallback>
 800464a:	e2f3      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800464c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004650:	2b00      	cmp	r3, #0
 8004652:	f280 82ef 	bge.w	8004c34 <PCD_EP_ISR_Handler+0x748>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004662:	4013      	ands	r3, r2
 8004664:	83fb      	strh	r3, [r7, #30]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	8bfa      	ldrh	r2, [r7, #30]
 800466c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004670:	b292      	uxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	4413      	add	r3, r2
 800468e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d019      	beq.n	80046d8 <PCD_EP_ISR_Handler+0x1ec>
 80046a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80046b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f006 fd6c 	bl	800b19a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	441a      	add	r2, r3
 80046cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80046d0:	2100      	movs	r1, #0
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f008 ff36 	bl	800d544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 82a5 	bne.w	8004c34 <PCD_EP_ISR_Handler+0x748>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b3e      	cmp	r3, #62	; 0x3e
 8004710:	d918      	bls.n	8004744 <PCD_EP_ISR_Handler+0x258>
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <PCD_EP_ISR_Handler+0x240>
 8004726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004728:	3b01      	subs	r3, #1
 800472a:	647b      	str	r3, [r7, #68]	; 0x44
 800472c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472e:	b29b      	uxth	r3, r3
 8004730:	029b      	lsls	r3, r3, #10
 8004732:	b29b      	uxth	r3, r3
 8004734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473c:	b29a      	uxth	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	e029      	b.n	8004798 <PCD_EP_ISR_Handler+0x2ac>
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d112      	bne.n	8004772 <PCD_EP_ISR_Handler+0x286>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004756:	b29a      	uxth	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476a:	b29a      	uxth	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	801a      	strh	r2, [r3, #0]
 8004770:	e012      	b.n	8004798 <PCD_EP_ISR_Handler+0x2ac>
 8004772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <PCD_EP_ISR_Handler+0x2a0>
 8004786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004788:	3301      	adds	r3, #1
 800478a:	647b      	str	r3, [r7, #68]	; 0x44
 800478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478e:	b29b      	uxth	r3, r3
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	b29a      	uxth	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	827b      	strh	r3, [r7, #18]
 80047aa:	8a7b      	ldrh	r3, [r7, #18]
 80047ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047b0:	827b      	strh	r3, [r7, #18]
 80047b2:	8a7b      	ldrh	r3, [r7, #18]
 80047b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047b8:	827b      	strh	r3, [r7, #18]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	8a7b      	ldrh	r3, [r7, #18]
 80047c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	8013      	strh	r3, [r2, #0]
 80047d4:	e22e      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047ea:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f280 80f7 	bge.w	80049e2 <PCD_EP_ISR_Handler+0x4f6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29a      	uxth	r2, r3
 8004806:	f640 738f 	movw	r3, #3983	; 0xf8f
 800480a:	4013      	ands	r3, r2
 800480c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004826:	b292      	uxth	r2, r2
 8004828:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800482a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004844:	7b1b      	ldrb	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d123      	bne.n	8004892 <PCD_EP_ISR_Handler+0x3a6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004852:	b29b      	uxth	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	4413      	add	r3, r2
 8004864:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800486e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004872:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 808e 	beq.w	8004998 <PCD_EP_ISR_Handler+0x4ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	6959      	ldr	r1, [r3, #20]
 8004884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004886:	88da      	ldrh	r2, [r3, #6]
 8004888:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800488c:	f006 fc85 	bl	800b19a <USB_ReadPMA>
 8004890:	e082      	b.n	8004998 <PCD_EP_ISR_Handler+0x4ac>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004894:	78db      	ldrb	r3, [r3, #3]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d10a      	bne.n	80048b0 <PCD_EP_ISR_Handler+0x3c4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800489a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800489e:	461a      	mov	r2, r3
 80048a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9d4 	bl	8004c50 <HAL_PCD_EP_DB_Receive>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048ae:	e073      	b.n	8004998 <PCD_EP_ISR_Handler+0x4ac>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d022      	beq.n	8004954 <PCD_EP_ISR_Handler+0x468>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004916:	b29b      	uxth	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	4413      	add	r3, r2
 8004928:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004932:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004936:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d02c      	beq.n	8004998 <PCD_EP_ISR_Handler+0x4ac>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	6959      	ldr	r1, [r3, #20]
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	891a      	ldrh	r2, [r3, #8]
 800494a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800494e:	f006 fc24 	bl	800b19a <USB_ReadPMA>
 8004952:	e021      	b.n	8004998 <PCD_EP_ISR_Handler+0x4ac>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4413      	add	r3, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	4413      	add	r3, r2
 800496e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004978:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800497c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <PCD_EP_ISR_Handler+0x4ac>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	6959      	ldr	r1, [r3, #20]
 800498c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498e:	895a      	ldrh	r2, [r3, #10]
 8004990:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004994:	f006 fc01 	bl	800b19a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049a0:	441a      	add	r2, r3
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80049a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049ae:	441a      	add	r2, r3
 80049b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <PCD_EP_ISR_Handler+0x4dc>
 80049bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80049c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d206      	bcs.n	80049d6 <PCD_EP_ISR_Handler+0x4ea>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80049c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f008 fdb8 	bl	800d544 <HAL_PCD_DataOutStageCallback>
 80049d4:	e005      	b.n	80049e2 <PCD_EP_ISR_Handler+0x4f6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80049dc:	4618      	mov	r0, r3
 80049de:	f004 fef2 	bl	80097c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8122 	beq.w	8004c34 <PCD_EP_ISR_Handler+0x748>
      {
        ep = &hpcd->IN_ep[epindex];
 80049f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3304      	adds	r3, #4
 8004a04:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a44:	78db      	ldrb	r3, [r3, #3]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	f000 80a2 	beq.w	8004b90 <PCD_EP_ISR_Handler+0x6a4>
        {
          ep->xfer_len = 0U;
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	2200      	movs	r2, #0
 8004a50:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	7b1b      	ldrb	r3, [r3, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8093 	beq.w	8004b82 <PCD_EP_ISR_Handler+0x696>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d046      	beq.n	8004af6 <PCD_EP_ISR_Handler+0x60a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d126      	bne.n	8004abe <PCD_EP_ISR_Handler+0x5d2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	4413      	add	r3, r2
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	00da      	lsls	r2, r3, #3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	e061      	b.n	8004b82 <PCD_EP_ISR_Handler+0x696>
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d15d      	bne.n	8004b82 <PCD_EP_ISR_Handler+0x696>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	4413      	add	r3, r2
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	00da      	lsls	r2, r3, #3
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2200      	movs	r2, #0
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e045      	b.n	8004b82 <PCD_EP_ISR_Handler+0x696>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d126      	bne.n	8004b52 <PCD_EP_ISR_Handler+0x666>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	4413      	add	r3, r2
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	00da      	lsls	r2, r3, #3
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b24:	4413      	add	r3, r2
 8004b26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	e017      	b.n	8004b82 <PCD_EP_ISR_Handler+0x696>
 8004b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d113      	bne.n	8004b82 <PCD_EP_ISR_Handler+0x696>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b68:	4413      	add	r3, r2
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00da      	lsls	r2, r3, #3
 8004b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	2200      	movs	r2, #0
 8004b80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f008 fcf6 	bl	800d57a <HAL_PCD_DataInStageCallback>
 8004b8e:	e051      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004b90:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d144      	bne.n	8004c26 <PCD_EP_ISR_Handler+0x73a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d907      	bls.n	8004be0 <PCD_EP_ISR_Handler+0x6f4>
            {
              ep->xfer_len -= TxPctSize;
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	619a      	str	r2, [r3, #24]
 8004bde:	e002      	b.n	8004be6 <PCD_EP_ISR_Handler+0x6fa>
            }
            else
            {
              ep->xfer_len = 0U;
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <PCD_EP_ISR_Handler+0x710>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f008 fcc0 	bl	800d57a <HAL_PCD_DataInStageCallback>
 8004bfa:	e01b      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c04:	441a      	add	r2, r3
 8004c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c08:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c12:	441a      	add	r2, r3
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f004 fdd1 	bl	80097c6 <USB_EPStartXfer>
 8004c24:	e006      	b.n	8004c34 <PCD_EP_ISR_Handler+0x748>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f917 	bl	8004e62 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b21b      	sxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f6ff ac58 	blt.w	80044f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3758      	adds	r7, #88	; 0x58
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d07c      	beq.n	8004d62 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	8b7b      	ldrh	r3, [r7, #26]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d306      	bcc.n	8004ca6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	619a      	str	r2, [r3, #24]
 8004ca4:	e002      	b.n	8004cac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d123      	bne.n	8004cfc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	833b      	strh	r3, [r7, #24]
 8004cd0:	8b3b      	ldrh	r3, [r7, #24]
 8004cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cd6:	833b      	strh	r3, [r7, #24]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	8b3b      	ldrh	r3, [r7, #24]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01f      	beq.n	8004d46 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	82fb      	strh	r3, [r7, #22]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	8afb      	ldrh	r3, [r7, #22]
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d46:	8b7b      	ldrh	r3, [r7, #26]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8085 	beq.w	8004e58 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6959      	ldr	r1, [r3, #20]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	891a      	ldrh	r2, [r3, #8]
 8004d5a:	8b7b      	ldrh	r3, [r7, #26]
 8004d5c:	f006 fa1d 	bl	800b19a <USB_ReadPMA>
 8004d60:	e07a      	b.n	8004e58 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	8b7b      	ldrh	r3, [r7, #26]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d306      	bcc.n	8004da0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	8b7b      	ldrh	r3, [r7, #26]
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	619a      	str	r2, [r3, #24]
 8004d9e:	e002      	b.n	8004da6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d123      	bne.n	8004df6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc8:	83fb      	strh	r3, [r7, #30]
 8004dca:	8bfb      	ldrh	r3, [r7, #30]
 8004dcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dd0:	83fb      	strh	r3, [r7, #30]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	441a      	add	r2, r3
 8004de0:	8bfb      	ldrh	r3, [r7, #30]
 8004de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11f      	bne.n	8004e40 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	83bb      	strh	r3, [r7, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	8bbb      	ldrh	r3, [r7, #28]
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e40:	8b7b      	ldrh	r3, [r7, #26]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6959      	ldr	r1, [r3, #20]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	895a      	ldrh	r2, [r3, #10]
 8004e52:	8b7b      	ldrh	r3, [r7, #26]
 8004e54:	f006 f9a1 	bl	800b19a <USB_ReadPMA>
    }
  }

  return count;
 8004e58:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b0a2      	sub	sp, #136	; 0x88
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 81c5 	beq.w	8005206 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4413      	add	r3, r2
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	4413      	add	r3, r2
 8004e96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d907      	bls.n	8004ec0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004eb8:	1ad2      	subs	r2, r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	e002      	b.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 80b9 	bne.w	8005042 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d126      	bne.n	8004f26 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	4413      	add	r3, r2
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	00da      	lsls	r2, r3, #3
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	4413      	add	r3, r2
 8004efa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e01a      	b.n	8004f5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d116      	bne.n	8004f5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	4413      	add	r3, r2
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	00da      	lsls	r2, r3, #3
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	4413      	add	r3, r2
 8004f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2200      	movs	r2, #0
 8004f5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d126      	bne.n	8004fb8 <HAL_PCD_EP_DB_Transmit+0x156>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	4413      	add	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	00da      	lsls	r2, r3, #3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	e017      	b.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x186>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d113      	bne.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x186>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	4413      	add	r3, r2
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f008 fac3 	bl	800d57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 82d2 	beq.w	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	827b      	strh	r3, [r7, #18]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	8a7b      	ldrh	r3, [r7, #18]
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]
 8005040:	e2b0      	b.n	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d021      	beq.n	8005090 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005096:	2b01      	cmp	r3, #1
 8005098:	f040 8284 	bne.w	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050a4:	441a      	add	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050b2:	441a      	add	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d309      	bcc.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d0:	1ad2      	subs	r2, r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	621a      	str	r2, [r3, #32]
 80050d6:	e015      	b.n	8005104 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80050e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050ee:	e009      	b.n	8005104 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d155      	bne.n	80051b8 <HAL_PCD_EP_DB_Transmit+0x356>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	4413      	add	r3, r2
 8005122:	63bb      	str	r3, [r7, #56]	; 0x38
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	00da      	lsls	r2, r3, #3
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	4413      	add	r3, r2
 800512e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
 8005134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005136:	2b3e      	cmp	r3, #62	; 0x3e
 8005138:	d916      	bls.n	8005168 <HAL_PCD_EP_DB_Transmit+0x306>
 800513a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	3b01      	subs	r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29b      	uxth	r3, r3
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29a      	uxth	r2, r3
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e043      	b.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <HAL_PCD_EP_DB_Transmit+0x332>
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005178:	b29a      	uxth	r2, r3
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518c:	b29a      	uxth	r2, r3
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	e02d      	b.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_PCD_EP_DB_Transmit+0x348>
 80051a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a6:	3301      	adds	r3, #1
 80051a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80051aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	029b      	lsls	r3, r3, #10
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e01b      	b.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d117      	bne.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d4:	4413      	add	r3, r2
 80051d6:	643b      	str	r3, [r7, #64]	; 0x40
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	00da      	lsls	r2, r3, #3
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6959      	ldr	r1, [r3, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	891a      	ldrh	r2, [r3, #8]
 80051fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f005 ff89 	bl	800b116 <USB_WritePMA>
 8005204:	e1ce      	b.n	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520e:	b29b      	uxth	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	4413      	add	r3, r2
 8005220:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800522a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005236:	429a      	cmp	r2, r3
 8005238:	d307      	bcc.n	800524a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	619a      	str	r2, [r3, #24]
 8005248:	e002      	b.n	8005250 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 80c4 	bne.w	80053e2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d126      	bne.n	80052b0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	66bb      	str	r3, [r7, #104]	; 0x68
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005276:	4413      	add	r3, r2
 8005278:	66bb      	str	r3, [r7, #104]	; 0x68
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	00da      	lsls	r2, r3, #3
 8005280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005282:	4413      	add	r3, r2
 8005284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005288:	667b      	str	r3, [r7, #100]	; 0x64
 800528a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005294:	b29a      	uxth	r2, r3
 8005296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e01a      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d116      	bne.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	673b      	str	r3, [r7, #112]	; 0x70
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052cc:	4413      	add	r3, r2
 80052ce:	673b      	str	r3, [r7, #112]	; 0x70
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	00da      	lsls	r2, r3, #3
 80052d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d8:	4413      	add	r3, r2
 80052da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	2200      	movs	r2, #0
 80052e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d12f      	bne.n	8005354 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800530c:	4413      	add	r3, r2
 800530e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	00da      	lsls	r2, r3, #3
 8005318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800531c:	4413      	add	r3, r2
 800531e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005326:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005332:	b29a      	uxth	r2, r3
 8005334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534a:	b29a      	uxth	r2, r3
 800534c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	e017      	b.n	8005384 <HAL_PCD_EP_DB_Transmit+0x522>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d113      	bne.n	8005384 <HAL_PCD_EP_DB_Transmit+0x522>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800536a:	4413      	add	r3, r2
 800536c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	00da      	lsls	r2, r3, #3
 8005374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005376:	4413      	add	r3, r2
 8005378:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800537c:	67bb      	str	r3, [r7, #120]	; 0x78
 800537e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005380:	2200      	movs	r2, #0
 8005382:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	4619      	mov	r1, r3
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f008 f8f5 	bl	800d57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 8104 	bne.w	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
 80053e0:	e0e0      	b.n	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d121      	bne.n	8005430 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800541c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	b29b      	uxth	r3, r3
 800542e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005436:	2b01      	cmp	r3, #1
 8005438:	f040 80b4 	bne.w	80055a4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005444:	441a      	add	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005452:	441a      	add	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d309      	bcc.n	8005478 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	621a      	str	r2, [r3, #32]
 8005476:	e015      	b.n	80054a4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005484:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800548e:	e009      	b.n	80054a4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	663b      	str	r3, [r7, #96]	; 0x60
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d155      	bne.n	800555e <HAL_PCD_EP_DB_Transmit+0x6fc>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c6:	4413      	add	r3, r2
 80054c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	00da      	lsls	r2, r3, #3
 80054d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054d2:	4413      	add	r3, r2
 80054d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054d8:	657b      	str	r3, [r7, #84]	; 0x54
 80054da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054dc:	2b3e      	cmp	r3, #62	; 0x3e
 80054de:	d916      	bls.n	800550e <HAL_PCD_EP_DB_Transmit+0x6ac>
 80054e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	677b      	str	r3, [r7, #116]	; 0x74
 80054e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_PCD_EP_DB_Transmit+0x694>
 80054f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f2:	3b01      	subs	r3, #1
 80054f4:	677b      	str	r3, [r7, #116]	; 0x74
 80054f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005506:	b29a      	uxth	r2, r3
 8005508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	e040      	b.n	8005590 <HAL_PCD_EP_DB_Transmit+0x72e>
 800550e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005510:	2b00      	cmp	r3, #0
 8005512:	d112      	bne.n	800553a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800551e:	b29a      	uxth	r2, r3
 8005520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e02a      	b.n	8005590 <HAL_PCD_EP_DB_Transmit+0x72e>
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	677b      	str	r3, [r7, #116]	; 0x74
 8005540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800554a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800554c:	3301      	adds	r3, #1
 800554e:	677b      	str	r3, [r7, #116]	; 0x74
 8005550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005552:	b29b      	uxth	r3, r3
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	b29a      	uxth	r2, r3
 8005558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e018      	b.n	8005590 <HAL_PCD_EP_DB_Transmit+0x72e>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d114      	bne.n	8005590 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005574:	4413      	add	r3, r2
 8005576:	663b      	str	r3, [r7, #96]	; 0x60
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	00da      	lsls	r2, r3, #3
 800557e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005580:	4413      	add	r3, r2
 8005582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558a:	b29a      	uxth	r2, r3
 800558c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6959      	ldr	r1, [r3, #20]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	895a      	ldrh	r2, [r3, #10]
 800559c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f005 fdb9 	bl	800b116 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	823b      	strh	r3, [r7, #16]
 80055c0:	8a3b      	ldrh	r3, [r7, #16]
 80055c2:	f083 0310 	eor.w	r3, r3, #16
 80055c6:	823b      	strh	r3, [r7, #16]
 80055c8:	8a3b      	ldrh	r3, [r7, #16]
 80055ca:	f083 0320 	eor.w	r3, r3, #32
 80055ce:	823b      	strh	r3, [r7, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	8a3b      	ldrh	r3, [r7, #16]
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3788      	adds	r7, #136	; 0x88
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	817b      	strh	r3, [r7, #10]
 800560c:	4613      	mov	r3, r2
 800560e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005610:	897b      	ldrh	r3, [r7, #10]
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00c      	beq.n	8005636 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800561c:	897b      	ldrh	r3, [r7, #10]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	3304      	adds	r3, #4
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e00a      	b.n	800564c <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005636:	897a      	ldrh	r2, [r7, #10]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	3304      	adds	r3, #4
 800564a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800564c:	893b      	ldrh	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d107      	bne.n	8005662 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2200      	movs	r2, #0
 8005656:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	b29a      	uxth	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	80da      	strh	r2, [r3, #6]
 8005660:	e00b      	b.n	800567a <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2201      	movs	r2, #1
 8005666:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	b29a      	uxth	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0c1b      	lsrs	r3, r3, #16
 8005674:	b29a      	uxth	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f043 0302 	orr.w	r3, r3, #2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <HAL_PWREx_GetVoltageRange+0x18>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40007000 	.word	0x40007000

08005710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571e:	d130      	bne.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005720:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d038      	beq.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005736:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800573c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800573e:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2232      	movs	r2, #50	; 0x32
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0c9b      	lsrs	r3, r3, #18
 8005750:	3301      	adds	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005754:	e002      	b.n	800575c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3b01      	subs	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005768:	d102      	bne.n	8005770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f2      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577c:	d110      	bne.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e00f      	b.n	80057a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800578a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578e:	d007      	beq.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005798:	4a05      	ldr	r2, [pc, #20]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800579a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800579e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40007000 	.word	0x40007000
 80057b4:	20000000 	.word	0x20000000
 80057b8:	431bde83 	.word	0x431bde83

080057bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80057c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ca:	6053      	str	r3, [r2, #4]
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40007000 	.word	0x40007000

080057dc <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80057e2:	4b45      	ldr	r3, [pc, #276]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a44      	ldr	r2, [pc, #272]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80057ee:	f7fc fcb1 	bl	8002154 <HAL_GetTick>
 80057f2:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057f6:	f7fc fcad 	bl	8002154 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e073      	b.n	80058f0 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8005814:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581c:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 800581e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_DeInit+0x120>)
 800582c:	4a34      	ldr	r2, [pc, #208]	; (8005900 <HAL_RCC_DeInit+0x124>)
 800582e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005830:	4b34      	ldr	r3, [pc, #208]	; (8005904 <HAL_RCC_DeInit+0x128>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fc fc3d 	bl	80020b4 <HAL_InitTick>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e055      	b.n	80058f0 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8005844:	f7fc fc86 	bl	8002154 <HAL_GetTick>
 8005848:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fc fc82 	bl	8002154 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e046      	b.n	80058f0 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8005862:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ee      	bne.n	800584c <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 800586e:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4921      	ldr	r1, [pc, #132]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 8005874:	4b24      	ldr	r3, [pc, #144]	; (8005908 <HAL_RCC_DeInit+0x12c>)
 8005876:	4013      	ands	r3, r2
 8005878:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800587a:	f7fc fc6b 	bl	8002154 <HAL_GetTick>
 800587e:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005880:	e008      	b.n	8005894 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005882:	f7fc fc67 	bl	8002154 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e02d      	b.n	80058f0 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f0      	bne.n	8005882 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 80058a0:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058b0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058c2:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a0b      	ldr	r2, [pc, #44]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <HAL_RCC_DeInit+0x11c>)
 80058e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	20000000 	.word	0x20000000
 8005900:	003d0900 	.word	0x003d0900
 8005904:	20000004 	.word	0x20000004
 8005908:	fafef4ff 	.word	0xfafef4ff

0800590c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f000 bc10 	b.w	8006140 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005920:	4b96      	ldr	r3, [pc, #600]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800592a:	4b94      	ldr	r3, [pc, #592]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80e4 	beq.w	8005b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <HAL_RCC_OscConfig+0x4c>
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b0c      	cmp	r3, #12
 800594c:	f040 808b 	bne.w	8005a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b01      	cmp	r3, #1
 8005954:	f040 8087 	bne.w	8005a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005958:	4b88      	ldr	r3, [pc, #544]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_OscConfig+0x64>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e3e7      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	4b81      	ldr	r3, [pc, #516]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <HAL_RCC_OscConfig+0x7e>
 8005980:	4b7e      	ldr	r3, [pc, #504]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	e005      	b.n	8005996 <HAL_RCC_OscConfig+0x8a>
 800598a:	4b7c      	ldr	r3, [pc, #496]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 800598c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005996:	4293      	cmp	r3, r2
 8005998:	d223      	bcs.n	80059e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd7a 	bl	8006498 <RCC_SetFlashLatencyFromMSIRange>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e3c8      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ae:	4b73      	ldr	r3, [pc, #460]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a72      	ldr	r2, [pc, #456]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b70      	ldr	r3, [pc, #448]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	496d      	ldr	r1, [pc, #436]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059cc:	4b6b      	ldr	r3, [pc, #428]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	4968      	ldr	r1, [pc, #416]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
 80059e0:	e025      	b.n	8005a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059e2:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059e8:	f043 0308 	orr.w	r3, r3, #8
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b63      	ldr	r3, [pc, #396]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4960      	ldr	r1, [pc, #384]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a00:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	495b      	ldr	r1, [pc, #364]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fd3a 	bl	8006498 <RCC_SetFlashLatencyFromMSIRange>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e388      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a2e:	f000 fc6f 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 8005a32:	4602      	mov	r2, r0
 8005a34:	4b51      	ldr	r3, [pc, #324]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4950      	ldr	r1, [pc, #320]	; (8005b80 <HAL_RCC_OscConfig+0x274>)
 8005a40:	5ccb      	ldrb	r3, [r1, r3]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a4e      	ldr	r2, [pc, #312]	; (8005b84 <HAL_RCC_OscConfig+0x278>)
 8005a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a4e:	4b4e      	ldr	r3, [pc, #312]	; (8005b88 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fc fb2e 	bl	80020b4 <HAL_InitTick>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d052      	beq.n	8005b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	e36c      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d032      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a6e:	4b43      	ldr	r3, [pc, #268]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a42      	ldr	r2, [pc, #264]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a7a:	f7fc fb6b 	bl	8002154 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a82:	f7fc fb67 	bl	8002154 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e355      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a94:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa0:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a35      	ldr	r2, [pc, #212]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aa6:	f043 0308 	orr.w	r3, r3, #8
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	4930      	ldr	r1, [pc, #192]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005abe:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	492b      	ldr	r1, [pc, #172]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
 8005ad2:	e01a      	b.n	8005b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae0:	f7fc fb38 	bl	8002154 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ae8:	f7fc fb34 	bl	8002154 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e322      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x1dc>
 8005b06:	e000      	b.n	8005b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d073      	beq.n	8005bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d005      	beq.n	8005b28 <HAL_RCC_OscConfig+0x21c>
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d10e      	bne.n	8005b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d10b      	bne.n	8005b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d063      	beq.n	8005bfc <HAL_RCC_OscConfig+0x2f0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d15f      	bne.n	8005bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e2ff      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d106      	bne.n	8005b58 <HAL_RCC_OscConfig+0x24c>
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a0b      	ldr	r2, [pc, #44]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e025      	b.n	8005ba4 <HAL_RCC_OscConfig+0x298>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b60:	d114      	bne.n	8005b8c <HAL_RCC_OscConfig+0x280>
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a02      	ldr	r2, [pc, #8]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e013      	b.n	8005ba4 <HAL_RCC_OscConfig+0x298>
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	0800df38 	.word	0x0800df38
 8005b84:	20000000 	.word	0x20000000
 8005b88:	20000004 	.word	0x20000004
 8005b8c:	4ba0      	ldr	r3, [pc, #640]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a9f      	ldr	r2, [pc, #636]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	4b9d      	ldr	r3, [pc, #628]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a9c      	ldr	r2, [pc, #624]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d013      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fc fad2 	bl	8002154 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb4:	f7fc face 	bl	8002154 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e2bc      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bc6:	4b92      	ldr	r3, [pc, #584]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x2a8>
 8005bd2:	e014      	b.n	8005bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fc fabe 	bl	8002154 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7fc faba 	bl	8002154 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e2a8      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bee:	4b88      	ldr	r3, [pc, #544]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x2d0>
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d060      	beq.n	8005ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_OscConfig+0x310>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	d119      	bne.n	8005c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d116      	bne.n	8005c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c1c:	4b7c      	ldr	r3, [pc, #496]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_OscConfig+0x328>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e285      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	4b76      	ldr	r3, [pc, #472]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	4973      	ldr	r1, [pc, #460]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c48:	e040      	b.n	8005ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d023      	beq.n	8005c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c52:	4b6f      	ldr	r3, [pc, #444]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6e      	ldr	r2, [pc, #440]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5e:	f7fc fa79 	bl	8002154 <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c66:	f7fc fa75 	bl	8002154 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e263      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c78:	4b65      	ldr	r3, [pc, #404]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f0      	beq.n	8005c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c84:	4b62      	ldr	r3, [pc, #392]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	061b      	lsls	r3, r3, #24
 8005c92:	495f      	ldr	r1, [pc, #380]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	e018      	b.n	8005ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c9a:	4b5d      	ldr	r3, [pc, #372]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a5c      	ldr	r2, [pc, #368]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fc fa55 	bl	8002154 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cae:	f7fc fa51 	bl	8002154 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e23f      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cc0:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d03c      	beq.n	8005d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01c      	beq.n	8005d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ce0:	4b4b      	ldr	r3, [pc, #300]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	4a4a      	ldr	r2, [pc, #296]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fc fa30 	bl	8002154 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fc fa2c 	bl	8002154 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e21a      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ef      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x3ec>
 8005d18:	e01b      	b.n	8005d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d1a:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d20:	4a3b      	ldr	r2, [pc, #236]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fc fa13 	bl	8002154 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d32:	f7fc fa0f 	bl	8002154 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e1fd      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d44:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ef      	bne.n	8005d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80a6 	beq.w	8005eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d64:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d118      	bne.n	8005dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da4:	f7fc f9d6 	bl	8002154 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dac:	f7fc f9d2 	bl	8002154 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e1c0      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dbe:	4b15      	ldr	r3, [pc, #84]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0f0      	beq.n	8005dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d108      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4d8>
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005de2:	e029      	b.n	8005e38 <HAL_RCC_OscConfig+0x52c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d115      	bne.n	8005e18 <HAL_RCC_OscConfig+0x50c>
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005df4:	f043 0304 	orr.w	r3, r3, #4
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e02:	4a03      	ldr	r2, [pc, #12]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e0c:	e014      	b.n	8005e38 <HAL_RCC_OscConfig+0x52c>
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40007000 	.word	0x40007000
 8005e18:	4b9a      	ldr	r3, [pc, #616]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	4a99      	ldr	r2, [pc, #612]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e28:	4b96      	ldr	r3, [pc, #600]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	4a95      	ldr	r2, [pc, #596]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d016      	beq.n	8005e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fc f988 	bl	8002154 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e48:	f7fc f984 	bl	8002154 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e170      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e5e:	4b89      	ldr	r3, [pc, #548]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0ed      	beq.n	8005e48 <HAL_RCC_OscConfig+0x53c>
 8005e6c:	e015      	b.n	8005e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fc f971 	bl	8002154 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e74:	e00a      	b.n	8005e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fc f96d 	bl	8002154 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e159      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e8c:	4b7d      	ldr	r3, [pc, #500]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1ed      	bne.n	8005e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e9a:	7ffb      	ldrb	r3, [r7, #31]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d105      	bne.n	8005eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea0:	4b78      	ldr	r3, [pc, #480]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	4a77      	ldr	r2, [pc, #476]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d03c      	beq.n	8005f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01c      	beq.n	8005efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec0:	4b70      	ldr	r3, [pc, #448]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec6:	4a6f      	ldr	r2, [pc, #444]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed0:	f7fc f940 	bl	8002154 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed8:	f7fc f93c 	bl	8002154 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e12a      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eea:	4b66      	ldr	r3, [pc, #408]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ef      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x5cc>
 8005ef8:	e01b      	b.n	8005f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005efa:	4b62      	ldr	r3, [pc, #392]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f00:	4a60      	ldr	r2, [pc, #384]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0a:	f7fc f923 	bl	8002154 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f12:	f7fc f91f 	bl	8002154 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e10d      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f24:	4b57      	ldr	r3, [pc, #348]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1ef      	bne.n	8005f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8101 	beq.w	800613e <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f040 80c9 	bne.w	80060d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f46:	4b4f      	ldr	r3, [pc, #316]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0203 	and.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d12c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	3b01      	subs	r3, #1
 8005f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d123      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d113      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d109      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	3b01      	subs	r3, #1
 8005fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d06b      	beq.n	800608c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d062      	beq.n	8006080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fba:	4b32      	ldr	r3, [pc, #200]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0ba      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fca:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fd6:	f7fc f8bd 	bl	8002154 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fde:	f7fc f8b9 	bl	8002154 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e0a7      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff0:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	4b21      	ldr	r3, [pc, #132]	; (8006088 <HAL_RCC_OscConfig+0x77c>)
 8006002:	4013      	ands	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800600c:	3a01      	subs	r2, #1
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	4311      	orrs	r1, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006016:	0212      	lsls	r2, r2, #8
 8006018:	4311      	orrs	r1, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800601e:	0852      	lsrs	r2, r2, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	0552      	lsls	r2, r2, #21
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800602a:	0852      	lsrs	r2, r2, #1
 800602c:	3a01      	subs	r2, #1
 800602e:	0652      	lsls	r2, r2, #25
 8006030:	4311      	orrs	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006036:	06d2      	lsls	r2, r2, #27
 8006038:	430a      	orrs	r2, r1
 800603a:	4912      	ldr	r1, [pc, #72]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 800603c:	4313      	orrs	r3, r2
 800603e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800604a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006058:	f7fc f87c 	bl	8002154 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fc f878 	bl	8002154 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e066      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607e:	e05e      	b.n	800613e <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e05d      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
 8006084:	40021000 	.word	0x40021000
 8006088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d152      	bne.n	800613e <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006098:	4b2b      	ldr	r3, [pc, #172]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a2a      	ldr	r2, [pc, #168]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a4:	4b28      	ldr	r3, [pc, #160]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a27      	ldr	r2, [pc, #156]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b0:	f7fc f850 	bl	8002154 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fc f84c 	bl	8002154 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e03a      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x7ac>
 80060d6:	e032      	b.n	800613e <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d02d      	beq.n	800613a <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a19      	ldr	r2, [pc, #100]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4a13      	ldr	r2, [pc, #76]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 80060fc:	f023 0303 	bic.w	r3, r3, #3
 8006100:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 8006108:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006110:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fc f81f 	bl	8002154 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611a:	f7fc f81b 	bl	8002154 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e009      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <HAL_RCC_OscConfig+0x83c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x80e>
 8006138:	e001      	b.n	800613e <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000

0800614c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0c8      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006160:	4b66      	ldr	r3, [pc, #408]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d910      	bls.n	8006190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b63      	ldr	r3, [pc, #396]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 0207 	bic.w	r2, r3, #7
 8006176:	4961      	ldr	r1, [pc, #388]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b5f      	ldr	r3, [pc, #380]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0b0      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d04c      	beq.n	8006236 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d107      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061a4:	4b56      	ldr	r3, [pc, #344]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d121      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e09e      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061bc:	4b50      	ldr	r3, [pc, #320]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d115      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e092      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061d4:	4b4a      	ldr	r3, [pc, #296]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e086      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061e4:	4b46      	ldr	r3, [pc, #280]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e07e      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061f4:	4b42      	ldr	r3, [pc, #264]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f023 0203 	bic.w	r2, r3, #3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	493f      	ldr	r1, [pc, #252]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006206:	f7fb ffa5 	bl	8002154 <HAL_GetTick>
 800620a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620c:	e00a      	b.n	8006224 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620e:	f7fb ffa1 	bl	8002154 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e066      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006224:	4b36      	ldr	r3, [pc, #216]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 020c 	and.w	r2, r3, #12
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	429a      	cmp	r2, r3
 8006234:	d1eb      	bne.n	800620e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006242:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	492c      	ldr	r1, [pc, #176]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006254:	4b29      	ldr	r3, [pc, #164]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d210      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006262:	4b26      	ldr	r3, [pc, #152]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 0207 	bic.w	r2, r3, #7
 800626a:	4924      	ldr	r1, [pc, #144]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b22      	ldr	r3, [pc, #136]	; (80062fc <HAL_RCC_ClockConfig+0x1b0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e036      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006290:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4918      	ldr	r1, [pc, #96]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ae:	4b14      	ldr	r3, [pc, #80]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4910      	ldr	r1, [pc, #64]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062c2:	f000 f825 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <HAL_RCC_ClockConfig+0x1b4>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	490c      	ldr	r1, [pc, #48]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 80062d4:	5ccb      	ldrb	r3, [r1, r3]
 80062d6:	f003 031f 	and.w	r3, r3, #31
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <HAL_RCC_ClockConfig+0x1c0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fb fee4 	bl	80020b4 <HAL_InitTick>
 80062ec:	4603      	mov	r3, r0
 80062ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40022000 	.word	0x40022000
 8006300:	40021000 	.word	0x40021000
 8006304:	0800df38 	.word	0x0800df38
 8006308:	20000000 	.word	0x20000000
 800630c:	20000004 	.word	0x20000004

08006310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006310:	b480      	push	{r7}
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	2300      	movs	r3, #0
 800631c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631e:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006328:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0x34>
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d121      	bne.n	8006382 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d11e      	bne.n	8006382 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006344:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d107      	bne.n	8006360 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006350:	4b31      	ldr	r3, [pc, #196]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	e005      	b.n	800636c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006360:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800636c:	4a2b      	ldr	r2, [pc, #172]	; (800641c <HAL_RCC_GetSysClockFreq+0x10c>)
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006374:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10d      	bne.n	8006398 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006380:	e00a      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b04      	cmp	r3, #4
 8006386:	d102      	bne.n	800638e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006388:	4b25      	ldr	r3, [pc, #148]	; (8006420 <HAL_RCC_GetSysClockFreq+0x110>)
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	e004      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b08      	cmp	r3, #8
 8006392:	d101      	bne.n	8006398 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006394:	4b23      	ldr	r3, [pc, #140]	; (8006424 <HAL_RCC_GetSysClockFreq+0x114>)
 8006396:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b0c      	cmp	r3, #12
 800639c:	d134      	bne.n	8006408 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d003      	beq.n	80063b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d003      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0xac>
 80063b4:	e005      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <HAL_RCC_GetSysClockFreq+0x110>)
 80063b8:	617b      	str	r3, [r7, #20]
      break;
 80063ba:	e005      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <HAL_RCC_GetSysClockFreq+0x114>)
 80063be:	617b      	str	r3, [r7, #20]
      break;
 80063c0:	e002      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	617b      	str	r3, [r7, #20]
      break;
 80063c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063c8:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	3301      	adds	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063d6:	4b10      	ldr	r3, [pc, #64]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	fb03 f202 	mul.w	r2, r3, r2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063ee:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <HAL_RCC_GetSysClockFreq+0x108>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	0e5b      	lsrs	r3, r3, #25
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	3301      	adds	r3, #1
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	fbb2 f3f3 	udiv	r3, r2, r3
 8006406:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006408:	69bb      	ldr	r3, [r7, #24]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3724      	adds	r7, #36	; 0x24
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	0800df50 	.word	0x0800df50
 8006420:	00f42400 	.word	0x00f42400
 8006424:	007a1200 	.word	0x007a1200

08006428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <HAL_RCC_GetHCLKFreq+0x14>)
 800642e:	681b      	ldr	r3, [r3, #0]
}
 8006430:	4618      	mov	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000000 	.word	0x20000000

08006440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006444:	f7ff fff0 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4904      	ldr	r1, [pc, #16]	; (8006468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40021000 	.word	0x40021000
 8006468:	0800df48 	.word	0x0800df48

0800646c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006470:	f7ff ffda 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	0adb      	lsrs	r3, r3, #11
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4904      	ldr	r1, [pc, #16]	; (8006494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40021000 	.word	0x40021000
 8006494:	0800df48 	.word	0x0800df48

08006498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064b0:	f7ff f920 	bl	80056f4 <HAL_PWREx_GetVoltageRange>
 80064b4:	6178      	str	r0, [r7, #20]
 80064b6:	e014      	b.n	80064e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	4a24      	ldr	r2, [pc, #144]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c2:	6593      	str	r3, [r2, #88]	; 0x58
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064d0:	f7ff f910 	bl	80056f4 <HAL_PWREx_GetVoltageRange>
 80064d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064d6:	4b1e      	ldr	r3, [pc, #120]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e8:	d10b      	bne.n	8006502 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d919      	bls.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2ba0      	cmp	r3, #160	; 0xa0
 80064f4:	d902      	bls.n	80064fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064f6:	2302      	movs	r3, #2
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	e013      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064fc:	2301      	movs	r3, #1
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	e010      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d902      	bls.n	800650e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006508:	2303      	movs	r3, #3
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e00a      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d102      	bne.n	800651a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006514:	2302      	movs	r3, #2
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	e004      	b.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	d101      	bne.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006520:	2301      	movs	r3, #1
 8006522:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 0207 	bic.w	r2, r3, #7
 800652c:	4909      	ldr	r1, [pc, #36]	; (8006554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d001      	beq.n	8006546 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40021000 	.word	0x40021000
 8006554:	40022000 	.word	0x40022000

08006558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006560:	2300      	movs	r3, #0
 8006562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006564:	2300      	movs	r3, #0
 8006566:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006570:	2b00      	cmp	r3, #0
 8006572:	d031      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006578:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800657c:	d01a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800657e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006582:	d814      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800658c:	d10f      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800658e:	4b5d      	ldr	r3, [pc, #372]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	4a5c      	ldr	r2, [pc, #368]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800659a:	e00c      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fa44 	bl	8006a30 <RCCEx_PLLSAI1_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ac:	e003      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	74fb      	strb	r3, [r7, #19]
      break;
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80065b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065bc:	4b51      	ldr	r3, [pc, #324]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ca:	494e      	ldr	r1, [pc, #312]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065d2:	e001      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	7cfb      	ldrb	r3, [r7, #19]
 80065d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 809e 	beq.w	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065e6:	2300      	movs	r3, #0
 80065e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065ea:	4b46      	ldr	r3, [pc, #280]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00d      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006600:	4b40      	ldr	r3, [pc, #256]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006604:	4a3f      	ldr	r2, [pc, #252]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660a:	6593      	str	r3, [r2, #88]	; 0x58
 800660c:	4b3d      	ldr	r3, [pc, #244]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800660e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006618:	2301      	movs	r3, #1
 800661a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800661c:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a39      	ldr	r2, [pc, #228]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006628:	f7fb fd94 	bl	8002154 <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800662e:	e009      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006630:	f7fb fd90 	bl	8002154 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d902      	bls.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	74fb      	strb	r3, [r7, #19]
        break;
 8006642:	e005      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006644:	4b30      	ldr	r3, [pc, #192]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ef      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006650:	7cfb      	ldrb	r3, [r7, #19]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d15a      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006656:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006660:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01e      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	429a      	cmp	r2, r3
 8006670:	d019      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006672:	4b24      	ldr	r3, [pc, #144]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800668e:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006694:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800669e:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d016      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b0:	f7fb fd50 	bl	8002154 <HAL_GetTick>
 80066b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066b6:	e00b      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fb fd4c 	bl	8002154 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d902      	bls.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	74fb      	strb	r3, [r7, #19]
            break;
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0ec      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80066de:	7cfb      	ldrb	r3, [r7, #19]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f2:	4904      	ldr	r1, [pc, #16]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066fa:	e009      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066fc:	7cfb      	ldrb	r3, [r7, #19]
 80066fe:	74bb      	strb	r3, [r7, #18]
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006702:	bf00      	nop
 8006704:	40021000 	.word	0x40021000
 8006708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	7cfb      	ldrb	r3, [r7, #19]
 800670e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006710:	7c7b      	ldrb	r3, [r7, #17]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006716:	4b9e      	ldr	r3, [pc, #632]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4a9d      	ldr	r2, [pc, #628]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800671c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800672e:	4b98      	ldr	r3, [pc, #608]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	f023 0203 	bic.w	r2, r3, #3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	4994      	ldr	r1, [pc, #592]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006750:	4b8f      	ldr	r3, [pc, #572]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f023 020c 	bic.w	r2, r3, #12
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	498c      	ldr	r1, [pc, #560]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006772:	4b87      	ldr	r3, [pc, #540]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	4983      	ldr	r1, [pc, #524]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006794:	4b7e      	ldr	r3, [pc, #504]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	497b      	ldr	r1, [pc, #492]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b6:	4b76      	ldr	r3, [pc, #472]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	4972      	ldr	r1, [pc, #456]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067d8:	4b6d      	ldr	r3, [pc, #436]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	496a      	ldr	r1, [pc, #424]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067fa:	4b65      	ldr	r3, [pc, #404]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006808:	4961      	ldr	r1, [pc, #388]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800681c:	4b5c      	ldr	r3, [pc, #368]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	4959      	ldr	r1, [pc, #356]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800683e:	4b54      	ldr	r3, [pc, #336]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	4950      	ldr	r1, [pc, #320]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006860:	4b4b      	ldr	r3, [pc, #300]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686e:	4948      	ldr	r1, [pc, #288]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006882:	4b43      	ldr	r3, [pc, #268]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006884:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006888:	f023 0203 	bic.w	r2, r3, #3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	493f      	ldr	r1, [pc, #252]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d028      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068a4:	4b3a      	ldr	r3, [pc, #232]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	4937      	ldr	r1, [pc, #220]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c2:	d106      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c4:	4b32      	ldr	r3, [pc, #200]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a31      	ldr	r2, [pc, #196]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ce:	60d3      	str	r3, [r2, #12]
 80068d0:	e011      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068da:	d10c      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	2101      	movs	r1, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 f8a4 	bl	8006a30 <RCCEx_PLLSAI1_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80068ec:	7cfb      	ldrb	r3, [r7, #19]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d028      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	491f      	ldr	r1, [pc, #124]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006920:	d106      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4a1a      	ldr	r2, [pc, #104]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692c:	60d3      	str	r3, [r2, #12]
 800692e:	e011      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006938:	d10c      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	2101      	movs	r1, #1
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f875 	bl	8006a30 <RCCEx_PLLSAI1_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800694a:	7cfb      	ldrb	r3, [r7, #19]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8006950:	7cfb      	ldrb	r3, [r7, #19]
 8006952:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d02b      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800697e:	d109      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4a02      	ldr	r2, [pc, #8]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698a:	60d3      	str	r3, [r2, #12]
 800698c:	e014      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800698e:	bf00      	nop
 8006990:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800699c:	d10c      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3304      	adds	r3, #4
 80069a2:	2101      	movs	r1, #1
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 f843 	bl	8006a30 <RCCEx_PLLSAI1_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ae:	7cfb      	ldrb	r3, [r7, #19]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80069b4:	7cfb      	ldrb	r3, [r7, #19]
 80069b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01c      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069c4:	4b19      	ldr	r3, [pc, #100]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	4916      	ldr	r1, [pc, #88]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069e2:	d10c      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3304      	adds	r3, #4
 80069e8:	2102      	movs	r1, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f820 	bl	8006a30 <RCCEx_PLLSAI1_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80069fa:	7cfb      	ldrb	r3, [r7, #19]
 80069fc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a0a:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a18:	4904      	ldr	r1, [pc, #16]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a20:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000

08006a30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a3e:	4b74      	ldr	r3, [pc, #464]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d018      	beq.n	8006a7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a4a:	4b71      	ldr	r3, [pc, #452]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0203 	and.w	r2, r3, #3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10d      	bne.n	8006a76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a62:	4b6b      	ldr	r3, [pc, #428]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
       ||
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d047      	beq.n	8006b06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	73fb      	strb	r3, [r7, #15]
 8006a7a:	e044      	b.n	8006b06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d018      	beq.n	8006ab6 <RCCEx_PLLSAI1_Config+0x86>
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d825      	bhi.n	8006ad4 <RCCEx_PLLSAI1_Config+0xa4>
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d002      	beq.n	8006a92 <RCCEx_PLLSAI1_Config+0x62>
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d009      	beq.n	8006aa4 <RCCEx_PLLSAI1_Config+0x74>
 8006a90:	e020      	b.n	8006ad4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a92:	4b5f      	ldr	r3, [pc, #380]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11d      	bne.n	8006ada <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aa2:	e01a      	b.n	8006ada <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006aa4:	4b5a      	ldr	r3, [pc, #360]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d116      	bne.n	8006ade <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ab4:	e013      	b.n	8006ade <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ab6:	4b56      	ldr	r3, [pc, #344]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10f      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ac2:	4b53      	ldr	r3, [pc, #332]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ad2:	e006      	b.n	8006ae2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad8:	e004      	b.n	8006ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10d      	bne.n	8006b06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006aea:	4b49      	ldr	r3, [pc, #292]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6819      	ldr	r1, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	430b      	orrs	r3, r1
 8006b00:	4943      	ldr	r1, [pc, #268]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d17c      	bne.n	8006c06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b0c:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3f      	ldr	r2, [pc, #252]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b18:	f7fb fb1c 	bl	8002154 <HAL_GetTick>
 8006b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b1e:	e009      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b20:	f7fb fb18 	bl	8002154 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d902      	bls.n	8006b34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
        break;
 8006b32:	e005      	b.n	8006b40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b34:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1ef      	bne.n	8006b20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d15f      	bne.n	8006c06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d110      	bne.n	8006b6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b4c:	4b30      	ldr	r3, [pc, #192]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6892      	ldr	r2, [r2, #8]
 8006b5c:	0211      	lsls	r1, r2, #8
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	68d2      	ldr	r2, [r2, #12]
 8006b62:	06d2      	lsls	r2, r2, #27
 8006b64:	430a      	orrs	r2, r1
 8006b66:	492a      	ldr	r1, [pc, #168]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	610b      	str	r3, [r1, #16]
 8006b6c:	e027      	b.n	8006bbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d112      	bne.n	8006b9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b74:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6892      	ldr	r2, [r2, #8]
 8006b84:	0211      	lsls	r1, r2, #8
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6912      	ldr	r2, [r2, #16]
 8006b8a:	0852      	lsrs	r2, r2, #1
 8006b8c:	3a01      	subs	r2, #1
 8006b8e:	0552      	lsls	r2, r2, #21
 8006b90:	430a      	orrs	r2, r1
 8006b92:	491f      	ldr	r1, [pc, #124]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	610b      	str	r3, [r1, #16]
 8006b98:	e011      	b.n	8006bbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ba2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6892      	ldr	r2, [r2, #8]
 8006baa:	0211      	lsls	r1, r2, #8
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6952      	ldr	r2, [r2, #20]
 8006bb0:	0852      	lsrs	r2, r2, #1
 8006bb2:	3a01      	subs	r2, #1
 8006bb4:	0652      	lsls	r2, r2, #25
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	4915      	ldr	r1, [pc, #84]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bbe:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bca:	f7fb fac3 	bl	8002154 <HAL_GetTick>
 8006bce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bd0:	e009      	b.n	8006be6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bd2:	f7fb fabf 	bl	8002154 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d902      	bls.n	8006be6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	73fb      	strb	r3, [r7, #15]
          break;
 8006be4:	e005      	b.n	8006bf2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006be6:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0ef      	beq.n	8006bd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	4903      	ldr	r1, [pc, #12]	; (8006c10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021000 	.word	0x40021000

08006c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e095      	b.n	8006d52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d108      	bne.n	8006c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c36:	d009      	beq.n	8006c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	61da      	str	r2, [r3, #28]
 8006c3e:	e005      	b.n	8006c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fa fe12 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c8c:	d902      	bls.n	8006c94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	e002      	b.n	8006c9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ca2:	d007      	beq.n	8006cb4 <HAL_SPI_Init+0xa0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cac:	d002      	beq.n	8006cb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	ea42 0103 	orr.w	r1, r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	0c1b      	lsrs	r3, r3, #16
 8006d10:	f003 0204 	and.w	r2, r3, #4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d30:	ea42 0103 	orr.w	r1, r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e01a      	b.n	8006da2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fa fde5 	bl	8001954 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b088      	sub	sp, #32
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_SPI_Transmit+0x22>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e158      	b.n	800707e <HAL_SPI_Transmit+0x2d4>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dd4:	f7fb f9be 	bl	8002154 <HAL_GetTick>
 8006dd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d002      	beq.n	8006df0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
 8006dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dee:	e13d      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Transmit+0x52>
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e00:	e134      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2203      	movs	r2, #3
 8006e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4c:	d10f      	bne.n	8006e6e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d007      	beq.n	8006e8c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e94:	d94b      	bls.n	8006f2e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_SPI_Transmit+0xfa>
 8006e9e:	8afb      	ldrh	r3, [r7, #22]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d13e      	bne.n	8006f22 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	881a      	ldrh	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	1c9a      	adds	r2, r3, #2
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ec8:	e02b      	b.n	8006f22 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d112      	bne.n	8006efe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	881a      	ldrh	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006efc:	e011      	b.n	8006f22 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efe:	f7fb f929 	bl	8002154 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d803      	bhi.n	8006f16 <HAL_SPI_Transmit+0x16c>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d102      	bne.n	8006f1c <HAL_SPI_Transmit+0x172>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f20:	e0a4      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ce      	bne.n	8006eca <HAL_SPI_Transmit+0x120>
 8006f2c:	e07c      	b.n	8007028 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_SPI_Transmit+0x192>
 8006f36:	8afb      	ldrh	r3, [r7, #22]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d170      	bne.n	800701e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d912      	bls.n	8006f6c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	881a      	ldrh	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	1c9a      	adds	r2, r3, #2
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b02      	subs	r3, #2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f6a:	e058      	b.n	800701e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	330c      	adds	r3, #12
 8006f76:	7812      	ldrb	r2, [r2, #0]
 8006f78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f92:	e044      	b.n	800701e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d12b      	bne.n	8006ffa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d912      	bls.n	8006fd2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b02      	subs	r3, #2
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fd0:	e025      	b.n	800701e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ff8:	e011      	b.n	800701e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffa:	f7fb f8ab 	bl	8002154 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d803      	bhi.n	8007012 <HAL_SPI_Transmit+0x268>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d102      	bne.n	8007018 <HAL_SPI_Transmit+0x26e>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d102      	bne.n	800701e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800701c:	e026      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1b5      	bne.n	8006f94 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f949 	bl	80072c4 <SPI_EndRxTxTransaction>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e000      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800706a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800707c:	7ffb      	ldrb	r3, [r7, #31]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007098:	f7fb f85c 	bl	8002154 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4413      	add	r3, r2
 80070a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070a8:	f7fb f854 	bl	8002154 <HAL_GetTick>
 80070ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	015b      	lsls	r3, r3, #5
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	fb02 f303 	mul.w	r3, r2, r3
 80070bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070be:	e054      	b.n	800716a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d050      	beq.n	800716a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070c8:	f7fb f844 	bl	8002154 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d902      	bls.n	80070de <SPI_WaitFlagStateUntilTimeout+0x56>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d13d      	bne.n	800715a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d111      	bne.n	800711c <SPI_WaitFlagStateUntilTimeout+0x94>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007100:	d004      	beq.n	800710c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d107      	bne.n	800711c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800711a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007124:	d10f      	bne.n	8007146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e017      	b.n	800718a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	3b01      	subs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4013      	ands	r3, r2
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	bf0c      	ite	eq
 800717a:	2301      	moveq	r3, #1
 800717c:	2300      	movne	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	429a      	cmp	r2, r3
 8007186:	d19b      	bne.n	80070c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000000 	.word	0x20000000

08007198 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80071aa:	f7fa ffd3 	bl	8002154 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80071ba:	f7fa ffcb 	bl	8002154 <HAL_GetTick>
 80071be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071c8:	4b3d      	ldr	r3, [pc, #244]	; (80072c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	0d1b      	lsrs	r3, r3, #20
 80071d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071e0:	e060      	b.n	80072a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80071e8:	d107      	bne.n	80071fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d050      	beq.n	80072a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007202:	f7fa ffa7 	bl	8002154 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720e:	429a      	cmp	r2, r3
 8007210:	d902      	bls.n	8007218 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d13d      	bne.n	8007294 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007226:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007230:	d111      	bne.n	8007256 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800723a:	d004      	beq.n	8007246 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007244:	d107      	bne.n	8007256 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007254:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725e:	d10f      	bne.n	8007280 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800727e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e010      	b.n	80072b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d196      	bne.n	80071e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3728      	adds	r7, #40	; 0x28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000000 	.word	0x20000000

080072c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ff5b 	bl	8007198 <SPI_WaitFifoStateUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e027      	b.n	8007348 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff fec0 	bl	8007088 <SPI_WaitFlagStateUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e014      	b.n	8007348 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff ff34 	bl	8007198 <SPI_WaitFifoStateUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733a:	f043 0220 	orr.w	r2, r3, #32
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e000      	b.n	8007348 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e040      	b.n	80073e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fa fb12 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2224      	movs	r2, #36	; 0x24
 800737c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fd30 	bl	8007df4 <UART_SetConfig>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e022      	b.n	80073e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 ffaa 	bl	8008300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f831 	bl	8008444 <UART_CheckIdleState>
 80073e2:	4603      	mov	r3, r0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e02b      	b.n	8007456 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	; 0x24
 8007402:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2200      	movs	r2, #0
 800742a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7fa fc29 	bl	8001c84 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08a      	sub	sp, #40	; 0x28
 8007462:	af02      	add	r7, sp, #8
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007472:	2b20      	cmp	r3, #32
 8007474:	f040 8082 	bne.w	800757c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_UART_Transmit+0x26>
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e07a      	b.n	800757e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_UART_Transmit+0x38>
 8007492:	2302      	movs	r3, #2
 8007494:	e073      	b.n	800757e <HAL_UART_Transmit+0x120>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ac:	f7fa fe52 	bl	8002154 <HAL_GetTick>
 80074b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	88fa      	ldrh	r2, [r7, #6]
 80074be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ca:	d108      	bne.n	80074de <HAL_UART_Transmit+0x80>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e003      	b.n	80074e6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80074ee:	e02d      	b.n	800754c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2200      	movs	r2, #0
 80074f8:	2180      	movs	r1, #128	; 0x80
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 ffeb 	bl	80084d6 <UART_WaitOnFlagUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e039      	b.n	800757e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10b      	bne.n	8007528 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	881a      	ldrh	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800751c:	b292      	uxth	r2, r2
 800751e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	3302      	adds	r3, #2
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e008      	b.n	800753a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	b292      	uxth	r2, r2
 8007532:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	3301      	adds	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1cb      	bne.n	80074f0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2200      	movs	r2, #0
 8007560:	2140      	movs	r1, #64	; 0x40
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 ffb7 	bl	80084d6 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e005      	b.n	800757e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	e000      	b.n	800757e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800757c:	2302      	movs	r3, #2
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8007586:	b480      	push	{r7}
 8007588:	b09d      	sub	sp, #116	; 0x74
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007592:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007598:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_UART_DMAPause+0x22>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e083      	b.n	80076b0 <HAL_UART_DMAPause+0x12a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b80      	cmp	r3, #128	; 0x80
 80075bc:	d11c      	bne.n	80075f8 <HAL_UART_DMAPause+0x72>
 80075be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c0:	2b21      	cmp	r3, #33	; 0x21
 80075c2:	d119      	bne.n	80075f8 <HAL_UART_DMAPause+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075da:	667b      	str	r3, [r7, #100]	; 0x64
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075e4:	657a      	str	r2, [r7, #84]	; 0x54
 80075e6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <HAL_UART_DMAPause+0x3e>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d14f      	bne.n	80076a6 <HAL_UART_DMAPause+0x120>
 8007606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007608:	2b22      	cmp	r3, #34	; 0x22
 800760a:	d14c      	bne.n	80076a6 <HAL_UART_DMAPause+0x120>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007620:	663b      	str	r3, [r7, #96]	; 0x60
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800762a:	643b      	str	r3, [r7, #64]	; 0x40
 800762c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e6      	bne.n	800760c <HAL_UART_DMAPause+0x86>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3308      	adds	r3, #8
 8007644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	61fb      	str	r3, [r7, #28]
   return(result);
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800765e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e5      	bne.n	800763e <HAL_UART_DMAPause+0xb8>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	60bb      	str	r3, [r7, #8]
   return(result);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007688:	65bb      	str	r3, [r7, #88]	; 0x58
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007692:	61ba      	str	r2, [r7, #24]
 8007694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	613b      	str	r3, [r7, #16]
   return(result);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e5      	bne.n	8007672 <HAL_UART_DMAPause+0xec>
  }

  __HAL_UNLOCK(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3774      	adds	r7, #116	; 0x74
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b09b      	sub	sp, #108	; 0x6c
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_UART_DMAResume+0x16>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e07f      	b.n	80077d2 <HAL_UART_DMAResume+0x116>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076de:	2b21      	cmp	r3, #33	; 0x21
 80076e0:	d119      	bne.n	8007716 <HAL_UART_DMAResume+0x5a>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f8:	667b      	str	r3, [r7, #100]	; 0x64
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007702:	657a      	str	r2, [r7, #84]	; 0x54
 8007704:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e5      	bne.n	80076e2 <HAL_UART_DMAResume+0x26>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771a:	2b22      	cmp	r3, #34	; 0x22
 800771c:	d154      	bne.n	80077c8 <HAL_UART_DMAResume+0x10c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2208      	movs	r2, #8
 8007724:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d018      	beq.n	8007760 <HAL_UART_DMAResume+0xa4>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007742:	663b      	str	r3, [r7, #96]	; 0x60
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800774c:	643b      	str	r3, [r7, #64]	; 0x40
 800774e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <HAL_UART_DMAResume+0xa4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077b4:	61ba      	str	r2, [r7, #24]
 80077b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	613b      	str	r3, [r7, #16]
   return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <HAL_UART_DMAResume+0xd8>
  }

  __HAL_UNLOCK(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	376c      	adds	r7, #108	; 0x6c
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b0ba      	sub	sp, #232	; 0xe8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007806:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800780a:	f640 030f 	movw	r3, #2063	; 0x80f
 800780e:	4013      	ands	r3, r2
 8007810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d115      	bne.n	8007848 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00f      	beq.n	8007848 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	f003 0320 	and.w	r3, r3, #32
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 82a6 	beq.w	8007d8a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
      }
      return;
 8007846:	e2a0      	b.n	8007d8a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8117 	beq.w	8007a80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800785e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007862:	4b85      	ldr	r3, [pc, #532]	; (8007a78 <HAL_UART_IRQHandler+0x298>)
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 810a 	beq.w	8007a80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800786c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d011      	beq.n	800789c <HAL_UART_IRQHandler+0xbc>
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2201      	movs	r2, #1
 800788a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007892:	f043 0201 	orr.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800789c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d011      	beq.n	80078cc <HAL_UART_IRQHandler+0xec>
 80078a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2202      	movs	r2, #2
 80078ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c2:	f043 0204 	orr.w	r2, r3, #4
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d011      	beq.n	80078fc <HAL_UART_IRQHandler+0x11c>
 80078d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2204      	movs	r2, #4
 80078ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f2:	f043 0202 	orr.w	r2, r3, #2
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d105      	bne.n	8007920 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007918:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2208      	movs	r2, #8
 8007926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792e:	f043 0208 	orr.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <HAL_UART_IRQHandler+0x18a>
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00c      	beq.n	800796a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007960:	f043 0220 	orr.w	r2, r3, #32
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 820c 	beq.w	8007d8e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d005      	beq.n	80079c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d04f      	beq.n	8007a62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 ff18 	bl	80087f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d141      	bne.n	8007a5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1d9      	bne.n	80079d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d013      	beq.n	8007a52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2e:	4a13      	ldr	r2, [pc, #76]	; (8007a7c <HAL_UART_IRQHandler+0x29c>)
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fb f982 	bl	8002d40 <HAL_DMA_Abort_IT>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d017      	beq.n	8007a72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e00f      	b.n	8007a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f9c4 	bl	8007de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00b      	b.n	8007a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f9c0 	bl	8007de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e007      	b.n	8007a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f9bc 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a70:	e18d      	b.n	8007d8e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a72:	bf00      	nop
    return;
 8007a74:	e18b      	b.n	8007d8e <HAL_UART_IRQHandler+0x5ae>
 8007a76:	bf00      	nop
 8007a78:	04000120 	.word	0x04000120
 8007a7c:	08008a97 	.word	0x08008a97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f040 8146 	bne.w	8007d16 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 813f 	beq.w	8007d16 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 8138 	beq.w	8007d16 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	f040 80b4 	bne.w	8007c26 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 815f 	beq.w	8007d92 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f080 8157 	bcs.w	8007d92 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 8085 	bne.w	8007c0a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1da      	bne.n	8007b00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e1      	bne.n	8007b4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e4      	bne.n	8007bca <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fb f85d 	bl	8002cc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7f9 f886 	bl	8000d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c24:	e0b5      	b.n	8007d92 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80a7 	beq.w	8007d96 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80a2 	beq.w	8007d96 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c74:	647b      	str	r3, [r7, #68]	; 0x44
 8007c76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e4      	bne.n	8007c52 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	623b      	str	r3, [r7, #32]
   return(result);
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cac:	633a      	str	r2, [r7, #48]	; 0x30
 8007cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e3      	bne.n	8007c88 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0310 	bic.w	r3, r3, #16
 8007ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	69b9      	ldr	r1, [r7, #24]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	617b      	str	r3, [r7, #20]
   return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e4      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7f9 f80e 	bl	8000d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d14:	e03f      	b.n	8007d96 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00e      	beq.n	8007d40 <HAL_UART_IRQHandler+0x560>
 8007d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d008      	beq.n	8007d40 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 feec 	bl	8008b16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d3e:	e02d      	b.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00e      	beq.n	8007d6a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01c      	beq.n	8007d9a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
    }
    return;
 8007d68:	e017      	b.n	8007d9a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d012      	beq.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
 8007d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fe9d 	bl	8008ac2 <UART_EndTransmit_IT>
    return;
 8007d88:	e008      	b.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d8a:	bf00      	nop
 8007d8c:	e006      	b.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d8e:	bf00      	nop
 8007d90:	e004      	b.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d92:	bf00      	nop
 8007d94:	e002      	b.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d96:	bf00      	nop
 8007d98:	e000      	b.n	8007d9c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d9a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d9c:	37e8      	adds	r7, #232	; 0xe8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop

08007da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df8:	b08a      	sub	sp, #40	; 0x28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4ba5      	ldr	r3, [pc, #660]	; (80080b8 <UART_SetConfig+0x2c4>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a9a      	ldr	r2, [pc, #616]	; (80080bc <UART_SetConfig+0x2c8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a91      	ldr	r2, [pc, #580]	; (80080c0 <UART_SetConfig+0x2cc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d126      	bne.n	8007ecc <UART_SetConfig+0xd8>
 8007e7e:	4b91      	ldr	r3, [pc, #580]	; (80080c4 <UART_SetConfig+0x2d0>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d81b      	bhi.n	8007ec4 <UART_SetConfig+0xd0>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <UART_SetConfig+0xa0>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007eb5 	.word	0x08007eb5
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007ebd 	.word	0x08007ebd
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eaa:	e0d6      	b.n	800805a <UART_SetConfig+0x266>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eb2:	e0d2      	b.n	800805a <UART_SetConfig+0x266>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eba:	e0ce      	b.n	800805a <UART_SetConfig+0x266>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec2:	e0ca      	b.n	800805a <UART_SetConfig+0x266>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eca:	e0c6      	b.n	800805a <UART_SetConfig+0x266>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a7d      	ldr	r2, [pc, #500]	; (80080c8 <UART_SetConfig+0x2d4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d138      	bne.n	8007f48 <UART_SetConfig+0x154>
 8007ed6:	4b7b      	ldr	r3, [pc, #492]	; (80080c4 <UART_SetConfig+0x2d0>)
 8007ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007edc:	f003 030c 	and.w	r3, r3, #12
 8007ee0:	2b0c      	cmp	r3, #12
 8007ee2:	d82d      	bhi.n	8007f40 <UART_SetConfig+0x14c>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0xf8>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f41 	.word	0x08007f41
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f41 	.word	0x08007f41
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f26:	e098      	b.n	800805a <UART_SetConfig+0x266>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f2e:	e094      	b.n	800805a <UART_SetConfig+0x266>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f36:	e090      	b.n	800805a <UART_SetConfig+0x266>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f3e:	e08c      	b.n	800805a <UART_SetConfig+0x266>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f46:	e088      	b.n	800805a <UART_SetConfig+0x266>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5f      	ldr	r2, [pc, #380]	; (80080cc <UART_SetConfig+0x2d8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d125      	bne.n	8007f9e <UART_SetConfig+0x1aa>
 8007f52:	4b5c      	ldr	r3, [pc, #368]	; (80080c4 <UART_SetConfig+0x2d0>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f5c:	2b30      	cmp	r3, #48	; 0x30
 8007f5e:	d016      	beq.n	8007f8e <UART_SetConfig+0x19a>
 8007f60:	2b30      	cmp	r3, #48	; 0x30
 8007f62:	d818      	bhi.n	8007f96 <UART_SetConfig+0x1a2>
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d00a      	beq.n	8007f7e <UART_SetConfig+0x18a>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d814      	bhi.n	8007f96 <UART_SetConfig+0x1a2>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <UART_SetConfig+0x182>
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d008      	beq.n	8007f86 <UART_SetConfig+0x192>
 8007f74:	e00f      	b.n	8007f96 <UART_SetConfig+0x1a2>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7c:	e06d      	b.n	800805a <UART_SetConfig+0x266>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f84:	e069      	b.n	800805a <UART_SetConfig+0x266>
 8007f86:	2304      	movs	r3, #4
 8007f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8c:	e065      	b.n	800805a <UART_SetConfig+0x266>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f94:	e061      	b.n	800805a <UART_SetConfig+0x266>
 8007f96:	2310      	movs	r3, #16
 8007f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f9c:	e05d      	b.n	800805a <UART_SetConfig+0x266>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a4b      	ldr	r2, [pc, #300]	; (80080d0 <UART_SetConfig+0x2dc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d125      	bne.n	8007ff4 <UART_SetConfig+0x200>
 8007fa8:	4b46      	ldr	r3, [pc, #280]	; (80080c4 <UART_SetConfig+0x2d0>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8007fb4:	d016      	beq.n	8007fe4 <UART_SetConfig+0x1f0>
 8007fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8007fb8:	d818      	bhi.n	8007fec <UART_SetConfig+0x1f8>
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d00a      	beq.n	8007fd4 <UART_SetConfig+0x1e0>
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	d814      	bhi.n	8007fec <UART_SetConfig+0x1f8>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <UART_SetConfig+0x1d8>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d008      	beq.n	8007fdc <UART_SetConfig+0x1e8>
 8007fca:	e00f      	b.n	8007fec <UART_SetConfig+0x1f8>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd2:	e042      	b.n	800805a <UART_SetConfig+0x266>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fda:	e03e      	b.n	800805a <UART_SetConfig+0x266>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe2:	e03a      	b.n	800805a <UART_SetConfig+0x266>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fea:	e036      	b.n	800805a <UART_SetConfig+0x266>
 8007fec:	2310      	movs	r3, #16
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff2:	e032      	b.n	800805a <UART_SetConfig+0x266>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a30      	ldr	r2, [pc, #192]	; (80080bc <UART_SetConfig+0x2c8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d12a      	bne.n	8008054 <UART_SetConfig+0x260>
 8007ffe:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <UART_SetConfig+0x2d0>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800800c:	d01a      	beq.n	8008044 <UART_SetConfig+0x250>
 800800e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008012:	d81b      	bhi.n	800804c <UART_SetConfig+0x258>
 8008014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008018:	d00c      	beq.n	8008034 <UART_SetConfig+0x240>
 800801a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800801e:	d815      	bhi.n	800804c <UART_SetConfig+0x258>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <UART_SetConfig+0x238>
 8008024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008028:	d008      	beq.n	800803c <UART_SetConfig+0x248>
 800802a:	e00f      	b.n	800804c <UART_SetConfig+0x258>
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e012      	b.n	800805a <UART_SetConfig+0x266>
 8008034:	2302      	movs	r3, #2
 8008036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800803a:	e00e      	b.n	800805a <UART_SetConfig+0x266>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008042:	e00a      	b.n	800805a <UART_SetConfig+0x266>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800804a:	e006      	b.n	800805a <UART_SetConfig+0x266>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008052:	e002      	b.n	800805a <UART_SetConfig+0x266>
 8008054:	2310      	movs	r3, #16
 8008056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a17      	ldr	r2, [pc, #92]	; (80080bc <UART_SetConfig+0x2c8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	f040 808b 	bne.w	800817c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800806a:	2b08      	cmp	r3, #8
 800806c:	d834      	bhi.n	80080d8 <UART_SetConfig+0x2e4>
 800806e:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <UART_SetConfig+0x280>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	08008099 	.word	0x08008099
 8008078:	080080d9 	.word	0x080080d9
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080d9 	.word	0x080080d9
 8008084:	080080a7 	.word	0x080080a7
 8008088:	080080d9 	.word	0x080080d9
 800808c:	080080d9 	.word	0x080080d9
 8008090:	080080d9 	.word	0x080080d9
 8008094:	080080af 	.word	0x080080af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008098:	f7fe f9d2 	bl	8006440 <HAL_RCC_GetPCLK1Freq>
 800809c:	61f8      	str	r0, [r7, #28]
        break;
 800809e:	e021      	b.n	80080e4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <UART_SetConfig+0x2e0>)
 80080a2:	61fb      	str	r3, [r7, #28]
        break;
 80080a4:	e01e      	b.n	80080e4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080a6:	f7fe f933 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 80080aa:	61f8      	str	r0, [r7, #28]
        break;
 80080ac:	e01a      	b.n	80080e4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080b2:	61fb      	str	r3, [r7, #28]
        break;
 80080b4:	e016      	b.n	80080e4 <UART_SetConfig+0x2f0>
 80080b6:	bf00      	nop
 80080b8:	efff69f3 	.word	0xefff69f3
 80080bc:	40008000 	.word	0x40008000
 80080c0:	40013800 	.word	0x40013800
 80080c4:	40021000 	.word	0x40021000
 80080c8:	40004400 	.word	0x40004400
 80080cc:	40004800 	.word	0x40004800
 80080d0:	40004c00 	.word	0x40004c00
 80080d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 80fa 	beq.w	80082e0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	4413      	add	r3, r2
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d305      	bcc.n	8008108 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	429a      	cmp	r2, r3
 8008106:	d903      	bls.n	8008110 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800810e:	e0e7      	b.n	80082e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2200      	movs	r2, #0
 8008114:	461c      	mov	r4, r3
 8008116:	4615      	mov	r5, r2
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	022b      	lsls	r3, r5, #8
 8008122:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008126:	0222      	lsls	r2, r4, #8
 8008128:	68f9      	ldr	r1, [r7, #12]
 800812a:	6849      	ldr	r1, [r1, #4]
 800812c:	0849      	lsrs	r1, r1, #1
 800812e:	2000      	movs	r0, #0
 8008130:	4688      	mov	r8, r1
 8008132:	4681      	mov	r9, r0
 8008134:	eb12 0a08 	adds.w	sl, r2, r8
 8008138:	eb43 0b09 	adc.w	fp, r3, r9
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800814a:	4650      	mov	r0, sl
 800814c:	4659      	mov	r1, fp
 800814e:	f7f8 f841 	bl	80001d4 <__aeabi_uldivmod>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4613      	mov	r3, r2
 8008158:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008160:	d308      	bcc.n	8008174 <UART_SetConfig+0x380>
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008168:	d204      	bcs.n	8008174 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	60da      	str	r2, [r3, #12]
 8008172:	e0b5      	b.n	80082e0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800817a:	e0b1      	b.n	80082e0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008184:	d15d      	bne.n	8008242 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8008186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800818a:	2b08      	cmp	r3, #8
 800818c:	d827      	bhi.n	80081de <UART_SetConfig+0x3ea>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0x3a0>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081b9 	.word	0x080081b9
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c9 	.word	0x080081c9
 80081a0:	080081df 	.word	0x080081df
 80081a4:	080081cf 	.word	0x080081cf
 80081a8:	080081df 	.word	0x080081df
 80081ac:	080081df 	.word	0x080081df
 80081b0:	080081df 	.word	0x080081df
 80081b4:	080081d7 	.word	0x080081d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b8:	f7fe f942 	bl	8006440 <HAL_RCC_GetPCLK1Freq>
 80081bc:	61f8      	str	r0, [r7, #28]
        break;
 80081be:	e014      	b.n	80081ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081c0:	f7fe f954 	bl	800646c <HAL_RCC_GetPCLK2Freq>
 80081c4:	61f8      	str	r0, [r7, #28]
        break;
 80081c6:	e010      	b.n	80081ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c8:	4b4c      	ldr	r3, [pc, #304]	; (80082fc <UART_SetConfig+0x508>)
 80081ca:	61fb      	str	r3, [r7, #28]
        break;
 80081cc:	e00d      	b.n	80081ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ce:	f7fe f89f 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 80081d2:	61f8      	str	r0, [r7, #28]
        break;
 80081d4:	e009      	b.n	80081ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081da:	61fb      	str	r3, [r7, #28]
        break;
 80081dc:	e005      	b.n	80081ea <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80081e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d077      	beq.n	80082e0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005a      	lsls	r2, r3, #1
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	441a      	add	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	fbb2 f3f3 	udiv	r3, r2, r3
 8008204:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b0f      	cmp	r3, #15
 800820a:	d916      	bls.n	800823a <UART_SetConfig+0x446>
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008212:	d212      	bcs.n	800823a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f023 030f 	bic.w	r3, r3, #15
 800821c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	b29b      	uxth	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	b29a      	uxth	r2, r3
 800822a:	8afb      	ldrh	r3, [r7, #22]
 800822c:	4313      	orrs	r3, r2
 800822e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	8afa      	ldrh	r2, [r7, #22]
 8008236:	60da      	str	r2, [r3, #12]
 8008238:	e052      	b.n	80082e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008240:	e04e      	b.n	80082e0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008246:	2b08      	cmp	r3, #8
 8008248:	d827      	bhi.n	800829a <UART_SetConfig+0x4a6>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0x45c>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008275 	.word	0x08008275
 8008254:	0800827d 	.word	0x0800827d
 8008258:	08008285 	.word	0x08008285
 800825c:	0800829b 	.word	0x0800829b
 8008260:	0800828b 	.word	0x0800828b
 8008264:	0800829b 	.word	0x0800829b
 8008268:	0800829b 	.word	0x0800829b
 800826c:	0800829b 	.word	0x0800829b
 8008270:	08008293 	.word	0x08008293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008274:	f7fe f8e4 	bl	8006440 <HAL_RCC_GetPCLK1Freq>
 8008278:	61f8      	str	r0, [r7, #28]
        break;
 800827a:	e014      	b.n	80082a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800827c:	f7fe f8f6 	bl	800646c <HAL_RCC_GetPCLK2Freq>
 8008280:	61f8      	str	r0, [r7, #28]
        break;
 8008282:	e010      	b.n	80082a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <UART_SetConfig+0x508>)
 8008286:	61fb      	str	r3, [r7, #28]
        break;
 8008288:	e00d      	b.n	80082a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fe f841 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 800828e:	61f8      	str	r0, [r7, #28]
        break;
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008296:	61fb      	str	r3, [r7, #28]
        break;
 8008298:	e005      	b.n	80082a6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80082a4:	bf00      	nop
    }

    if (pclk != 0U)
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d019      	beq.n	80082e0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	085a      	lsrs	r2, r3, #1
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80082be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b0f      	cmp	r3, #15
 80082c4:	d909      	bls.n	80082da <UART_SetConfig+0x4e6>
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082cc:	d205      	bcs.n	80082da <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60da      	str	r2, [r3, #12]
 80082d8:	e002      	b.n	80082e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3728      	adds	r7, #40	; 0x28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082fa:	bf00      	nop
 80082fc:	00f42400 	.word	0x00f42400

08008300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01a      	beq.n	8008416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083fe:	d10a      	bne.n	8008416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008454:	f7f9 fe7e 	bl	8002154 <HAL_GetTick>
 8008458:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b08      	cmp	r3, #8
 8008466:	d10e      	bne.n	8008486 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f82d 	bl	80084d6 <UART_WaitOnFlagUntilTimeout>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e023      	b.n	80084ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d10e      	bne.n	80084b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f817 	bl	80084d6 <UART_WaitOnFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e00d      	b.n	80084ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2220      	movs	r2, #32
 80084bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b09c      	sub	sp, #112	; 0x70
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e6:	e0a5      	b.n	8008634 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ee:	f000 80a1 	beq.w	8008634 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f2:	f7f9 fe2f 	bl	8002154 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084fe:	429a      	cmp	r2, r3
 8008500:	d302      	bcc.n	8008508 <UART_WaitOnFlagUntilTimeout+0x32>
 8008502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008504:	2b00      	cmp	r3, #0
 8008506:	d13e      	bne.n	8008586 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800851c:	667b      	str	r3, [r7, #100]	; 0x64
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008528:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800852c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e6      	bne.n	8008508 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	663b      	str	r3, [r7, #96]	; 0x60
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3308      	adds	r3, #8
 8008558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800855a:	64ba      	str	r2, [r7, #72]	; 0x48
 800855c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e5      	bne.n	800853a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2220      	movs	r2, #32
 8008578:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e067      	b.n	8008656 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d04f      	beq.n	8008634 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a2:	d147      	bne.n	8008634 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
 80085ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e6      	bne.n	80085ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	613b      	str	r3, [r7, #16]
   return(result);
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008600:	623a      	str	r2, [r7, #32]
 8008602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	69f9      	ldr	r1, [r7, #28]
 8008606:	6a3a      	ldr	r2, [r7, #32]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	61bb      	str	r3, [r7, #24]
   return(result);
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e5      	bne.n	80085e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2220      	movs	r2, #32
 8008618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2220      	movs	r2, #32
 8008624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e010      	b.n	8008656 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	69da      	ldr	r2, [r3, #28]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	4013      	ands	r3, r2
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	429a      	cmp	r2, r3
 8008642:	bf0c      	ite	eq
 8008644:	2301      	moveq	r3, #1
 8008646:	2300      	movne	r3, #0
 8008648:	b2db      	uxtb	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	429a      	cmp	r2, r3
 8008650:	f43f af4a 	beq.w	80084e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3770      	adds	r7, #112	; 0x70
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b096      	sub	sp, #88	; 0x58
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	88fa      	ldrh	r2, [r7, #6]
 8008678:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2222      	movs	r2, #34	; 0x22
 8008688:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	2b00      	cmp	r3, #0
 8008690:	d02b      	beq.n	80086ea <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008696:	4a42      	ldr	r2, [pc, #264]	; (80087a0 <UART_Start_Receive_DMA+0x140>)
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	4a41      	ldr	r2, [pc, #260]	; (80087a4 <UART_Start_Receive_DMA+0x144>)
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	4a40      	ldr	r2, [pc, #256]	; (80087a8 <UART_Start_Receive_DMA+0x148>)
 80086a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ae:	2200      	movs	r2, #0
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	4619      	mov	r1, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	461a      	mov	r2, r3
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	f7fa fa9d 	bl	8002c04 <HAL_DMA_Start_IT>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2210      	movs	r2, #16
 80086d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2220      	movs	r2, #32
 80086e4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e055      	b.n	8008796 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d018      	beq.n	800872c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870e:	657b      	str	r3, [r7, #84]	; 0x54
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008718:	64bb      	str	r3, [r7, #72]	; 0x48
 800871a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800871e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e6      	bne.n	80086fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3308      	adds	r3, #8
 8008732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	f043 0301 	orr.w	r3, r3, #1
 8008742:	653b      	str	r3, [r7, #80]	; 0x50
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800874c:	637a      	str	r2, [r7, #52]	; 0x34
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	613b      	str	r3, [r7, #16]
   return(result);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008780:	623a      	str	r2, [r7, #32]
 8008782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	69f9      	ldr	r1, [r7, #28]
 8008786:	6a3a      	ldr	r2, [r7, #32]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	61bb      	str	r3, [r7, #24]
   return(result);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e5      	bne.n	8008760 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3758      	adds	r7, #88	; 0x58
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	080088bf 	.word	0x080088bf
 80087a4:	080089e3 	.word	0x080089e3
 80087a8:	08008a1b 	.word	0x08008a1b

080087ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b089      	sub	sp, #36	; 0x24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	6979      	ldr	r1, [r7, #20]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	613b      	str	r3, [r7, #16]
   return(result);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e6      	bne.n	80087b4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	679a      	str	r2, [r3, #120]	; 0x78
}
 80087ec:	bf00      	nop
 80087ee:	3724      	adds	r7, #36	; 0x24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b095      	sub	sp, #84	; 0x54
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881e:	643b      	str	r3, [r7, #64]	; 0x40
 8008820:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	61fb      	str	r3, [r7, #28]
   return(result);
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f023 0301 	bic.w	r3, r3, #1
 8008848:	64bb      	str	r3, [r7, #72]	; 0x48
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886a:	2b01      	cmp	r3, #1
 800886c:	d118      	bne.n	80088a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	60bb      	str	r3, [r7, #8]
   return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f023 0310 	bic.w	r3, r3, #16
 8008882:	647b      	str	r3, [r7, #68]	; 0x44
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	461a      	mov	r2, r3
 800888a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	6979      	ldr	r1, [r7, #20]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	613b      	str	r3, [r7, #16]
   return(result);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e6      	bne.n	800886e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2220      	movs	r2, #32
 80088a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80088b2:	bf00      	nop
 80088b4:	3754      	adds	r7, #84	; 0x54
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b09c      	sub	sp, #112	; 0x70
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d170      	bne.n	80089bc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	2200      	movs	r2, #0
 80088de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80088f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008900:	65bb      	str	r3, [r7, #88]	; 0x58
 8008902:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800890e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	667b      	str	r3, [r7, #100]	; 0x64
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008934:	647a      	str	r2, [r7, #68]	; 0x44
 8008936:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800893a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e5      	bne.n	8008914 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	623b      	str	r3, [r7, #32]
   return(result);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800895e:	663b      	str	r3, [r7, #96]	; 0x60
 8008960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008968:	633a      	str	r2, [r7, #48]	; 0x30
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800896e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e5      	bne.n	8008948 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	2220      	movs	r2, #32
 8008980:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008986:	2b01      	cmp	r3, #1
 8008988:	d118      	bne.n	80089bc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60fb      	str	r3, [r7, #12]
   return(result);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	617b      	str	r3, [r7, #20]
   return(result);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d107      	bne.n	80089d4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089ca:	4619      	mov	r1, r3
 80089cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089ce:	f7f8 f9af 	bl	8000d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089d2:	e002      	b.n	80089da <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80089d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089d6:	f7ff f9ef 	bl	8007db8 <HAL_UART_RxCpltCallback>
}
 80089da:	bf00      	nop
 80089dc:	3770      	adds	r7, #112	; 0x70
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d109      	bne.n	8008a0c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4619      	mov	r1, r3
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7f8 f993 	bl	8000d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a0a:	e002      	b.n	8008a12 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff f9dd 	bl	8007dcc <HAL_UART_RxHalfCpltCallback>
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b086      	sub	sp, #24
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3e:	2b80      	cmp	r3, #128	; 0x80
 8008a40:	d109      	bne.n	8008a56 <UART_DMAError+0x3c>
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b21      	cmp	r3, #33	; 0x21
 8008a46:	d106      	bne.n	8008a56 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008a50:	6978      	ldr	r0, [r7, #20]
 8008a52:	f7ff feab 	bl	80087ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b40      	cmp	r3, #64	; 0x40
 8008a62:	d109      	bne.n	8008a78 <UART_DMAError+0x5e>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b22      	cmp	r3, #34	; 0x22
 8008a68:	d106      	bne.n	8008a78 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008a72:	6978      	ldr	r0, [r7, #20]
 8008a74:	f7ff fec0 	bl	80087f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a7e:	f043 0210 	orr.w	r2, r3, #16
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a88:	6978      	ldr	r0, [r7, #20]
 8008a8a:	f7ff f9a9 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a8e:	bf00      	nop
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff f993 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b088      	sub	sp, #32
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6979      	ldr	r1, [r7, #20]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	613b      	str	r3, [r7, #16]
   return(result);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e6      	bne.n	8008aca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff f94b 	bl	8007da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b0e:	bf00      	nop
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b08c      	sub	sp, #48	; 0x30
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	4613      	mov	r3, r2
 8008b36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d14a      	bne.n	8008bd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e043      	b.n	8008bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d101      	bne.n	8008b5e <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e03c      	b.n	8008bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008b6c:	88fb      	ldrh	r3, [r7, #6]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7ff fd74 	bl	8008660 <UART_Start_Receive_DMA>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d124      	bne.n	8008bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d11d      	bne.n	8008bca <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2210      	movs	r2, #16
 8008b94:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f043 0310 	orr.w	r3, r3, #16
 8008baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6a39      	ldr	r1, [r7, #32]
 8008bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e6      	bne.n	8008b96 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8008bc8:	e002      	b.n	8008bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bd4:	e000      	b.n	8008bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8008bd6:	2302      	movs	r3, #2
  }
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3730      	adds	r7, #48	; 0x30
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008be0:	b084      	sub	sp, #16
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	f107 0014 	add.w	r0, r7, #20
 8008bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	b004      	add	sp, #16
 8008c00:	4770      	bx	lr

08008c02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c12:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008c16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c38:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008c3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	4013      	ands	r3, r2
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c80:	b084      	sub	sp, #16
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	f107 0014 	add.w	r0, r7, #20
 8008c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	b004      	add	sp, #16
 8008cc0:	4770      	bx	lr
	...

08008cc4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	78db      	ldrb	r3, [r3, #3]
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d81f      	bhi.n	8008d36 <USB_ActivateEndpoint+0x72>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <USB_ActivateEndpoint+0x38>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d29 	.word	0x08008d29
 8008d04:	08008d3f 	.word	0x08008d3f
 8008d08:	08008d1b 	.word	0x08008d1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008d0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008d18:	e012      	b.n	8008d40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008d1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008d22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008d26:	e00b      	b.n	8008d40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008d28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008d34:	e004      	b.n	8008d40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008d3c:	e000      	b.n	8008d40 <USB_ActivateEndpoint+0x7c>
      break;
 8008d3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	441a      	add	r2, r3
 8008d4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	b21b      	sxth	r3, r3
 8008d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7a:	b21a      	sxth	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	b21b      	sxth	r3, r3
 8008d82:	4313      	orrs	r3, r2
 8008d84:	b21b      	sxth	r3, r3
 8008d86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	7b1b      	ldrb	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f040 8149 	bne.w	8009048 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8084 	beq.w	8008ec8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	61bb      	str	r3, [r7, #24]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	00da      	lsls	r2, r3, #3
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	827b      	strh	r3, [r7, #18]
 8008e02:	8a7b      	ldrh	r3, [r7, #18]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01b      	beq.n	8008e44 <USB_ActivateEndpoint+0x180>
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	823b      	strh	r3, [r7, #16]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	441a      	add	r2, r3
 8008e2e:	8a3b      	ldrh	r3, [r7, #16]
 8008e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	78db      	ldrb	r3, [r3, #3]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d020      	beq.n	8008e8e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e62:	81bb      	strh	r3, [r7, #12]
 8008e64:	89bb      	ldrh	r3, [r7, #12]
 8008e66:	f083 0320 	eor.w	r3, r3, #32
 8008e6a:	81bb      	strh	r3, [r7, #12]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	441a      	add	r2, r3
 8008e76:	89bb      	ldrh	r3, [r7, #12]
 8008e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	8013      	strh	r3, [r2, #0]
 8008e8c:	e2a6      	b.n	80093dc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea4:	81fb      	strh	r3, [r7, #14]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	89fb      	ldrh	r3, [r7, #14]
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]
 8008ec6:	e289      	b.n	80093dc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	633b      	str	r3, [r7, #48]	; 0x30
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	4413      	add	r3, r2
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	00da      	lsls	r2, r3, #3
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	88db      	ldrh	r3, [r3, #6]
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	4413      	add	r3, r2
 8008f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	00da      	lsls	r2, r3, #3
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	4413      	add	r3, r2
 8008f1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	2b3e      	cmp	r3, #62	; 0x3e
 8008f26:	d918      	bls.n	8008f5a <USB_ActivateEndpoint+0x296>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <USB_ActivateEndpoint+0x27e>
 8008f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	029b      	lsls	r3, r3, #10
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	801a      	strh	r2, [r3, #0]
 8008f58:	e029      	b.n	8008fae <USB_ActivateEndpoint+0x2ea>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d112      	bne.n	8008f88 <USB_ActivateEndpoint+0x2c4>
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	801a      	strh	r2, [r3, #0]
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	e012      	b.n	8008fae <USB_ActivateEndpoint+0x2ea>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <USB_ActivateEndpoint+0x2de>
 8008f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	029b      	lsls	r3, r3, #10
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	847b      	strh	r3, [r7, #34]	; 0x22
 8008fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01b      	beq.n	8008ffe <USB_ActivateEndpoint+0x33a>
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fdc:	843b      	strh	r3, [r7, #32]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	441a      	add	r2, r3
 8008fe8:	8c3b      	ldrh	r3, [r7, #32]
 8008fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009014:	83fb      	strh	r3, [r7, #30]
 8009016:	8bfb      	ldrh	r3, [r7, #30]
 8009018:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800901c:	83fb      	strh	r3, [r7, #30]
 800901e:	8bfb      	ldrh	r3, [r7, #30]
 8009020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009024:	83fb      	strh	r3, [r7, #30]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	441a      	add	r2, r3
 8009030:	8bfb      	ldrh	r3, [r7, #30]
 8009032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800903a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009042:	b29b      	uxth	r3, r3
 8009044:	8013      	strh	r3, [r2, #0]
 8009046:	e1c9      	b.n	80093dc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	78db      	ldrb	r3, [r3, #3]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d11e      	bne.n	800908e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009066:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	441a      	add	r2, r3
 8009074:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800907c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009080:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009088:	b29b      	uxth	r3, r3
 800908a:	8013      	strh	r3, [r2, #0]
 800908c:	e01d      	b.n	80090ca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80090a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	441a      	add	r2, r3
 80090b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80090b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	461a      	mov	r2, r3
 80090d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090da:	4413      	add	r3, r2
 80090dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	00da      	lsls	r2, r3, #3
 80090e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	891b      	ldrh	r3, [r3, #8]
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	657b      	str	r3, [r7, #84]	; 0x54
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009108:	b29b      	uxth	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800910e:	4413      	add	r3, r2
 8009110:	657b      	str	r3, [r7, #84]	; 0x54
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	00da      	lsls	r2, r3, #3
 8009118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800911a:	4413      	add	r3, r2
 800911c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009120:	653b      	str	r3, [r7, #80]	; 0x50
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	895b      	ldrh	r3, [r3, #10]
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009130:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f040 8093 	bne.w	8009262 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800914c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01b      	beq.n	8009190 <USB_ActivateEndpoint+0x4cc>
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	441a      	add	r2, r3
 800917a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800917c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918c:	b29b      	uxth	r3, r3
 800918e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800919e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01b      	beq.n	80091e0 <USB_ActivateEndpoint+0x51c>
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091be:	877b      	strh	r3, [r7, #58]	; 0x3a
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	441a      	add	r2, r3
 80091ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80091cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091dc:	b29b      	uxth	r3, r3
 80091de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80091f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80091fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8009200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009202:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009206:	873b      	strh	r3, [r7, #56]	; 0x38
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	441a      	add	r2, r3
 8009212:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800921c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009224:	b29b      	uxth	r3, r3
 8009226:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800923e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800924c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925c:	b29b      	uxth	r3, r3
 800925e:	8013      	strh	r3, [r2, #0]
 8009260:	e0bc      	b.n	80093dc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009272:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01d      	beq.n	80092ba <USB_ActivateEndpoint+0x5f6>
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009294:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	441a      	add	r2, r3
 80092a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80092a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80092ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80092ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01d      	beq.n	8009312 <USB_ActivateEndpoint+0x64e>
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	441a      	add	r2, r3
 80092fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80092fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800930a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800930e:	b29b      	uxth	r3, r3
 8009310:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	78db      	ldrb	r3, [r3, #3]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d024      	beq.n	8009364 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009330:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009334:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009338:	f083 0320 	eor.w	r3, r3, #32
 800933c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800934e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935e:	b29b      	uxth	r3, r3
 8009360:	8013      	strh	r3, [r2, #0]
 8009362:	e01d      	b.n	80093a0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	441a      	add	r2, r3
 8009388:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800938c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939c:	b29b      	uxth	r3, r3
 800939e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	441a      	add	r2, r3
 80093c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80093dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3774      	adds	r7, #116	; 0x74
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b08d      	sub	sp, #52	; 0x34
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	7b1b      	ldrb	r3, [r3, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 808e 	bne.w	800951c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d044      	beq.n	8009492 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	81bb      	strh	r3, [r7, #12]
 8009416:	89bb      	ldrh	r3, [r7, #12]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01b      	beq.n	8009458 <USB_DeactivateEndpoint+0x6c>
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009436:	817b      	strh	r3, [r7, #10]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	441a      	add	r2, r3
 8009442:	897b      	ldrh	r3, [r7, #10]
 8009444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800944c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009450:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009454:	b29b      	uxth	r3, r3
 8009456:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800946e:	813b      	strh	r3, [r7, #8]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	441a      	add	r2, r3
 800947a:	893b      	ldrh	r3, [r7, #8]
 800947c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800948c:	b29b      	uxth	r3, r3
 800948e:	8013      	strh	r3, [r2, #0]
 8009490:	e192      	b.n	80097b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	827b      	strh	r3, [r7, #18]
 80094a0:	8a7b      	ldrh	r3, [r7, #18]
 80094a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01b      	beq.n	80094e2 <USB_DeactivateEndpoint+0xf6>
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c0:	823b      	strh	r3, [r7, #16]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	441a      	add	r2, r3
 80094cc:	8a3b      	ldrh	r3, [r7, #16]
 80094ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094de:	b29b      	uxth	r3, r3
 80094e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f8:	81fb      	strh	r3, [r7, #14]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	441a      	add	r2, r3
 8009504:	89fb      	ldrh	r3, [r7, #14]
 8009506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800950a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800950e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009516:	b29b      	uxth	r3, r3
 8009518:	8013      	strh	r3, [r2, #0]
 800951a:	e14d      	b.n	80097b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f040 80a5 	bne.w	8009670 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	843b      	strh	r3, [r7, #32]
 8009534:	8c3b      	ldrh	r3, [r7, #32]
 8009536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01b      	beq.n	8009576 <USB_DeactivateEndpoint+0x18a>
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	83fb      	strh	r3, [r7, #30]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	8bfb      	ldrh	r3, [r7, #30]
 8009562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800956a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800956e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009572:	b29b      	uxth	r3, r3
 8009574:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	83bb      	strh	r3, [r7, #28]
 8009584:	8bbb      	ldrh	r3, [r7, #28]
 8009586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01b      	beq.n	80095c6 <USB_DeactivateEndpoint+0x1da>
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	b29b      	uxth	r3, r3
 800959c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a4:	837b      	strh	r3, [r7, #26]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	441a      	add	r2, r3
 80095b0:	8b7b      	ldrh	r3, [r7, #26]
 80095b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095dc:	833b      	strh	r3, [r7, #24]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	441a      	add	r2, r3
 80095e8:	8b3b      	ldrh	r3, [r7, #24]
 80095ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009614:	82fb      	strh	r3, [r7, #22]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	441a      	add	r2, r3
 8009620:	8afb      	ldrh	r3, [r7, #22]
 8009622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800962a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009632:	b29b      	uxth	r3, r3
 8009634:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964c:	82bb      	strh	r3, [r7, #20]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	441a      	add	r2, r3
 8009658:	8abb      	ldrh	r3, [r7, #20]
 800965a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800965e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966a:	b29b      	uxth	r3, r3
 800966c:	8013      	strh	r3, [r2, #0]
 800966e:	e0a3      	b.n	80097b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800967e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01b      	beq.n	80096c0 <USB_DeactivateEndpoint+0x2d4>
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800969a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	441a      	add	r2, r3
 80096aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80096ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80096ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01b      	beq.n	8009710 <USB_DeactivateEndpoint+0x324>
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	441a      	add	r2, r3
 80096fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800970c:	b29b      	uxth	r3, r3
 800970e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009726:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	441a      	add	r2, r3
 8009732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800973c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009744:	b29b      	uxth	r3, r3
 8009746:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800975a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800975e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	441a      	add	r2, r3
 800976a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800976c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977c:	b29b      	uxth	r3, r3
 800977e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009796:	847b      	strh	r3, [r7, #34]	; 0x22
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	441a      	add	r2, r3
 80097a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3734      	adds	r7, #52	; 0x34
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b0c2      	sub	sp, #264	; 0x108
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d4:	6018      	str	r0, [r3, #0]
 80097d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	f040 867b 	bne.w	800a4e8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80097f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699a      	ldr	r2, [r3, #24]
 80097fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	429a      	cmp	r2, r3
 800980c:	d908      	bls.n	8009820 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800980e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800981e:	e007      	b.n	8009830 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	7b1b      	ldrb	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d13a      	bne.n	80098b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6959      	ldr	r1, [r3, #20]
 800984c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	88da      	ldrh	r2, [r3, #6]
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985c:	b29b      	uxth	r3, r3
 800985e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009862:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009866:	6800      	ldr	r0, [r0, #0]
 8009868:	f001 fc55 	bl	800b116 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800986c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009886:	b29b      	uxth	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	4413      	add	r3, r2
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	00da      	lsls	r2, r3, #3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	4413      	add	r3, r2
 80098a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	801a      	strh	r2, [r3, #0]
 80098b2:	f000 bde3 	b.w	800a47c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80098b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	78db      	ldrb	r3, [r3, #3]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	f040 843a 	bne.w	800a13c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80098c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6a1a      	ldr	r2, [r3, #32]
 80098d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	f240 83b7 	bls.w	800a054 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80098e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	441a      	add	r2, r3
 800992a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800992e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009936:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800993a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993e:	b29b      	uxth	r3, r3
 8009940:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009952:	1ad2      	subs	r2, r2, r3
 8009954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 81b3 	beq.w	8009cee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	633b      	str	r3, [r7, #48]	; 0x30
 8009994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d16d      	bne.n	8009a80 <USB_EPStartXfer+0x2ba>
 80099a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80099b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099be:	b29b      	uxth	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	4413      	add	r3, r2
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	00da      	lsls	r2, r3, #3
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	4413      	add	r3, r2
 80099da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e4:	2b3e      	cmp	r3, #62	; 0x3e
 80099e6:	d91c      	bls.n	8009a22 <USB_EPStartXfer+0x25c>
 80099e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80099f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <USB_EPStartXfer+0x242>
 80099fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009a02:	3b01      	subs	r3, #1
 8009a04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	029b      	lsls	r3, r3, #10
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	801a      	strh	r2, [r3, #0]
 8009a20:	e053      	b.n	8009aca <USB_EPStartXfer+0x304>
 8009a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d112      	bne.n	8009a50 <USB_EPStartXfer+0x28a>
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	801a      	strh	r2, [r3, #0]
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	e03c      	b.n	8009aca <USB_EPStartXfer+0x304>
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a54:	085b      	lsrs	r3, r3, #1
 8009a56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <USB_EPStartXfer+0x2aa>
 8009a66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	029b      	lsls	r3, r3, #10
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	801a      	strh	r2, [r3, #0]
 8009a7e:	e024      	b.n	8009aca <USB_EPStartXfer+0x304>
 8009a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d11c      	bne.n	8009aca <USB_EPStartXfer+0x304>
 8009a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	4413      	add	r3, r2
 8009aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	00da      	lsls	r2, r3, #3
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	895b      	ldrh	r3, [r3, #10]
 8009ad6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6959      	ldr	r1, [r3, #20]
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009af0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009af4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009af8:	6800      	ldr	r0, [r0, #0]
 8009afa:	f001 fb0c 	bl	800b116 <USB_WritePMA>
            ep->xfer_buff += len;
 8009afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695a      	ldr	r2, [r3, #20]
 8009b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b0e:	441a      	add	r2, r3
 8009b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6a1a      	ldr	r2, [r3, #32]
 8009b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d90f      	bls.n	8009b58 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	6a1a      	ldr	r2, [r3, #32]
 8009b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	621a      	str	r2, [r3, #32]
 8009b56:	e00e      	b.n	8009b76 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2200      	movs	r2, #0
 8009b74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d16d      	bne.n	8009c62 <USB_EPStartXfer+0x49c>
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	61bb      	str	r3, [r7, #24]
 8009baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	00da      	lsls	r2, r3, #3
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009bc8:	d91c      	bls.n	8009c04 <USB_EPStartXfer+0x43e>
 8009bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bce:	095b      	lsrs	r3, r3, #5
 8009bd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd8:	f003 031f 	and.w	r3, r3, #31
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d104      	bne.n	8009bea <USB_EPStartXfer+0x424>
 8009be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009be4:	3b01      	subs	r3, #1
 8009be6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	029b      	lsls	r3, r3, #10
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	801a      	strh	r2, [r3, #0]
 8009c02:	e059      	b.n	8009cb8 <USB_EPStartXfer+0x4f2>
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d112      	bne.n	8009c32 <USB_EPStartXfer+0x46c>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	801a      	strh	r2, [r3, #0]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	e042      	b.n	8009cb8 <USB_EPStartXfer+0x4f2>
 8009c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <USB_EPStartXfer+0x48c>
 8009c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	029b      	lsls	r3, r3, #10
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	e02a      	b.n	8009cb8 <USB_EPStartXfer+0x4f2>
 8009c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d122      	bne.n	8009cb8 <USB_EPStartXfer+0x4f2>
 8009c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	623b      	str	r3, [r7, #32]
 8009c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	4413      	add	r3, r2
 8009c94:	623b      	str	r3, [r7, #32]
 8009c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	00da      	lsls	r2, r3, #3
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cac:	61fb      	str	r3, [r7, #28]
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	891b      	ldrh	r3, [r3, #8]
 8009cc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6959      	ldr	r1, [r3, #20]
 8009cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009cde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ce2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ce6:	6800      	ldr	r0, [r0, #0]
 8009ce8:	f001 fa15 	bl	800b116 <USB_WritePMA>
 8009cec:	e3c6      	b.n	800a47c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d16d      	bne.n	8009dda <USB_EPStartXfer+0x614>
 8009cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d1e:	4413      	add	r3, r2
 8009d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	00da      	lsls	r2, r3, #3
 8009d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d32:	4413      	add	r3, r2
 8009d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d38:	647b      	str	r3, [r7, #68]	; 0x44
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d40:	d91c      	bls.n	8009d7c <USB_EPStartXfer+0x5b6>
 8009d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d46:	095b      	lsrs	r3, r3, #5
 8009d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d50:	f003 031f 	and.w	r3, r3, #31
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d104      	bne.n	8009d62 <USB_EPStartXfer+0x59c>
 8009d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	029b      	lsls	r3, r3, #10
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d78:	801a      	strh	r2, [r3, #0]
 8009d7a:	e059      	b.n	8009e30 <USB_EPStartXfer+0x66a>
 8009d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d112      	bne.n	8009daa <USB_EPStartXfer+0x5e4>
 8009d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d92:	801a      	strh	r2, [r3, #0]
 8009d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	e042      	b.n	8009e30 <USB_EPStartXfer+0x66a>
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <USB_EPStartXfer+0x604>
 8009dc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	029b      	lsls	r3, r3, #10
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dd6:	801a      	strh	r2, [r3, #0]
 8009dd8:	e02a      	b.n	8009e30 <USB_EPStartXfer+0x66a>
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d122      	bne.n	8009e30 <USB_EPStartXfer+0x66a>
 8009dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	653b      	str	r3, [r7, #80]	; 0x50
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0a:	4413      	add	r3, r2
 8009e0c:	653b      	str	r3, [r7, #80]	; 0x50
 8009e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	00da      	lsls	r2, r3, #3
 8009e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1e:	4413      	add	r3, r2
 8009e20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	891b      	ldrh	r3, [r3, #8]
 8009e3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6959      	ldr	r1, [r3, #20]
 8009e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e5e:	6800      	ldr	r0, [r0, #0]
 8009e60:	f001 f959 	bl	800b116 <USB_WritePMA>
            ep->xfer_buff += len;
 8009e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	695a      	ldr	r2, [r3, #20]
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e74:	441a      	add	r2, r3
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6a1a      	ldr	r2, [r3, #32]
 8009e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d90f      	bls.n	8009ebe <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	621a      	str	r2, [r3, #32]
 8009ebc:	e00e      	b.n	8009edc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d16d      	bne.n	8009fd4 <USB_EPStartXfer+0x80e>
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	461a      	mov	r2, r3
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	4413      	add	r3, r2
 8009f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	00da      	lsls	r2, r3, #3
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f32:	637b      	str	r3, [r7, #52]	; 0x34
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f38:	2b3e      	cmp	r3, #62	; 0x3e
 8009f3a:	d91c      	bls.n	8009f76 <USB_EPStartXfer+0x7b0>
 8009f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f40:	095b      	lsrs	r3, r3, #5
 8009f42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4a:	f003 031f 	and.w	r3, r3, #31
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d104      	bne.n	8009f5c <USB_EPStartXfer+0x796>
 8009f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f56:	3b01      	subs	r3, #1
 8009f58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	029b      	lsls	r3, r3, #10
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f72:	801a      	strh	r2, [r3, #0]
 8009f74:	e053      	b.n	800a01e <USB_EPStartXfer+0x858>
 8009f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d112      	bne.n	8009fa4 <USB_EPStartXfer+0x7de>
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8c:	801a      	strh	r2, [r3, #0]
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	e03c      	b.n	800a01e <USB_EPStartXfer+0x858>
 8009fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d004      	beq.n	8009fc4 <USB_EPStartXfer+0x7fe>
 8009fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	029b      	lsls	r3, r3, #10
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	e024      	b.n	800a01e <USB_EPStartXfer+0x858>
 8009fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	785b      	ldrb	r3, [r3, #1]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d11c      	bne.n	800a01e <USB_EPStartXfer+0x858>
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff8:	4413      	add	r3, r2
 8009ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8009ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	00da      	lsls	r2, r3, #3
 800a00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a00c:	4413      	add	r3, r2
 800a00e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a018:	b29a      	uxth	r2, r3
 800a01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	895b      	ldrh	r3, [r3, #10]
 800a02a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6959      	ldr	r1, [r3, #20]
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a044:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a048:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f001 f862 	bl	800b116 <USB_WritePMA>
 800a052:	e213      	b.n	800a47c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	b29b      	uxth	r3, r3
 800a082:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a08a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	441a      	add	r2, r3
 800a0a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a0ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e0:	4413      	add	r3, r2
 800a0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	00da      	lsls	r2, r3, #3
 800a0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a100:	b29a      	uxth	r2, r3
 800a102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a104:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6959      	ldr	r1, [r3, #20]
 800a122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a126:	b29b      	uxth	r3, r3
 800a128:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a12c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a130:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a134:	6800      	ldr	r0, [r0, #0]
 800a136:	f000 ffee 	bl	800b116 <USB_WritePMA>
 800a13a:	e19f      	b.n	800a47c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6a1a      	ldr	r2, [r3, #32]
 800a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14c:	1ad2      	subs	r2, r2, r3
 800a14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a15e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80bc 	beq.w	800a2fa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	673b      	str	r3, [r7, #112]	; 0x70
 800a18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d16d      	bne.n	800a27a <USB_EPStartXfer+0xab4>
 800a19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1be:	4413      	add	r3, r2
 800a1c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	00da      	lsls	r2, r3, #3
 800a1d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1de:	2b3e      	cmp	r3, #62	; 0x3e
 800a1e0:	d91c      	bls.n	800a21c <USB_EPStartXfer+0xa56>
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USB_EPStartXfer+0xa3c>
 800a1f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a202:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a206:	b29b      	uxth	r3, r3
 800a208:	029b      	lsls	r3, r3, #10
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a214:	b29a      	uxth	r2, r3
 800a216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a218:	801a      	strh	r2, [r3, #0]
 800a21a:	e053      	b.n	800a2c4 <USB_EPStartXfer+0xafe>
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a220:	2b00      	cmp	r3, #0
 800a222:	d112      	bne.n	800a24a <USB_EPStartXfer+0xa84>
 800a224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a22e:	b29a      	uxth	r2, r3
 800a230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a232:	801a      	strh	r2, [r3, #0]
 800a234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a242:	b29a      	uxth	r2, r3
 800a244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	e03c      	b.n	800a2c4 <USB_EPStartXfer+0xafe>
 800a24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <USB_EPStartXfer+0xaa4>
 800a260:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a264:	3301      	adds	r3, #1
 800a266:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a26a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a26e:	b29b      	uxth	r3, r3
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	b29a      	uxth	r2, r3
 800a274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a276:	801a      	strh	r2, [r3, #0]
 800a278:	e024      	b.n	800a2c4 <USB_EPStartXfer+0xafe>
 800a27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d11c      	bne.n	800a2c4 <USB_EPStartXfer+0xafe>
 800a28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a298:	b29b      	uxth	r3, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a29e:	4413      	add	r3, r2
 800a2a0:	673b      	str	r3, [r7, #112]	; 0x70
 800a2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	00da      	lsls	r2, r3, #3
 800a2b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	895b      	ldrh	r3, [r3, #10]
 800a2d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6959      	ldr	r1, [r3, #20]
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a2ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2f2:	6800      	ldr	r0, [r0, #0]
 800a2f4:	f000 ff0f 	bl	800b116 <USB_WritePMA>
 800a2f8:	e0c0      	b.n	800a47c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	785b      	ldrb	r3, [r3, #1]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d16d      	bne.n	800a3e6 <USB_EPStartXfer+0xc20>
 800a30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a324:	b29b      	uxth	r3, r3
 800a326:	461a      	mov	r2, r3
 800a328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a32a:	4413      	add	r3, r2
 800a32c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	00da      	lsls	r2, r3, #3
 800a33c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a33e:	4413      	add	r3, r2
 800a340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a344:	67bb      	str	r3, [r7, #120]	; 0x78
 800a346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34a:	2b3e      	cmp	r3, #62	; 0x3e
 800a34c:	d91c      	bls.n	800a388 <USB_EPStartXfer+0xbc2>
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <USB_EPStartXfer+0xba8>
 800a364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a368:	3b01      	subs	r3, #1
 800a36a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a36e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a372:	b29b      	uxth	r3, r3
 800a374:	029b      	lsls	r3, r3, #10
 800a376:	b29b      	uxth	r3, r3
 800a378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a380:	b29a      	uxth	r2, r3
 800a382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a384:	801a      	strh	r2, [r3, #0]
 800a386:	e05f      	b.n	800a448 <USB_EPStartXfer+0xc82>
 800a388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d112      	bne.n	800a3b6 <USB_EPStartXfer+0xbf0>
 800a390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3b2:	801a      	strh	r2, [r3, #0]
 800a3b4:	e048      	b.n	800a448 <USB_EPStartXfer+0xc82>
 800a3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <USB_EPStartXfer+0xc10>
 800a3cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a3d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	029b      	lsls	r3, r3, #10
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	e030      	b.n	800a448 <USB_EPStartXfer+0xc82>
 800a3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	785b      	ldrb	r3, [r3, #1]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d128      	bne.n	800a448 <USB_EPStartXfer+0xc82>
 800a3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a412:	b29b      	uxth	r3, r3
 800a414:	461a      	mov	r2, r3
 800a416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a41a:	4413      	add	r3, r2
 800a41c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	00da      	lsls	r2, r3, #3
 800a42e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a432:	4413      	add	r3, r2
 800a434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a446:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	891b      	ldrh	r3, [r3, #8]
 800a454:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6959      	ldr	r1, [r3, #20]
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a46e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a472:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a476:	6800      	ldr	r0, [r0, #0]
 800a478:	f000 fe4d 	bl	800b116 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a2:	817b      	strh	r3, [r7, #10]
 800a4a4:	897b      	ldrh	r3, [r7, #10]
 800a4a6:	f083 0310 	eor.w	r3, r3, #16
 800a4aa:	817b      	strh	r3, [r7, #10]
 800a4ac:	897b      	ldrh	r3, [r7, #10]
 800a4ae:	f083 0320 	eor.w	r3, r3, #32
 800a4b2:	817b      	strh	r3, [r7, #10]
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	441a      	add	r2, r3
 800a4ce:	897b      	ldrh	r3, [r7, #10]
 800a4d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	8013      	strh	r3, [r2, #0]
 800a4e4:	f000 bc9f 	b.w	800ae26 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	7b1b      	ldrb	r3, [r3, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f040 80ae 	bne.w	800a656 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699a      	ldr	r2, [r3, #24]
 800a506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	429a      	cmp	r2, r3
 800a514:	d917      	bls.n	800a546 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a536:	1ad2      	subs	r2, r2, r3
 800a538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	619a      	str	r2, [r3, #24]
 800a544:	e00e      	b.n	800a564 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2200      	movs	r2, #0
 800a562:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a580:	b29b      	uxth	r3, r3
 800a582:	461a      	mov	r2, r3
 800a584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a588:	4413      	add	r3, r2
 800a58a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	00da      	lsls	r2, r3, #3
 800a59c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a5b0:	d91d      	bls.n	800a5ee <USB_EPStartXfer+0xe28>
 800a5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b6:	095b      	lsrs	r3, r3, #5
 800a5b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c0:	f003 031f 	and.w	r3, r3, #31
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d104      	bne.n	800a5d2 <USB_EPStartXfer+0xe0c>
 800a5c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ea:	801a      	strh	r2, [r3, #0]
 800a5ec:	e3e1      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d116      	bne.n	800a624 <USB_EPStartXfer+0xe5e>
 800a5f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a602:	b29a      	uxth	r2, r3
 800a604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a608:	801a      	strh	r2, [r3, #0]
 800a60a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b29b      	uxth	r3, r3
 800a612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a620:	801a      	strh	r2, [r3, #0]
 800a622:	e3c6      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	085b      	lsrs	r3, r3, #1
 800a62a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	d004      	beq.n	800a644 <USB_EPStartXfer+0xe7e>
 800a63a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a63e:	3301      	adds	r3, #1
 800a640:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a644:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a648:	b29b      	uxth	r3, r3
 800a64a:	029b      	lsls	r3, r3, #10
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a652:	801a      	strh	r2, [r3, #0]
 800a654:	e3ad      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	78db      	ldrb	r3, [r3, #3]
 800a662:	2b02      	cmp	r3, #2
 800a664:	f040 8200 	bne.w	800aa68 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f040 8091 	bne.w	800a79c <USB_EPStartXfer+0xfd6>
 800a67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a696:	b29b      	uxth	r3, r3
 800a698:	461a      	mov	r2, r3
 800a69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a69e:	4413      	add	r3, r2
 800a6a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	00da      	lsls	r2, r3, #3
 800a6b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b3e      	cmp	r3, #62	; 0x3e
 800a6ce:	d925      	bls.n	800a71c <USB_EPStartXfer+0xf56>
 800a6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	095b      	lsrs	r3, r3, #5
 800a6de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 031f 	and.w	r3, r3, #31
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d104      	bne.n	800a700 <USB_EPStartXfer+0xf3a>
 800a6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a704:	b29b      	uxth	r3, r3
 800a706:	029b      	lsls	r3, r3, #10
 800a708:	b29b      	uxth	r3, r3
 800a70a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a712:	b29a      	uxth	r2, r3
 800a714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	e074      	b.n	800a806 <USB_EPStartXfer+0x1040>
 800a71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d116      	bne.n	800a75a <USB_EPStartXfer+0xf94>
 800a72c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29b      	uxth	r3, r3
 800a734:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a738:	b29a      	uxth	r2, r3
 800a73a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a756:	801a      	strh	r2, [r3, #0]
 800a758:	e055      	b.n	800a806 <USB_EPStartXfer+0x1040>
 800a75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d004      	beq.n	800a78a <USB_EPStartXfer+0xfc4>
 800a780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a784:	3301      	adds	r3, #1
 800a786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78e:	b29b      	uxth	r3, r3
 800a790:	029b      	lsls	r3, r3, #10
 800a792:	b29a      	uxth	r2, r3
 800a794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a798:	801a      	strh	r2, [r3, #0]
 800a79a:	e034      	b.n	800a806 <USB_EPStartXfer+0x1040>
 800a79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	785b      	ldrb	r3, [r3, #1]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d12c      	bne.n	800a806 <USB_EPStartXfer+0x1040>
 800a7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	00da      	lsls	r2, r3, #3
 800a7e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a804:	801a      	strh	r2, [r3, #0]
 800a806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	785b      	ldrb	r3, [r3, #1]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f040 8091 	bne.w	800a948 <USB_EPStartXfer+0x1182>
 800a826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a842:	b29b      	uxth	r3, r3
 800a844:	461a      	mov	r2, r3
 800a846:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a84a:	4413      	add	r3, r2
 800a84c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	00da      	lsls	r2, r3, #3
 800a85e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a862:	4413      	add	r3, r2
 800a864:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	2b3e      	cmp	r3, #62	; 0x3e
 800a87a:	d925      	bls.n	800a8c8 <USB_EPStartXfer+0x1102>
 800a87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	095b      	lsrs	r3, r3, #5
 800a88a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 031f 	and.w	r3, r3, #31
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d104      	bne.n	800a8ac <USB_EPStartXfer+0x10e6>
 800a8a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	029b      	lsls	r3, r3, #10
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8c4:	801a      	strh	r2, [r3, #0]
 800a8c6:	e06d      	b.n	800a9a4 <USB_EPStartXfer+0x11de>
 800a8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d116      	bne.n	800a906 <USB_EPStartXfer+0x1140>
 800a8d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8ea:	801a      	strh	r2, [r3, #0]
 800a8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	e04e      	b.n	800a9a4 <USB_EPStartXfer+0x11de>
 800a906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <USB_EPStartXfer+0x1170>
 800a92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a930:	3301      	adds	r3, #1
 800a932:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	029b      	lsls	r3, r3, #10
 800a93e:	b29a      	uxth	r2, r3
 800a940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	e02d      	b.n	800a9a4 <USB_EPStartXfer+0x11de>
 800a948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	785b      	ldrb	r3, [r3, #1]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d125      	bne.n	800a9a4 <USB_EPStartXfer+0x11de>
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a966:	b29b      	uxth	r3, r3
 800a968:	461a      	mov	r2, r3
 800a96a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a96e:	4413      	add	r3, r2
 800a970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	00da      	lsls	r2, r3, #3
 800a982:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a986:	4413      	add	r3, r2
 800a988:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a98c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 81fe 	beq.w	800adb2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a9da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d005      	beq.n	800a9ee <USB_EPStartXfer+0x1228>
 800a9e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10d      	bne.n	800aa0a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a9f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f040 81db 	bne.w	800adb2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 81d4 	bne.w	800adb2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa30:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800aa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	441a      	add	r2, r3
 800aa4e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800aa52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	8013      	strh	r3, [r2, #0]
 800aa66:	e1a4      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	78db      	ldrb	r3, [r3, #3]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	f040 819a 	bne.w	800adae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	699a      	ldr	r2, [r3, #24]
 800aa86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d917      	bls.n	800aac6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800aa96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800aaa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	699a      	ldr	r2, [r3, #24]
 800aab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab6:	1ad2      	subs	r2, r2, r3
 800aab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	619a      	str	r2, [r3, #24]
 800aac4:	e00e      	b.n	800aae4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800aac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2200      	movs	r2, #0
 800aae2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d178      	bne.n	800abe6 <USB_EPStartXfer+0x1420>
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	461a      	mov	r2, r3
 800ab14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab18:	4413      	add	r3, r2
 800ab1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	00da      	lsls	r2, r3, #3
 800ab2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab30:	4413      	add	r3, r2
 800ab32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3e:	2b3e      	cmp	r3, #62	; 0x3e
 800ab40:	d91d      	bls.n	800ab7e <USB_EPStartXfer+0x13b8>
 800ab42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab46:	095b      	lsrs	r3, r3, #5
 800ab48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab50:	f003 031f 	and.w	r3, r3, #31
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d104      	bne.n	800ab62 <USB_EPStartXfer+0x139c>
 800ab58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	029b      	lsls	r3, r3, #10
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab7a:	801a      	strh	r2, [r3, #0]
 800ab7c:	e064      	b.n	800ac48 <USB_EPStartXfer+0x1482>
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d116      	bne.n	800abb4 <USB_EPStartXfer+0x13ee>
 800ab86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab98:	801a      	strh	r2, [r3, #0]
 800ab9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abaa:	b29a      	uxth	r2, r3
 800abac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abb0:	801a      	strh	r2, [r3, #0]
 800abb2:	e049      	b.n	800ac48 <USB_EPStartXfer+0x1482>
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	085b      	lsrs	r3, r3, #1
 800abba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <USB_EPStartXfer+0x140e>
 800abca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abce:	3301      	adds	r3, #1
 800abd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800abd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abd8:	b29b      	uxth	r3, r3
 800abda:	029b      	lsls	r3, r3, #10
 800abdc:	b29a      	uxth	r2, r3
 800abde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	e030      	b.n	800ac48 <USB_EPStartXfer+0x1482>
 800abe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d128      	bne.n	800ac48 <USB_EPStartXfer+0x1482>
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ac04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	461a      	mov	r2, r3
 800ac16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ac20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	00da      	lsls	r2, r3, #3
 800ac2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ac46:	801a      	strh	r2, [r3, #0]
 800ac48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d178      	bne.n	800ad58 <USB_EPStartXfer+0x1592>
 800ac66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	00da      	lsls	r2, r3, #3
 800ac9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aca2:	4413      	add	r3, r2
 800aca4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb0:	2b3e      	cmp	r3, #62	; 0x3e
 800acb2:	d91d      	bls.n	800acf0 <USB_EPStartXfer+0x152a>
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	095b      	lsrs	r3, r3, #5
 800acba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc2:	f003 031f 	and.w	r3, r3, #31
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d104      	bne.n	800acd4 <USB_EPStartXfer+0x150e>
 800acca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acce:	3b01      	subs	r3, #1
 800acd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acd8:	b29b      	uxth	r3, r3
 800acda:	029b      	lsls	r3, r3, #10
 800acdc:	b29b      	uxth	r3, r3
 800acde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800acec:	801a      	strh	r2, [r3, #0]
 800acee:	e060      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d116      	bne.n	800ad26 <USB_EPStartXfer+0x1560>
 800acf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad0a:	801a      	strh	r2, [r3, #0]
 800ad0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad22:	801a      	strh	r2, [r3, #0]
 800ad24:	e045      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
 800ad26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2a:	085b      	lsrs	r3, r3, #1
 800ad2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <USB_EPStartXfer+0x1580>
 800ad3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad40:	3301      	adds	r3, #1
 800ad42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	029b      	lsls	r3, r3, #10
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad54:	801a      	strh	r2, [r3, #0]
 800ad56:	e02c      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
 800ad58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	785b      	ldrb	r3, [r3, #1]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d124      	bne.n	800adb2 <USB_EPStartXfer+0x15ec>
 800ad68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad7e:	4413      	add	r3, r2
 800ad80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	00da      	lsls	r2, r3, #3
 800ad92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad96:	4413      	add	r3, r2
 800ad98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800adaa:	801a      	strh	r2, [r3, #0]
 800adac:	e001      	b.n	800adb2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e03a      	b.n	800ae28 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800add4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800addc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ade0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ade4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ade8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800adec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800adf0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800adf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	441a      	add	r2, r3
 800ae0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ae12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d020      	beq.n	800ae86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5a:	81bb      	strh	r3, [r7, #12]
 800ae5c:	89bb      	ldrh	r3, [r7, #12]
 800ae5e:	f083 0310 	eor.w	r3, r3, #16
 800ae62:	81bb      	strh	r3, [r7, #12]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	441a      	add	r2, r3
 800ae6e:	89bb      	ldrh	r3, [r7, #12]
 800ae70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	8013      	strh	r3, [r2, #0]
 800ae84:	e01f      	b.n	800aec6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9c:	81fb      	strh	r3, [r7, #14]
 800ae9e:	89fb      	ldrh	r3, [r7, #14]
 800aea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aea4:	81fb      	strh	r3, [r7, #14]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	441a      	add	r2, r3
 800aeb0:	89fb      	ldrh	r3, [r7, #14]
 800aeb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	7b1b      	ldrb	r3, [r3, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f040 809d 	bne.w	800b022 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d04c      	beq.n	800af8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	823b      	strh	r3, [r7, #16]
 800aefe:	8a3b      	ldrh	r3, [r7, #16]
 800af00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af04:	2b00      	cmp	r3, #0
 800af06:	d01b      	beq.n	800af40 <USB_EPClearStall+0x6c>
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	b29b      	uxth	r3, r3
 800af16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1e:	81fb      	strh	r3, [r7, #14]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	441a      	add	r2, r3
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	78db      	ldrb	r3, [r3, #3]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d06c      	beq.n	800b022 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af5e:	81bb      	strh	r3, [r7, #12]
 800af60:	89bb      	ldrh	r3, [r7, #12]
 800af62:	f083 0320 	eor.w	r3, r3, #32
 800af66:	81bb      	strh	r3, [r7, #12]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	441a      	add	r2, r3
 800af72:	89bb      	ldrh	r3, [r7, #12]
 800af74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af84:	b29b      	uxth	r3, r3
 800af86:	8013      	strh	r3, [r2, #0]
 800af88:	e04b      	b.n	800b022 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	82fb      	strh	r3, [r7, #22]
 800af98:	8afb      	ldrh	r3, [r7, #22]
 800af9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01b      	beq.n	800afda <USB_EPClearStall+0x106>
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb8:	82bb      	strh	r3, [r7, #20]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	441a      	add	r2, r3
 800afc4:	8abb      	ldrh	r3, [r7, #20]
 800afc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff0:	827b      	strh	r3, [r7, #18]
 800aff2:	8a7b      	ldrh	r3, [r7, #18]
 800aff4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aff8:	827b      	strh	r3, [r7, #18]
 800affa:	8a7b      	ldrh	r3, [r7, #18]
 800affc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b000:	827b      	strh	r3, [r7, #18]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	441a      	add	r2, r3
 800b00c:	8a7b      	ldrh	r3, [r7, #18]
 800b00e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01e:	b29b      	uxth	r3, r3
 800b020:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2203      	movs	r2, #3
 800b04c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	460b      	mov	r3, r1
 800b068:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2280      	movs	r2, #128	; 0x80
 800b074:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b086:	b480      	push	{r7}
 800b088:	b083      	sub	sp, #12
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b094:	b29b      	uxth	r3, r3
 800b096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b09a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b116:	b480      	push	{r7}
 800b118:	b08d      	sub	sp, #52	; 0x34
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	60f8      	str	r0, [r7, #12]
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	4611      	mov	r1, r2
 800b122:	461a      	mov	r2, r3
 800b124:	460b      	mov	r3, r1
 800b126:	80fb      	strh	r3, [r7, #6]
 800b128:	4613      	mov	r3, r2
 800b12a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b12c:	88bb      	ldrh	r3, [r7, #4]
 800b12e:	3301      	adds	r3, #1
 800b130:	085b      	lsrs	r3, r3, #1
 800b132:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b13c:	88fa      	ldrh	r2, [r7, #6]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	4413      	add	r3, r2
 800b142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b146:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b14c:	e01b      	b.n	800b186 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	3301      	adds	r3, #1
 800b158:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	b29b      	uxth	r3, r3
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	b29b      	uxth	r3, r3
 800b164:	461a      	mov	r2, r3
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	b29a      	uxth	r2, r3
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	3302      	adds	r3, #2
 800b178:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	3301      	adds	r3, #1
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	3b01      	subs	r3, #1
 800b184:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e0      	bne.n	800b14e <USB_WritePMA+0x38>
  }
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	3734      	adds	r7, #52	; 0x34
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b08b      	sub	sp, #44	; 0x2c
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	80fb      	strh	r3, [r7, #6]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b1b0:	88bb      	ldrh	r3, [r7, #4]
 800b1b2:	085b      	lsrs	r3, r3, #1
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1c0:	88fa      	ldrh	r2, [r7, #6]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1ca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b1d0:	e018      	b.n	800b204 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	3302      	adds	r3, #2
 800b1de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	0a1b      	lsrs	r3, r3, #8
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	3b01      	subs	r3, #1
 800b202:	627b      	str	r3, [r7, #36]	; 0x24
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e3      	bne.n	800b1d2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b20a:	88bb      	ldrh	r3, [r7, #4]
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d007      	beq.n	800b226 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	b2da      	uxtb	r2, r3
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	701a      	strb	r2, [r3, #0]
  }
}
 800b226:	bf00      	nop
 800b228:	372c      	adds	r7, #44	; 0x2c
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b23e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b242:	f002 fcd7 	bl	800dbf4 <USBD_static_malloc>
 800b246:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d105      	bne.n	800b25a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b256:	2302      	movs	r3, #2
 800b258:	e066      	b.n	800b328 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7c1b      	ldrb	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d119      	bne.n	800b29e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b26a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b26e:	2202      	movs	r2, #2
 800b270:	2181      	movs	r1, #129	; 0x81
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f002 faf6 	bl	800d864 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b27e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b282:	2202      	movs	r2, #2
 800b284:	2101      	movs	r1, #1
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f002 faec 	bl	800d864 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2210      	movs	r2, #16
 800b298:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b29c:	e016      	b.n	800b2cc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b29e:	2340      	movs	r3, #64	; 0x40
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	2181      	movs	r1, #129	; 0x81
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f002 fadd 	bl	800d864 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b2b0:	2340      	movs	r3, #64	; 0x40
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f002 fad4 	bl	800d864 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2210      	movs	r2, #16
 800b2c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	2182      	movs	r1, #130	; 0x82
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f002 fac6 	bl	800d864 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	7c1b      	ldrb	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d109      	bne.n	800b316 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b30c:	2101      	movs	r1, #1
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f002 fc24 	bl	800db5c <USBD_LL_PrepareReceive>
 800b314:	e007      	b.n	800b326 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b31c:	2340      	movs	r3, #64	; 0x40
 800b31e:	2101      	movs	r1, #1
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f002 fc1b 	bl	800db5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b33c:	2181      	movs	r1, #129	; 0x81
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f002 face 	bl	800d8e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b34a:	2101      	movs	r1, #1
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f002 fac7 	bl	800d8e0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b35a:	2182      	movs	r1, #130	; 0x82
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f002 fabf 	bl	800d8e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00e      	beq.n	800b39a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b38c:	4618      	mov	r0, r3
 800b38e:	f002 fc3f 	bl	800dc10 <USBD_static_free>
    pdev->pClassData = NULL;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e0af      	b.n	800b52c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d03f      	beq.n	800b458 <USBD_CDC_Setup+0xb4>
 800b3d8:	2b20      	cmp	r3, #32
 800b3da:	f040 809f 	bne.w	800b51c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	88db      	ldrh	r3, [r3, #6]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d02e      	beq.n	800b444 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	b25b      	sxtb	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	da16      	bge.n	800b41e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b3fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	88d2      	ldrh	r2, [r2, #6]
 800b402:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	88db      	ldrh	r3, [r3, #6]
 800b408:	2b07      	cmp	r3, #7
 800b40a:	bf28      	it	cs
 800b40c:	2307      	movcs	r3, #7
 800b40e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	89fa      	ldrh	r2, [r7, #14]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fad9 	bl	800c9ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b41c:	e085      	b.n	800b52a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	785a      	ldrb	r2, [r3, #1]
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	88db      	ldrh	r3, [r3, #6]
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b434:	6939      	ldr	r1, [r7, #16]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	88db      	ldrh	r3, [r3, #6]
 800b43a:	461a      	mov	r2, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 faf2 	bl	800ca26 <USBD_CtlPrepareRx>
      break;
 800b442:	e072      	b.n	800b52a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	7850      	ldrb	r0, [r2, #1]
 800b450:	2200      	movs	r2, #0
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	4798      	blx	r3
      break;
 800b456:	e068      	b.n	800b52a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	2b0b      	cmp	r3, #11
 800b45e:	d852      	bhi.n	800b506 <USBD_CDC_Setup+0x162>
 800b460:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <USBD_CDC_Setup+0xc4>)
 800b462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b466:	bf00      	nop
 800b468:	0800b499 	.word	0x0800b499
 800b46c:	0800b515 	.word	0x0800b515
 800b470:	0800b507 	.word	0x0800b507
 800b474:	0800b507 	.word	0x0800b507
 800b478:	0800b507 	.word	0x0800b507
 800b47c:	0800b507 	.word	0x0800b507
 800b480:	0800b507 	.word	0x0800b507
 800b484:	0800b507 	.word	0x0800b507
 800b488:	0800b507 	.word	0x0800b507
 800b48c:	0800b507 	.word	0x0800b507
 800b490:	0800b4c3 	.word	0x0800b4c3
 800b494:	0800b4ed 	.word	0x0800b4ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d107      	bne.n	800b4b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b4a4:	f107 030a 	add.w	r3, r7, #10
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f001 fa8e 	bl	800c9ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4b2:	e032      	b.n	800b51a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 fa18 	bl	800c8ec <USBD_CtlError>
            ret = USBD_FAIL;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	75fb      	strb	r3, [r7, #23]
          break;
 800b4c0:	e02b      	b.n	800b51a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d107      	bne.n	800b4de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4ce:	f107 030d 	add.w	r3, r7, #13
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 fa79 	bl	800c9ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4dc:	e01d      	b.n	800b51a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f001 fa03 	bl	800c8ec <USBD_CtlError>
            ret = USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ea:	e016      	b.n	800b51a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b03      	cmp	r3, #3
 800b4f6:	d00f      	beq.n	800b518 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 f9f6 	bl	800c8ec <USBD_CtlError>
            ret = USBD_FAIL;
 800b500:	2303      	movs	r3, #3
 800b502:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b504:	e008      	b.n	800b518 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f001 f9ef 	bl	800c8ec <USBD_CtlError>
          ret = USBD_FAIL;
 800b50e:	2303      	movs	r3, #3
 800b510:	75fb      	strb	r3, [r7, #23]
          break;
 800b512:	e002      	b.n	800b51a <USBD_CDC_Setup+0x176>
          break;
 800b514:	bf00      	nop
 800b516:	e008      	b.n	800b52a <USBD_CDC_Setup+0x186>
          break;
 800b518:	bf00      	nop
      }
      break;
 800b51a:	e006      	b.n	800b52a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 f9e4 	bl	800c8ec <USBD_CtlError>
      ret = USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	75fb      	strb	r3, [r7, #23]
      break;
 800b528:	bf00      	nop
  }

  return (uint8_t)ret;
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b546:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	e04f      	b.n	800b5f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b55c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b55e:	78fa      	ldrb	r2, [r7, #3]
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	440b      	add	r3, r1
 800b56c:	3318      	adds	r3, #24
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d029      	beq.n	800b5c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b574:	78fa      	ldrb	r2, [r7, #3]
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	4613      	mov	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	440b      	add	r3, r1
 800b582:	3318      	adds	r3, #24
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	78f9      	ldrb	r1, [r7, #3]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	460b      	mov	r3, r1
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	440b      	add	r3, r1
 800b590:	00db      	lsls	r3, r3, #3
 800b592:	4403      	add	r3, r0
 800b594:	333c      	adds	r3, #60	; 0x3c
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	fbb2 f1f3 	udiv	r1, r2, r3
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d110      	bne.n	800b5c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b5a6:	78fa      	ldrb	r2, [r7, #3]
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3318      	adds	r3, #24
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b5ba:	78f9      	ldrb	r1, [r7, #3]
 800b5bc:	2300      	movs	r3, #0
 800b5be:	2200      	movs	r2, #0
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f002 fa93 	bl	800daec <USBD_LL_Transmit>
 800b5c6:	e015      	b.n	800b5f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00b      	beq.n	800b5f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b610:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e015      	b.n	800b64c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f002 fad1 	bl	800dbcc <USBD_LL_GetRxDataSize>
 800b62a:	4602      	mov	r2, r0
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b646:	4611      	mov	r1, r2
 800b648:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b662:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e01b      	b.n	800b6a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d015      	beq.n	800b6a4 <USBD_CDC_EP0_RxReady+0x50>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b67e:	2bff      	cmp	r3, #255	; 0xff
 800b680:	d010      	beq.n	800b6a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b690:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b698:	b292      	uxth	r2, r2
 800b69a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	22ff      	movs	r2, #255	; 0xff
 800b6a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2243      	movs	r2, #67	; 0x43
 800b6bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b6be:	4b03      	ldr	r3, [pc, #12]	; (800b6cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	200000b4 	.word	0x200000b4

0800b6d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2243      	movs	r2, #67	; 0x43
 800b6dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b6de:	4b03      	ldr	r3, [pc, #12]	; (800b6ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	20000070 	.word	0x20000070

0800b6f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2243      	movs	r2, #67	; 0x43
 800b6fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b6fe:	4b03      	ldr	r3, [pc, #12]	; (800b70c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	200000f8 	.word	0x200000f8

0800b710 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	220a      	movs	r2, #10
 800b71c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b71e:	4b03      	ldr	r3, [pc, #12]	; (800b72c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	2000002c 	.word	0x2000002c

0800b730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b740:	2303      	movs	r3, #3
 800b742:	e004      	b.n	800b74e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b087      	sub	sp, #28
 800b75e:	af00      	add	r7, sp, #0
 800b760:	60f8      	str	r0, [r7, #12]
 800b762:	60b9      	str	r1, [r7, #8]
 800b764:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b76c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b774:	2303      	movs	r3, #3
 800b776:	e008      	b.n	800b78a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b796:	b480      	push	{r7}
 800b798:	b085      	sub	sp, #20
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e004      	b.n	800b7bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e01a      	b.n	800b820 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d114      	bne.n	800b81e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b812:	2181      	movs	r1, #129	; 0x81
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f002 f969 	bl	800daec <USBD_LL_Transmit>

    ret = USBD_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b842:	2303      	movs	r3, #3
 800b844:	e016      	b.n	800b874 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	7c1b      	ldrb	r3, [r3, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d109      	bne.n	800b862 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b854:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b858:	2101      	movs	r1, #1
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f002 f97e 	bl	800db5c <USBD_LL_PrepareReceive>
 800b860:	e007      	b.n	800b872 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b868:	2340      	movs	r3, #64	; 0x40
 800b86a:	2101      	movs	r1, #1
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f002 f975 	bl	800db5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	4613      	mov	r3, r2
 800b888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b890:	2303      	movs	r3, #3
 800b892:	e01f      	b.n	800b8d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	79fa      	ldrb	r2, [r7, #7]
 800b8c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f001 fed3 	bl	800d674 <USBD_LL_Init>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 ff8b 	bl	800d800 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d011      	beq.n	800b920 <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	6852      	ldr	r2, [r2, #4]
 800b908:	b2d2      	uxtb	r2, r2
 800b90a:	4611      	mov	r1, r2
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	4798      	blx	r3
    pdev->pClass = NULL;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f001 ff01 	bl	800d738 <USBD_LL_DeInit>
 800b936:	4603      	mov	r3, r0
 800b938:	73fb      	strb	r3, [r7, #15]

  return ret;
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b958:	2303      	movs	r3, #3
 800b95a:	e016      	b.n	800b98a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00b      	beq.n	800b988 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	f107 020e 	add.w	r2, r7, #14
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	4602      	mov	r2, r0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 fefe 	bl	800d79c <USBD_LL_Start>
 800b9a0:	4603      	mov	r3, r0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d009      	beq.n	800b9ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	4798      	blx	r3
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d007      	beq.n	800ba1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	4611      	mov	r1, r2
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	4798      	blx	r3
  }

  return USBD_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 ff1c 	bl	800c878 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba4e:	461a      	mov	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba5c:	f003 031f 	and.w	r3, r3, #31
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d01a      	beq.n	800ba9a <USBD_LL_SetupStage+0x72>
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d822      	bhi.n	800baae <USBD_LL_SetupStage+0x86>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <USBD_LL_SetupStage+0x4a>
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d00a      	beq.n	800ba86 <USBD_LL_SetupStage+0x5e>
 800ba70:	e01d      	b.n	800baae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f9ee 	bl	800be5c <USBD_StdDevReq>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]
      break;
 800ba84:	e020      	b.n	800bac8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fa52 	bl	800bf38 <USBD_StdItfReq>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73fb      	strb	r3, [r7, #15]
      break;
 800ba98:	e016      	b.n	800bac8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fa91 	bl	800bfca <USBD_StdEPReq>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]
      break;
 800baac:	e00c      	b.n	800bac8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 ff45 	bl	800d94c <USBD_LL_StallEP>
 800bac2:	4603      	mov	r3, r0
 800bac4:	73fb      	strb	r3, [r7, #15]
      break;
 800bac6:	bf00      	nop
  }

  return ret;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b086      	sub	sp, #24
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	460b      	mov	r3, r1
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bae0:	7afb      	ldrb	r3, [r7, #11]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d138      	bne.n	800bb58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800baec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d14a      	bne.n	800bb8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	689a      	ldr	r2, [r3, #8]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d913      	bls.n	800bb2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	689a      	ldr	r2, [r3, #8]
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	1ad2      	subs	r2, r2, r3
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	68da      	ldr	r2, [r3, #12]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	bf28      	it	cs
 800bb1e:	4613      	movcs	r3, r2
 800bb20:	461a      	mov	r2, r3
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 ff9b 	bl	800ca60 <USBD_CtlContinueRx>
 800bb2a:	e030      	b.n	800bb8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d10b      	bne.n	800bb50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d005      	beq.n	800bb50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 ff96 	bl	800ca82 <USBD_CtlSendStatus>
 800bb56:	e01a      	b.n	800bb8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d114      	bne.n	800bb8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00e      	beq.n	800bb8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	7afa      	ldrb	r2, [r7, #11]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	4798      	blx	r3
 800bb80:	4603      	mov	r3, r0
 800bb82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	e000      	b.n	800bb90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	460b      	mov	r3, r1
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d16b      	bne.n	800bc84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3314      	adds	r3, #20
 800bbb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d156      	bne.n	800bc6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d914      	bls.n	800bbf2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	1ad2      	subs	r2, r2, r3
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f000 ff10 	bl	800ca04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2100      	movs	r1, #0
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f001 ffb6 	bl	800db5c <USBD_LL_PrepareReceive>
 800bbf0:	e03b      	b.n	800bc6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d11c      	bne.n	800bc38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d316      	bcc.n	800bc38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d20f      	bcs.n	800bc38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 fef1 	bl	800ca04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2100      	movs	r1, #0
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f001 ff93 	bl	800db5c <USBD_LL_PrepareReceive>
 800bc36:	e018      	b.n	800bc6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d10b      	bne.n	800bc5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc5c:	2180      	movs	r1, #128	; 0x80
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f001 fe74 	bl	800d94c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 ff1f 	bl	800caa8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d122      	bne.n	800bcba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7ff fe98 	bl	800b9aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc82:	e01a      	b.n	800bcba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d114      	bne.n	800bcba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00e      	beq.n	800bcba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	7afa      	ldrb	r2, [r7, #11]
 800bca6:	4611      	mov	r1, r2
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	4798      	blx	r3
 800bcac:	4603      	mov	r3, r0
 800bcae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	e000      	b.n	800bcbc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e02f      	b.n	800bd58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00f      	beq.n	800bd22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d009      	beq.n	800bd22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6852      	ldr	r2, [r2, #4]
 800bd1a:	b2d2      	uxtb	r2, r2
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd22:	2340      	movs	r3, #64	; 0x40
 800bd24:	2200      	movs	r2, #0
 800bd26:	2100      	movs	r1, #0
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f001 fd9b 	bl	800d864 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2240      	movs	r2, #64	; 0x40
 800bd3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd3e:	2340      	movs	r3, #64	; 0x40
 800bd40:	2200      	movs	r2, #0
 800bd42:	2180      	movs	r1, #128	; 0x80
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 fd8d 	bl	800d864 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2240      	movs	r2, #64	; 0x40
 800bd54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	78fa      	ldrb	r2, [r7, #3]
 800bd70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2204      	movs	r2, #4
 800bd9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	d106      	bne.n	800bdce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e012      	b.n	800be18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d10b      	bne.n	800be16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d005      	beq.n	800be16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	3301      	adds	r3, #1
 800be36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be3e:	8a3b      	ldrh	r3, [r7, #16]
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	b21a      	sxth	r2, r3
 800be44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be48:	4313      	orrs	r3, r2
 800be4a:	b21b      	sxth	r3, r3
 800be4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be4e:	89fb      	ldrh	r3, [r7, #14]
}
 800be50:	4618      	mov	r0, r3
 800be52:	371c      	adds	r7, #28
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be72:	2b40      	cmp	r3, #64	; 0x40
 800be74:	d005      	beq.n	800be82 <USBD_StdDevReq+0x26>
 800be76:	2b40      	cmp	r3, #64	; 0x40
 800be78:	d853      	bhi.n	800bf22 <USBD_StdDevReq+0xc6>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00b      	beq.n	800be96 <USBD_StdDevReq+0x3a>
 800be7e:	2b20      	cmp	r3, #32
 800be80:	d14f      	bne.n	800bf22 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4798      	blx	r3
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]
      break;
 800be94:	e04a      	b.n	800bf2c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	785b      	ldrb	r3, [r3, #1]
 800be9a:	2b09      	cmp	r3, #9
 800be9c:	d83b      	bhi.n	800bf16 <USBD_StdDevReq+0xba>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <USBD_StdDevReq+0x48>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bef9 	.word	0x0800bef9
 800bea8:	0800bf0d 	.word	0x0800bf0d
 800beac:	0800bf17 	.word	0x0800bf17
 800beb0:	0800bf03 	.word	0x0800bf03
 800beb4:	0800bf17 	.word	0x0800bf17
 800beb8:	0800bed7 	.word	0x0800bed7
 800bebc:	0800becd 	.word	0x0800becd
 800bec0:	0800bf17 	.word	0x0800bf17
 800bec4:	0800beef 	.word	0x0800beef
 800bec8:	0800bee1 	.word	0x0800bee1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f9de 	bl	800c290 <USBD_GetDescriptor>
          break;
 800bed4:	e024      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fb43 	bl	800c564 <USBD_SetAddress>
          break;
 800bede:	e01f      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fb82 	bl	800c5ec <USBD_SetConfig>
 800bee8:	4603      	mov	r3, r0
 800beea:	73fb      	strb	r3, [r7, #15]
          break;
 800beec:	e018      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fc21 	bl	800c738 <USBD_GetConfig>
          break;
 800bef6:	e013      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fc52 	bl	800c7a4 <USBD_GetStatus>
          break;
 800bf00:	e00e      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fc81 	bl	800c80c <USBD_SetFeature>
          break;
 800bf0a:	e009      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fc90 	bl	800c834 <USBD_ClrFeature>
          break;
 800bf14:	e004      	b.n	800bf20 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fce7 	bl	800c8ec <USBD_CtlError>
          break;
 800bf1e:	bf00      	nop
      }
      break;
 800bf20:	e004      	b.n	800bf2c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fce1 	bl	800c8ec <USBD_CtlError>
      break;
 800bf2a:	bf00      	nop
  }

  return ret;
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop

0800bf38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf4e:	2b40      	cmp	r3, #64	; 0x40
 800bf50:	d005      	beq.n	800bf5e <USBD_StdItfReq+0x26>
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	d82f      	bhi.n	800bfb6 <USBD_StdItfReq+0x7e>
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <USBD_StdItfReq+0x26>
 800bf5a:	2b20      	cmp	r3, #32
 800bf5c:	d12b      	bne.n	800bfb6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d81d      	bhi.n	800bfa8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	889b      	ldrh	r3, [r3, #4]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d813      	bhi.n	800bf9e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	4798      	blx	r3
 800bf84:	4603      	mov	r3, r0
 800bf86:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	88db      	ldrh	r3, [r3, #6]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d110      	bne.n	800bfb2 <USBD_StdItfReq+0x7a>
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10d      	bne.n	800bfb2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fd73 	bl	800ca82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf9c:	e009      	b.n	800bfb2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fca3 	bl	800c8ec <USBD_CtlError>
          break;
 800bfa6:	e004      	b.n	800bfb2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fc9e 	bl	800c8ec <USBD_CtlError>
          break;
 800bfb0:	e000      	b.n	800bfb4 <USBD_StdItfReq+0x7c>
          break;
 800bfb2:	bf00      	nop
      }
      break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc97 	bl	800c8ec <USBD_CtlError>
      break;
 800bfbe:	bf00      	nop
  }

  return ret;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	889b      	ldrh	r3, [r3, #4]
 800bfdc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfe6:	2b40      	cmp	r3, #64	; 0x40
 800bfe8:	d007      	beq.n	800bffa <USBD_StdEPReq+0x30>
 800bfea:	2b40      	cmp	r3, #64	; 0x40
 800bfec:	f200 8145 	bhi.w	800c27a <USBD_StdEPReq+0x2b0>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00c      	beq.n	800c00e <USBD_StdEPReq+0x44>
 800bff4:	2b20      	cmp	r3, #32
 800bff6:	f040 8140 	bne.w	800c27a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	4798      	blx	r3
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]
      break;
 800c00c:	e13a      	b.n	800c284 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	785b      	ldrb	r3, [r3, #1]
 800c012:	2b03      	cmp	r3, #3
 800c014:	d007      	beq.n	800c026 <USBD_StdEPReq+0x5c>
 800c016:	2b03      	cmp	r3, #3
 800c018:	f300 8129 	bgt.w	800c26e <USBD_StdEPReq+0x2a4>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d07f      	beq.n	800c120 <USBD_StdEPReq+0x156>
 800c020:	2b01      	cmp	r3, #1
 800c022:	d03c      	beq.n	800c09e <USBD_StdEPReq+0xd4>
 800c024:	e123      	b.n	800c26e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d002      	beq.n	800c038 <USBD_StdEPReq+0x6e>
 800c032:	2b03      	cmp	r3, #3
 800c034:	d016      	beq.n	800c064 <USBD_StdEPReq+0x9a>
 800c036:	e02c      	b.n	800c092 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00d      	beq.n	800c05a <USBD_StdEPReq+0x90>
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b80      	cmp	r3, #128	; 0x80
 800c042:	d00a      	beq.n	800c05a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 fc7f 	bl	800d94c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c04e:	2180      	movs	r1, #128	; 0x80
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f001 fc7b 	bl	800d94c <USBD_LL_StallEP>
 800c056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c058:	e020      	b.n	800c09c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fc45 	bl	800c8ec <USBD_CtlError>
              break;
 800c062:	e01b      	b.n	800c09c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	885b      	ldrh	r3, [r3, #2]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10e      	bne.n	800c08a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00b      	beq.n	800c08a <USBD_StdEPReq+0xc0>
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	2b80      	cmp	r3, #128	; 0x80
 800c076:	d008      	beq.n	800c08a <USBD_StdEPReq+0xc0>
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	88db      	ldrh	r3, [r3, #6]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 fc61 	bl	800d94c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fcf9 	bl	800ca82 <USBD_CtlSendStatus>

              break;
 800c090:	e004      	b.n	800c09c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fc29 	bl	800c8ec <USBD_CtlError>
              break;
 800c09a:	bf00      	nop
          }
          break;
 800c09c:	e0ec      	b.n	800c278 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d002      	beq.n	800c0b0 <USBD_StdEPReq+0xe6>
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d016      	beq.n	800c0dc <USBD_StdEPReq+0x112>
 800c0ae:	e030      	b.n	800c112 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00d      	beq.n	800c0d2 <USBD_StdEPReq+0x108>
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b80      	cmp	r3, #128	; 0x80
 800c0ba:	d00a      	beq.n	800c0d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 fc43 	bl	800d94c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0c6:	2180      	movs	r1, #128	; 0x80
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 fc3f 	bl	800d94c <USBD_LL_StallEP>
 800c0ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0d0:	e025      	b.n	800c11e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fc09 	bl	800c8ec <USBD_CtlError>
              break;
 800c0da:	e020      	b.n	800c11e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	885b      	ldrh	r3, [r3, #2]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11b      	bne.n	800c11c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d004      	beq.n	800c0f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0ee:	7bbb      	ldrb	r3, [r7, #14]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f001 fc60 	bl	800d9b8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fcc2 	bl	800ca82 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	4798      	blx	r3
 800c10c:	4603      	mov	r3, r0
 800c10e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c110:	e004      	b.n	800c11c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fbe9 	bl	800c8ec <USBD_CtlError>
              break;
 800c11a:	e000      	b.n	800c11e <USBD_StdEPReq+0x154>
              break;
 800c11c:	bf00      	nop
          }
          break;
 800c11e:	e0ab      	b.n	800c278 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c126:	b2db      	uxtb	r3, r3
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d002      	beq.n	800c132 <USBD_StdEPReq+0x168>
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d032      	beq.n	800c196 <USBD_StdEPReq+0x1cc>
 800c130:	e097      	b.n	800c262 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d007      	beq.n	800c148 <USBD_StdEPReq+0x17e>
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	2b80      	cmp	r3, #128	; 0x80
 800c13c:	d004      	beq.n	800c148 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fbd3 	bl	800c8ec <USBD_CtlError>
                break;
 800c146:	e091      	b.n	800c26c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	da0b      	bge.n	800c168 <USBD_StdEPReq+0x19e>
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	3310      	adds	r3, #16
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	4413      	add	r3, r2
 800c164:	3304      	adds	r3, #4
 800c166:	e00b      	b.n	800c180 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c16e:	4613      	mov	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	4413      	add	r3, r2
 800c17e:	3304      	adds	r3, #4
 800c180:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2202      	movs	r2, #2
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fc1d 	bl	800c9ce <USBD_CtlSendData>
              break;
 800c194:	e06a      	b.n	800c26c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	da11      	bge.n	800c1c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	f003 020f 	and.w	r2, r3, #15
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4413      	add	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	440b      	add	r3, r1
 800c1b0:	3324      	adds	r3, #36	; 0x24
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d117      	bne.n	800c1e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fb96 	bl	800c8ec <USBD_CtlError>
                  break;
 800c1c0:	e054      	b.n	800c26c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	f003 020f 	and.w	r2, r3, #15
 800c1c8:	6879      	ldr	r1, [r7, #4]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	440b      	add	r3, r1
 800c1d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d104      	bne.n	800c1e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fb83 	bl	800c8ec <USBD_CtlError>
                  break;
 800c1e6:	e041      	b.n	800c26c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da0b      	bge.n	800c208 <USBD_StdEPReq+0x23e>
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	3310      	adds	r3, #16
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	4413      	add	r3, r2
 800c204:	3304      	adds	r3, #4
 800c206:	e00b      	b.n	800c220 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	3304      	adds	r3, #4
 800c220:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <USBD_StdEPReq+0x264>
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	2b80      	cmp	r3, #128	; 0x80
 800c22c:	d103      	bne.n	800c236 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2200      	movs	r2, #0
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	e00e      	b.n	800c254 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fbf2 	bl	800da24 <USBD_LL_IsStallEP>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2201      	movs	r2, #1
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	e002      	b.n	800c254 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2202      	movs	r2, #2
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fbb7 	bl	800c9ce <USBD_CtlSendData>
              break;
 800c260:	e004      	b.n	800c26c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fb41 	bl	800c8ec <USBD_CtlError>
              break;
 800c26a:	bf00      	nop
          }
          break;
 800c26c:	e004      	b.n	800c278 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fb3b 	bl	800c8ec <USBD_CtlError>
          break;
 800c276:	bf00      	nop
      }
      break;
 800c278:	e004      	b.n	800c284 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fb35 	bl	800c8ec <USBD_CtlError>
      break;
 800c282:	bf00      	nop
  }

  return ret;
 800c284:	7bfb      	ldrb	r3, [r7, #15]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	885b      	ldrh	r3, [r3, #2]
 800c2aa:	0a1b      	lsrs	r3, r3, #8
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	2b06      	cmp	r3, #6
 800c2b2:	f200 8128 	bhi.w	800c506 <USBD_GetDescriptor+0x276>
 800c2b6:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <USBD_GetDescriptor+0x2c>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c2d9 	.word	0x0800c2d9
 800c2c0:	0800c2f1 	.word	0x0800c2f1
 800c2c4:	0800c331 	.word	0x0800c331
 800c2c8:	0800c507 	.word	0x0800c507
 800c2cc:	0800c507 	.word	0x0800c507
 800c2d0:	0800c4a7 	.word	0x0800c4a7
 800c2d4:	0800c4d3 	.word	0x0800c4d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	7c12      	ldrb	r2, [r2, #16]
 800c2e4:	f107 0108 	add.w	r1, r7, #8
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4798      	blx	r3
 800c2ec:	60f8      	str	r0, [r7, #12]
      break;
 800c2ee:	e112      	b.n	800c516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	7c1b      	ldrb	r3, [r3, #16]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10d      	bne.n	800c314 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c300:	f107 0208 	add.w	r2, r7, #8
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	2202      	movs	r2, #2
 800c310:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c312:	e100      	b.n	800c516 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	f107 0208 	add.w	r2, r7, #8
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3301      	adds	r3, #1
 800c32a:	2202      	movs	r2, #2
 800c32c:	701a      	strb	r2, [r3, #0]
      break;
 800c32e:	e0f2      	b.n	800c516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	885b      	ldrh	r3, [r3, #2]
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b05      	cmp	r3, #5
 800c338:	f200 80ac 	bhi.w	800c494 <USBD_GetDescriptor+0x204>
 800c33c:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <USBD_GetDescriptor+0xb4>)
 800c33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c342:	bf00      	nop
 800c344:	0800c35d 	.word	0x0800c35d
 800c348:	0800c391 	.word	0x0800c391
 800c34c:	0800c3c5 	.word	0x0800c3c5
 800c350:	0800c3f9 	.word	0x0800c3f9
 800c354:	0800c42d 	.word	0x0800c42d
 800c358:	0800c461 	.word	0x0800c461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00b      	beq.n	800c380 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	7c12      	ldrb	r2, [r2, #16]
 800c374:	f107 0108 	add.w	r1, r7, #8
 800c378:	4610      	mov	r0, r2
 800c37a:	4798      	blx	r3
 800c37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c37e:	e091      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fab2 	bl	800c8ec <USBD_CtlError>
            err++;
 800c388:	7afb      	ldrb	r3, [r7, #11]
 800c38a:	3301      	adds	r3, #1
 800c38c:	72fb      	strb	r3, [r7, #11]
          break;
 800c38e:	e089      	b.n	800c4a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00b      	beq.n	800c3b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	7c12      	ldrb	r2, [r2, #16]
 800c3a8:	f107 0108 	add.w	r1, r7, #8
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4798      	blx	r3
 800c3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3b2:	e077      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fa98 	bl	800c8ec <USBD_CtlError>
            err++;
 800c3bc:	7afb      	ldrb	r3, [r7, #11]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3c2:	e06f      	b.n	800c4a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00b      	beq.n	800c3e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	7c12      	ldrb	r2, [r2, #16]
 800c3dc:	f107 0108 	add.w	r1, r7, #8
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	4798      	blx	r3
 800c3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3e6:	e05d      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fa7e 	bl	800c8ec <USBD_CtlError>
            err++;
 800c3f0:	7afb      	ldrb	r3, [r7, #11]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3f6:	e055      	b.n	800c4a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00b      	beq.n	800c41c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	7c12      	ldrb	r2, [r2, #16]
 800c410:	f107 0108 	add.w	r1, r7, #8
 800c414:	4610      	mov	r0, r2
 800c416:	4798      	blx	r3
 800c418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c41a:	e043      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fa64 	bl	800c8ec <USBD_CtlError>
            err++;
 800c424:	7afb      	ldrb	r3, [r7, #11]
 800c426:	3301      	adds	r3, #1
 800c428:	72fb      	strb	r3, [r7, #11]
          break;
 800c42a:	e03b      	b.n	800c4a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	7c12      	ldrb	r2, [r2, #16]
 800c444:	f107 0108 	add.w	r1, r7, #8
 800c448:	4610      	mov	r0, r2
 800c44a:	4798      	blx	r3
 800c44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c44e:	e029      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fa4a 	bl	800c8ec <USBD_CtlError>
            err++;
 800c458:	7afb      	ldrb	r3, [r7, #11]
 800c45a:	3301      	adds	r3, #1
 800c45c:	72fb      	strb	r3, [r7, #11]
          break;
 800c45e:	e021      	b.n	800c4a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00b      	beq.n	800c484 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	7c12      	ldrb	r2, [r2, #16]
 800c478:	f107 0108 	add.w	r1, r7, #8
 800c47c:	4610      	mov	r0, r2
 800c47e:	4798      	blx	r3
 800c480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c482:	e00f      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fa30 	bl	800c8ec <USBD_CtlError>
            err++;
 800c48c:	7afb      	ldrb	r3, [r7, #11]
 800c48e:	3301      	adds	r3, #1
 800c490:	72fb      	strb	r3, [r7, #11]
          break;
 800c492:	e007      	b.n	800c4a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa28 	bl	800c8ec <USBD_CtlError>
          err++;
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c4a2:	bf00      	nop
      }
      break;
 800c4a4:	e037      	b.n	800c516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7c1b      	ldrb	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d109      	bne.n	800c4c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b6:	f107 0208 	add.w	r2, r7, #8
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	4798      	blx	r3
 800c4be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4c0:	e029      	b.n	800c516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fa11 	bl	800c8ec <USBD_CtlError>
        err++;
 800c4ca:	7afb      	ldrb	r3, [r7, #11]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c4d0:	e021      	b.n	800c516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	7c1b      	ldrb	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10d      	bne.n	800c4f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e2:	f107 0208 	add.w	r2, r7, #8
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	4798      	blx	r3
 800c4ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	2207      	movs	r2, #7
 800c4f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4f4:	e00f      	b.n	800c516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f9f7 	bl	800c8ec <USBD_CtlError>
        err++;
 800c4fe:	7afb      	ldrb	r3, [r7, #11]
 800c500:	3301      	adds	r3, #1
 800c502:	72fb      	strb	r3, [r7, #11]
      break;
 800c504:	e007      	b.n	800c516 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f9ef 	bl	800c8ec <USBD_CtlError>
      err++;
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	3301      	adds	r3, #1
 800c512:	72fb      	strb	r3, [r7, #11]
      break;
 800c514:	bf00      	nop
  }

  if (err != 0U)
 800c516:	7afb      	ldrb	r3, [r7, #11]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d11e      	bne.n	800c55a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	88db      	ldrh	r3, [r3, #6]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d016      	beq.n	800c552 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c524:	893b      	ldrh	r3, [r7, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00e      	beq.n	800c548 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	88da      	ldrh	r2, [r3, #6]
 800c52e:	893b      	ldrh	r3, [r7, #8]
 800c530:	4293      	cmp	r3, r2
 800c532:	bf28      	it	cs
 800c534:	4613      	movcs	r3, r2
 800c536:	b29b      	uxth	r3, r3
 800c538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c53a:	893b      	ldrh	r3, [r7, #8]
 800c53c:	461a      	mov	r2, r3
 800c53e:	68f9      	ldr	r1, [r7, #12]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fa44 	bl	800c9ce <USBD_CtlSendData>
 800c546:	e009      	b.n	800c55c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f9ce 	bl	800c8ec <USBD_CtlError>
 800c550:	e004      	b.n	800c55c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fa95 	bl	800ca82 <USBD_CtlSendStatus>
 800c558:	e000      	b.n	800c55c <USBD_GetDescriptor+0x2cc>
    return;
 800c55a:	bf00      	nop
  }
}
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop

0800c564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	889b      	ldrh	r3, [r3, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d131      	bne.n	800c5da <USBD_SetAddress+0x76>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	88db      	ldrh	r3, [r3, #6]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d12d      	bne.n	800c5da <USBD_SetAddress+0x76>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	885b      	ldrh	r3, [r3, #2]
 800c582:	2b7f      	cmp	r3, #127	; 0x7f
 800c584:	d829      	bhi.n	800c5da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	885b      	ldrh	r3, [r3, #2]
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d104      	bne.n	800c5a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f9a3 	bl	800c8ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5a6:	e01d      	b.n	800c5e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	7bfa      	ldrb	r2, [r7, #15]
 800c5ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f001 fa63 	bl	800da80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fa61 	bl	800ca82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d004      	beq.n	800c5d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ce:	e009      	b.n	800c5e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d8:	e004      	b.n	800c5e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 f985 	bl	800c8ec <USBD_CtlError>
  }
}
 800c5e2:	bf00      	nop
 800c5e4:	bf00      	nop
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	885b      	ldrh	r3, [r3, #2]
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	4b4c      	ldr	r3, [pc, #304]	; (800c734 <USBD_SetConfig+0x148>)
 800c602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c604:	4b4b      	ldr	r3, [pc, #300]	; (800c734 <USBD_SetConfig+0x148>)
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d905      	bls.n	800c618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f96c 	bl	800c8ec <USBD_CtlError>
    return USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	e088      	b.n	800c72a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b02      	cmp	r3, #2
 800c622:	d002      	beq.n	800c62a <USBD_SetConfig+0x3e>
 800c624:	2b03      	cmp	r3, #3
 800c626:	d025      	beq.n	800c674 <USBD_SetConfig+0x88>
 800c628:	e071      	b.n	800c70e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c62a:	4b42      	ldr	r3, [pc, #264]	; (800c734 <USBD_SetConfig+0x148>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01c      	beq.n	800c66c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c632:	4b40      	ldr	r3, [pc, #256]	; (800c734 <USBD_SetConfig+0x148>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c63c:	4b3d      	ldr	r3, [pc, #244]	; (800c734 <USBD_SetConfig+0x148>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff f9bc 	bl	800b9c0 <USBD_SetClassConfig>
 800c648:	4603      	mov	r3, r0
 800c64a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d004      	beq.n	800c65c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f949 	bl	800c8ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c65a:	e065      	b.n	800c728 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fa10 	bl	800ca82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2203      	movs	r2, #3
 800c666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c66a:	e05d      	b.n	800c728 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fa08 	bl	800ca82 <USBD_CtlSendStatus>
      break;
 800c672:	e059      	b.n	800c728 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c674:	4b2f      	ldr	r3, [pc, #188]	; (800c734 <USBD_SetConfig+0x148>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d112      	bne.n	800c6a2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2202      	movs	r2, #2
 800c680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c684:	4b2b      	ldr	r3, [pc, #172]	; (800c734 <USBD_SetConfig+0x148>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c68e:	4b29      	ldr	r3, [pc, #164]	; (800c734 <USBD_SetConfig+0x148>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff f9af 	bl	800b9f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f9f1 	bl	800ca82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6a0:	e042      	b.n	800c728 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c6a2:	4b24      	ldr	r3, [pc, #144]	; (800c734 <USBD_SetConfig+0x148>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d02a      	beq.n	800c706 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff f99d 	bl	800b9f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6be:	4b1d      	ldr	r3, [pc, #116]	; (800c734 <USBD_SetConfig+0x148>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c8:	4b1a      	ldr	r3, [pc, #104]	; (800c734 <USBD_SetConfig+0x148>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7ff f976 	bl	800b9c0 <USBD_SetClassConfig>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00f      	beq.n	800c6fe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f903 	bl	800c8ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7ff f982 	bl	800b9f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6fc:	e014      	b.n	800c728 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f9bf 	bl	800ca82 <USBD_CtlSendStatus>
      break;
 800c704:	e010      	b.n	800c728 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f9bb 	bl	800ca82 <USBD_CtlSendStatus>
      break;
 800c70c:	e00c      	b.n	800c728 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f8eb 	bl	800c8ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c716:	4b07      	ldr	r3, [pc, #28]	; (800c734 <USBD_SetConfig+0x148>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff f96b 	bl	800b9f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c722:	2303      	movs	r3, #3
 800c724:	73fb      	strb	r3, [r7, #15]
      break;
 800c726:	bf00      	nop
  }

  return ret;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20000558 	.word	0x20000558

0800c738 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	88db      	ldrh	r3, [r3, #6]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d004      	beq.n	800c754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f8cd 	bl	800c8ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c752:	e023      	b.n	800c79c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	dc02      	bgt.n	800c766 <USBD_GetConfig+0x2e>
 800c760:	2b00      	cmp	r3, #0
 800c762:	dc03      	bgt.n	800c76c <USBD_GetConfig+0x34>
 800c764:	e015      	b.n	800c792 <USBD_GetConfig+0x5a>
 800c766:	2b03      	cmp	r3, #3
 800c768:	d00b      	beq.n	800c782 <USBD_GetConfig+0x4a>
 800c76a:	e012      	b.n	800c792 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3308      	adds	r3, #8
 800c776:	2201      	movs	r2, #1
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f927 	bl	800c9ce <USBD_CtlSendData>
        break;
 800c780:	e00c      	b.n	800c79c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3304      	adds	r3, #4
 800c786:	2201      	movs	r2, #1
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f91f 	bl	800c9ce <USBD_CtlSendData>
        break;
 800c790:	e004      	b.n	800c79c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f8a9 	bl	800c8ec <USBD_CtlError>
        break;
 800c79a:	bf00      	nop
}
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d81e      	bhi.n	800c7fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	88db      	ldrh	r3, [r3, #6]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d004      	beq.n	800c7ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f890 	bl	800c8ec <USBD_CtlError>
        break;
 800c7cc:	e01a      	b.n	800c804 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	f043 0202 	orr.w	r2, r3, #2
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	330c      	adds	r3, #12
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f8eb 	bl	800c9ce <USBD_CtlSendData>
      break;
 800c7f8:	e004      	b.n	800c804 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f875 	bl	800c8ec <USBD_CtlError>
      break;
 800c802:	bf00      	nop
  }
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d106      	bne.n	800c82c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f92b 	bl	800ca82 <USBD_CtlSendStatus>
  }
}
 800c82c:	bf00      	nop
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c844:	b2db      	uxtb	r3, r3
 800c846:	3b01      	subs	r3, #1
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d80b      	bhi.n	800c864 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	885b      	ldrh	r3, [r3, #2]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d10c      	bne.n	800c86e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f910 	bl	800ca82 <USBD_CtlSendStatus>
      }
      break;
 800c862:	e004      	b.n	800c86e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f840 	bl	800c8ec <USBD_CtlError>
      break;
 800c86c:	e000      	b.n	800c870 <USBD_ClrFeature+0x3c>
      break;
 800c86e:	bf00      	nop
  }
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3301      	adds	r3, #1
 800c892:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	781a      	ldrb	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7ff fabc 	bl	800be20 <SWAPBYTE>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7ff faaf 	bl	800be20 <SWAPBYTE>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f7ff faa2 	bl	800be20 <SWAPBYTE>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	461a      	mov	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	80da      	strh	r2, [r3, #6]
}
 800c8e4:	bf00      	nop
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8f6:	2180      	movs	r1, #128	; 0x80
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f001 f827 	bl	800d94c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8fe:	2100      	movs	r1, #0
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f001 f823 	bl	800d94c <USBD_LL_StallEP>
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b086      	sub	sp, #24
 800c912:	af00      	add	r7, sp, #0
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c91a:	2300      	movs	r3, #0
 800c91c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d036      	beq.n	800c992 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c928:	6938      	ldr	r0, [r7, #16]
 800c92a:	f000 f836 	bl	800c99a <USBD_GetLen>
 800c92e:	4603      	mov	r3, r0
 800c930:	3301      	adds	r3, #1
 800c932:	b29b      	uxth	r3, r3
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4413      	add	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	7812      	ldrb	r2, [r2, #0]
 800c946:	701a      	strb	r2, [r3, #0]
  idx++;
 800c948:	7dfb      	ldrb	r3, [r7, #23]
 800c94a:	3301      	adds	r3, #1
 800c94c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	4413      	add	r3, r2
 800c954:	2203      	movs	r2, #3
 800c956:	701a      	strb	r2, [r3, #0]
  idx++;
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	3301      	adds	r3, #1
 800c95c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c95e:	e013      	b.n	800c988 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	4413      	add	r3, r2
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	7812      	ldrb	r2, [r2, #0]
 800c96a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3301      	adds	r3, #1
 800c970:	613b      	str	r3, [r7, #16]
    idx++;
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	3301      	adds	r3, #1
 800c976:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	4413      	add	r3, r2
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
    idx++;
 800c982:	7dfb      	ldrb	r3, [r7, #23]
 800c984:	3301      	adds	r3, #1
 800c986:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e7      	bne.n	800c960 <USBD_GetString+0x52>
 800c990:	e000      	b.n	800c994 <USBD_GetString+0x86>
    return;
 800c992:	bf00      	nop
  }
}
 800c994:	3718      	adds	r7, #24
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b085      	sub	sp, #20
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9aa:	e005      	b.n	800c9b8 <USBD_GetLen+0x1e>
  {
    len++;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1f5      	bne.n	800c9ac <USBD_GetLen+0x12>
  }

  return len;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	60f8      	str	r0, [r7, #12]
 800c9d6:	60b9      	str	r1, [r7, #8]
 800c9d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2202      	movs	r2, #2
 800c9de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f001 f879 	bl	800daec <USBD_LL_Transmit>

  return USBD_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	2100      	movs	r1, #0
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f001 f868 	bl	800daec <USBD_LL_Transmit>

  return USBD_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2203      	movs	r2, #3
 800ca36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	2100      	movs	r1, #0
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f001 f883 	bl	800db5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	2100      	movs	r1, #0
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f001 f872 	bl	800db5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b082      	sub	sp, #8
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2204      	movs	r2, #4
 800ca8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca92:	2300      	movs	r3, #0
 800ca94:	2200      	movs	r2, #0
 800ca96:	2100      	movs	r1, #0
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 f827 	bl	800daec <USBD_LL_Transmit>

  return USBD_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2205      	movs	r2, #5
 800cab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cab8:	2300      	movs	r3, #0
 800caba:	2200      	movs	r2, #0
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 f84c 	bl	800db5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <stm32_lock_init>:
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d104      	bne.n	800cae6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800cadc:	b672      	cpsid	i
}
 800cade:	bf00      	nop
 800cae0:	f7f4 fe68 	bl	80017b4 <Error_Handler>
 800cae4:	e7fe      	b.n	800cae4 <stm32_lock_init+0x16>
  lock->flag = 0;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	705a      	strb	r2, [r3, #1]
}
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <stm32_lock_acquire>:
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb02:	f3ef 8310 	mrs	r3, PRIMASK
 800cb06:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb08:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb12:	b672      	cpsid	i
}
 800cb14:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800cb16:	f3bf 8f4f 	dsb	sy
}
 800cb1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cb1c:	f3bf 8f6f 	isb	sy
}
 800cb20:	bf00      	nop
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 800cb28:	b672      	cpsid	i
}
 800cb2a:	bf00      	nop
 800cb2c:	f7f4 fe42 	bl	80017b4 <Error_Handler>
 800cb30:	e7fe      	b.n	800cb30 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	785b      	ldrb	r3, [r3, #1]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d103      	bne.n	800cb42 <stm32_lock_acquire+0x48>
    lock->flag = flag;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	7bfa      	ldrb	r2, [r7, #15]
 800cb3e:	701a      	strb	r2, [r3, #0]
 800cb40:	e008      	b.n	800cb54 <stm32_lock_acquire+0x5a>
  else if (lock->counter == UINT8_MAX)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	785b      	ldrb	r3, [r3, #1]
 800cb46:	2bff      	cmp	r3, #255	; 0xff
 800cb48:	d104      	bne.n	800cb54 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800cb4a:	b672      	cpsid	i
}
 800cb4c:	bf00      	nop
    STM32_LOCK_BLOCK();
 800cb4e:	f7f4 fe31 	bl	80017b4 <Error_Handler>
 800cb52:	e7fe      	b.n	800cb52 <stm32_lock_acquire+0x58>
  lock->counter++;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	785b      	ldrb	r3, [r3, #1]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	705a      	strb	r2, [r3, #1]
}
 800cb60:	bf00      	nop
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <stm32_lock_release>:
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d104      	bne.n	800cb80 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800cb76:	b672      	cpsid	i
}
 800cb78:	bf00      	nop
 800cb7a:	f7f4 fe1b 	bl	80017b4 <Error_Handler>
 800cb7e:	e7fe      	b.n	800cb7e <stm32_lock_release+0x16>
  if (lock->counter == 0)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	785b      	ldrb	r3, [r3, #1]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d104      	bne.n	800cb92 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800cb88:	b672      	cpsid	i
}
 800cb8a:	bf00      	nop
    STM32_LOCK_BLOCK();
 800cb8c:	f7f4 fe12 	bl	80017b4 <Error_Handler>
 800cb90:	e7fe      	b.n	800cb90 <stm32_lock_release+0x28>
  lock->counter--;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	785b      	ldrb	r3, [r3, #1]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	785b      	ldrb	r3, [r3, #1]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d105      	bne.n	800cbb2 <stm32_lock_release+0x4a>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800cbae:	b662      	cpsie	i
}
 800cbb0:	bf00      	nop
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <ring_buffer_init>:
  *
  * @param
  * @retval
  */
void ring_buffer_init()
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0

	ring_buffer.head = 0;
 800cbc0:	4b0e      	ldr	r3, [pc, #56]	; (800cbfc <ring_buffer_init+0x40>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
	ring_buffer.tail = 0;
 800cbc6:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <ring_buffer_init+0x40>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	605a      	str	r2, [r3, #4]
	ring_buffer.size = (uint32_t) RING_BUFFER_SIZE;
 800cbcc:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <ring_buffer_init+0x40>)
 800cbce:	2240      	movs	r2, #64	; 0x40
 800cbd0:	609a      	str	r2, [r3, #8]
	ring_buffer.data = calloc(ring_buffer.size, sizeof(*ring_buffer.data));
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <ring_buffer_init+0x40>)
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f001 f829 	bl	800dc30 <calloc>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b06      	ldr	r3, [pc, #24]	; (800cbfc <ring_buffer_init+0x40>)
 800cbe4:	60da      	str	r2, [r3, #12]
	ring_buffer.is_empty = true;
 800cbe6:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <ring_buffer_init+0x40>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	741a      	strb	r2, [r3, #16]
	ring_buffer.is_full = false;
 800cbec:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <ring_buffer_init+0x40>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	745a      	strb	r2, [r3, #17]

	stm32_lock_init(&mutex);
 800cbf2:	4803      	ldr	r0, [pc, #12]	; (800cc00 <ring_buffer_init+0x44>)
 800cbf4:	f7ff ff6b 	bl	800cace <stm32_lock_init>
}
 800cbf8:	bf00      	nop
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	2000055c 	.word	0x2000055c
 800cc00:	20000570 	.word	0x20000570

0800cc04 <ring_buffer_deinit>:
  *
  * @param
  * @retval
  */
void ring_buffer_deinit()
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
	stm32_lock_acquire(&mutex);
 800cc08:	480d      	ldr	r0, [pc, #52]	; (800cc40 <ring_buffer_deinit+0x3c>)
 800cc0a:	f7ff ff76 	bl	800cafa <stm32_lock_acquire>
	free(ring_buffer.data);
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <ring_buffer_deinit+0x40>)
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f001 f83e 	bl	800dc94 <free>
	ring_buffer.head = 0;
 800cc18:	4b0a      	ldr	r3, [pc, #40]	; (800cc44 <ring_buffer_deinit+0x40>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
	ring_buffer.tail = 0;
 800cc1e:	4b09      	ldr	r3, [pc, #36]	; (800cc44 <ring_buffer_deinit+0x40>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	605a      	str	r2, [r3, #4]
	ring_buffer.size = 0;
 800cc24:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <ring_buffer_deinit+0x40>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	609a      	str	r2, [r3, #8]
	ring_buffer.is_empty = false;
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <ring_buffer_deinit+0x40>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	741a      	strb	r2, [r3, #16]
	ring_buffer.is_full = false;
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <ring_buffer_deinit+0x40>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	745a      	strb	r2, [r3, #17]
	stm32_lock_release(&mutex);
 800cc36:	4802      	ldr	r0, [pc, #8]	; (800cc40 <ring_buffer_deinit+0x3c>)
 800cc38:	f7ff ff96 	bl	800cb68 <stm32_lock_release>
}
 800cc3c:	bf00      	nop
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	20000570 	.word	0x20000570
 800cc44:	2000055c 	.word	0x2000055c

0800cc48 <ring_buffer_available_bytes>:
  *
  * @param
  * @retval uint32_t: Number of bytes occupying the ring buffer.
  */
uint32_t ring_buffer_available_bytes()
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
	stm32_lock_acquire(&mutex);
 800cc4e:	481c      	ldr	r0, [pc, #112]	; (800ccc0 <ring_buffer_available_bytes+0x78>)
 800cc50:	f7ff ff53 	bl	800cafa <stm32_lock_acquire>
	if (ring_buffer.is_empty)
 800cc54:	4b1b      	ldr	r3, [pc, #108]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc56:	7c1b      	ldrb	r3, [r3, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <ring_buffer_available_bytes+0x1e>
	{
		stm32_lock_release(&mutex);
 800cc5c:	4818      	ldr	r0, [pc, #96]	; (800ccc0 <ring_buffer_available_bytes+0x78>)
 800cc5e:	f7ff ff83 	bl	800cb68 <stm32_lock_release>
		return 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	e027      	b.n	800ccb6 <ring_buffer_available_bytes+0x6e>
	}
	else if (ring_buffer.is_full)
 800cc66:	4b17      	ldr	r3, [pc, #92]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc68:	7c5b      	ldrb	r3, [r3, #17]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d005      	beq.n	800cc7a <ring_buffer_available_bytes+0x32>
	{
		stm32_lock_release(&mutex);
 800cc6e:	4814      	ldr	r0, [pc, #80]	; (800ccc0 <ring_buffer_available_bytes+0x78>)
 800cc70:	f7ff ff7a 	bl	800cb68 <stm32_lock_release>
		return (uint32_t)(ring_buffer.size);
 800cc74:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	e01d      	b.n	800ccb6 <ring_buffer_available_bytes+0x6e>
	}
	else if (ring_buffer.head > ring_buffer.tail)
 800cc7a:	4b12      	ldr	r3, [pc, #72]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d90a      	bls.n	800cc9c <ring_buffer_available_bytes+0x54>
	{
		uint32_t ret = (uint32_t)(ring_buffer.head - ring_buffer.tail);
 800cc86:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	603b      	str	r3, [r7, #0]
		stm32_lock_release(&mutex);
 800cc92:	480b      	ldr	r0, [pc, #44]	; (800ccc0 <ring_buffer_available_bytes+0x78>)
 800cc94:	f7ff ff68 	bl	800cb68 <stm32_lock_release>
		return ret;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	e00c      	b.n	800ccb6 <ring_buffer_available_bytes+0x6e>
	}
	else
	{
		/*This case shouldn't happen normally since the tail should never exceed the head*/
		uint32_t ret = (uint32_t)(ring_buffer.size + ring_buffer.head - ring_buffer.tail);
 800cc9c:	4b09      	ldr	r3, [pc, #36]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	441a      	add	r2, r3
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <ring_buffer_available_bytes+0x7c>)
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	607b      	str	r3, [r7, #4]
		stm32_lock_release(&mutex);
 800ccae:	4804      	ldr	r0, [pc, #16]	; (800ccc0 <ring_buffer_available_bytes+0x78>)
 800ccb0:	f7ff ff5a 	bl	800cb68 <stm32_lock_release>
		return ret;
 800ccb4:	687b      	ldr	r3, [r7, #4]
	}
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20000570 	.word	0x20000570
 800ccc4:	2000055c 	.word	0x2000055c

0800ccc8 <ring_buffer_free_bytes>:
  *
  * @param  ring_buffer: Pointer to a struct of type ring_buffer_t (Should be declared by the user).
  * @retval uint32_t: Number of bytes that are unoccupied.
  */
uint32_t static ring_buffer_free_bytes()
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0
	if (ring_buffer.is_full)
 800cccc:	4b12      	ldr	r3, [pc, #72]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800ccce:	7c5b      	ldrb	r3, [r3, #17]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <ring_buffer_free_bytes+0x10>
	{
		return 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	e01a      	b.n	800cd0e <ring_buffer_free_bytes+0x46>
	}
	else if (ring_buffer.is_empty)
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800ccda:	7c1b      	ldrb	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <ring_buffer_free_bytes+0x1e>
	{
		return (uint32_t)(ring_buffer.size);
 800cce0:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	e013      	b.n	800cd0e <ring_buffer_free_bytes+0x46>
	}
	else if (ring_buffer.head > ring_buffer.tail)
 800cce6:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b0b      	ldr	r3, [pc, #44]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d908      	bls.n	800cd04 <ring_buffer_free_bytes+0x3c>
	{
		return (uint32_t)(ring_buffer.size - (ring_buffer.head - ring_buffer.tail));
 800ccf2:	4b09      	ldr	r3, [pc, #36]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800ccf4:	689a      	ldr	r2, [r3, #8]
 800ccf6:	4b08      	ldr	r3, [pc, #32]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800ccf8:	6859      	ldr	r1, [r3, #4]
 800ccfa:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	1acb      	subs	r3, r1, r3
 800cd00:	4413      	add	r3, r2
 800cd02:	e004      	b.n	800cd0e <ring_buffer_free_bytes+0x46>
	}
	else
	{
		/*This case shouldn't happen normally since the tail should never exceed the head*/
		return (uint32_t)(ring_buffer.tail - ring_buffer.head);
 800cd04:	4b04      	ldr	r3, [pc, #16]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	4b03      	ldr	r3, [pc, #12]	; (800cd18 <ring_buffer_free_bytes+0x50>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	1ad3      	subs	r3, r2, r3
	}
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	2000055c 	.word	0x2000055c

0800cd1c <ring_buffer_write>:
  * @param  data: External buffer in bytes
  * @param  size: Size of external buffer
  * @retval uint8_t: Result of the operation: 0 if all operations are OK else 1.
  */
uint8_t ring_buffer_write(uint8_t* data, uint32_t size)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
	stm32_lock_acquire(&mutex);
 800cd26:	4829      	ldr	r0, [pc, #164]	; (800cdcc <ring_buffer_write+0xb0>)
 800cd28:	f7ff fee7 	bl	800cafa <stm32_lock_acquire>
	if(size > ring_buffer_free_bytes())
 800cd2c:	f7ff ffcc 	bl	800ccc8 <ring_buffer_free_bytes>
 800cd30:	4602      	mov	r2, r0
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d904      	bls.n	800cd42 <ring_buffer_write+0x26>
	{
		stm32_lock_release(&mutex);
 800cd38:	4824      	ldr	r0, [pc, #144]	; (800cdcc <ring_buffer_write+0xb0>)
 800cd3a:	f7ff ff15 	bl	800cb68 <stm32_lock_release>
		return 1;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e03f      	b.n	800cdc2 <ring_buffer_write+0xa6>
	}
	else
	{
		for (uint32_t i=0; i < size; i++)
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	e018      	b.n	800cd7a <ring_buffer_write+0x5e>
		{
			ring_buffer.data[ring_buffer.head] = data[i];
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	441a      	add	r2, r3
 800cd4e:	4b20      	ldr	r3, [pc, #128]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd50:	68d9      	ldr	r1, [r3, #12]
 800cd52:	4b1f      	ldr	r3, [pc, #124]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	440b      	add	r3, r1
 800cd58:	7812      	ldrb	r2, [r2, #0]
 800cd5a:	701a      	strb	r2, [r3, #0]
			ring_buffer.head = ((ring_buffer.head + 1) % ring_buffer.size);
 800cd5c:	4b1c      	ldr	r3, [pc, #112]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	3301      	adds	r3, #1
 800cd62:	4a1b      	ldr	r2, [pc, #108]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd64:	6892      	ldr	r2, [r2, #8]
 800cd66:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd6a:	fb01 f202 	mul.w	r2, r1, r2
 800cd6e:	1a9b      	subs	r3, r3, r2
 800cd70:	4a17      	ldr	r2, [pc, #92]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd72:	6013      	str	r3, [r2, #0]
		for (uint32_t i=0; i < size; i++)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d3e2      	bcc.n	800cd48 <ring_buffer_write+0x2c>
		}
		/*Check if the buffer has become full*/
		if (ring_buffer.head == ring_buffer.tail)
 800cd82:	4b13      	ldr	r3, [pc, #76]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d102      	bne.n	800cd94 <ring_buffer_write+0x78>
		{
			ring_buffer.is_full = true;
 800cd8e:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	745a      	strb	r2, [r3, #17]
		}
		/*The buffer is not empty*/
		if(ring_buffer.is_empty)
 800cd94:	4b0e      	ldr	r3, [pc, #56]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd96:	7c1b      	ldrb	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00e      	beq.n	800cdba <ring_buffer_write+0x9e>
		{
			ring_buffer.is_empty = !ring_buffer.is_empty;
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cd9e:	7c1b      	ldrb	r3, [r3, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bf14      	ite	ne
 800cda4:	2301      	movne	r3, #1
 800cda6:	2300      	moveq	r3, #0
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	f083 0301 	eor.w	r3, r3, #1
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	4b06      	ldr	r3, [pc, #24]	; (800cdd0 <ring_buffer_write+0xb4>)
 800cdb8:	741a      	strb	r2, [r3, #16]
		}
		stm32_lock_release(&mutex);
 800cdba:	4804      	ldr	r0, [pc, #16]	; (800cdcc <ring_buffer_write+0xb0>)
 800cdbc:	f7ff fed4 	bl	800cb68 <stm32_lock_release>
		return 0;
 800cdc0:	2300      	movs	r3, #0
	}
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	20000570 	.word	0x20000570
 800cdd0:	2000055c 	.word	0x2000055c

0800cdd4 <ring_buffer_read>:
  * @param  data: External buffer in bytes
  * @param  size: Size of external buffer
  * @retval uint8_t: Result of the operation: 0 if all operations are OK else 1.
  */
uint8_t ring_buffer_read(uint8_t* data, uint32_t size)
{
 800cdd4:	b590      	push	{r4, r7, lr}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	stm32_lock_acquire(&mutex);
 800cdde:	482f      	ldr	r0, [pc, #188]	; (800ce9c <ring_buffer_read+0xc8>)
 800cde0:	f7ff fe8b 	bl	800cafa <stm32_lock_acquire>
	uint32_t bytes_to_read = (ring_buffer.size - ring_buffer_free_bytes());
 800cde4:	4b2e      	ldr	r3, [pc, #184]	; (800cea0 <ring_buffer_read+0xcc>)
 800cde6:	689c      	ldr	r4, [r3, #8]
 800cde8:	f7ff ff6e 	bl	800ccc8 <ring_buffer_free_bytes>
 800cdec:	4603      	mov	r3, r0
 800cdee:	1ae3      	subs	r3, r4, r3
 800cdf0:	60bb      	str	r3, [r7, #8]
	/*ring buffer is empty or the size of the user provided buffer is insufficient to hold all the data.*/
	if(size < bytes_to_read)
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d204      	bcs.n	800ce04 <ring_buffer_read+0x30>
	{
		stm32_lock_release(&mutex);
 800cdfa:	4828      	ldr	r0, [pc, #160]	; (800ce9c <ring_buffer_read+0xc8>)
 800cdfc:	f7ff feb4 	bl	800cb68 <stm32_lock_release>
		return 1;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e046      	b.n	800ce92 <ring_buffer_read+0xbe>
	}
	else
	{
		for (uint32_t i=0; i < bytes_to_read; i++)
 800ce04:	2300      	movs	r3, #0
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	e01f      	b.n	800ce4a <ring_buffer_read+0x76>
		{
			data[i] = ring_buffer.data[ring_buffer.tail];
 800ce0a:	4b25      	ldr	r3, [pc, #148]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	4b24      	ldr	r3, [pc, #144]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	441a      	add	r2, r3
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	440b      	add	r3, r1
 800ce1a:	7812      	ldrb	r2, [r2, #0]
 800ce1c:	701a      	strb	r2, [r3, #0]
			ring_buffer.data[ring_buffer.tail] = '\0';
 800ce1e:	4b20      	ldr	r3, [pc, #128]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	4b1f      	ldr	r3, [pc, #124]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	4413      	add	r3, r2
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
			ring_buffer.tail = ((ring_buffer.tail + 1) % ring_buffer.size);
 800ce2c:	4b1c      	ldr	r3, [pc, #112]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	3301      	adds	r3, #1
 800ce32:	4a1b      	ldr	r2, [pc, #108]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce34:	6892      	ldr	r2, [r2, #8]
 800ce36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce3a:	fb01 f202 	mul.w	r2, r1, r2
 800ce3e:	1a9b      	subs	r3, r3, r2
 800ce40:	4a17      	ldr	r2, [pc, #92]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce42:	6053      	str	r3, [r2, #4]
		for (uint32_t i=0; i < bytes_to_read; i++)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3301      	adds	r3, #1
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d3db      	bcc.n	800ce0a <ring_buffer_read+0x36>
		}

		if (ring_buffer.tail == ring_buffer.head)
 800ce52:	4b13      	ldr	r3, [pc, #76]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	4b12      	ldr	r3, [pc, #72]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d102      	bne.n	800ce64 <ring_buffer_read+0x90>
		{
			ring_buffer.is_empty = true;
 800ce5e:	4b10      	ldr	r3, [pc, #64]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	741a      	strb	r2, [r3, #16]
		}
		if (ring_buffer.is_full)
 800ce64:	4b0e      	ldr	r3, [pc, #56]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce66:	7c5b      	ldrb	r3, [r3, #17]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00e      	beq.n	800ce8a <ring_buffer_read+0xb6>
		{
			ring_buffer.is_full = !ring_buffer.is_full;
 800ce6c:	4b0c      	ldr	r3, [pc, #48]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce6e:	7c5b      	ldrb	r3, [r3, #17]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bf14      	ite	ne
 800ce74:	2301      	movne	r3, #1
 800ce76:	2300      	moveq	r3, #0
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	f083 0301 	eor.w	r3, r3, #1
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <ring_buffer_read+0xcc>)
 800ce88:	745a      	strb	r2, [r3, #17]
		}
		stm32_lock_release(&mutex);
 800ce8a:	4804      	ldr	r0, [pc, #16]	; (800ce9c <ring_buffer_read+0xc8>)
 800ce8c:	f7ff fe6c 	bl	800cb68 <stm32_lock_release>
		return 0;
 800ce90:	2300      	movs	r3, #0
	}
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3714      	adds	r7, #20
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd90      	pop	{r4, r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20000570 	.word	0x20000570
 800cea0:	2000055c 	.word	0x2000055c

0800cea4 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit()
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
	ring_buffer_deinit();
 800cea8:	f7ff feac 	bl	800cc04 <ring_buffer_deinit>
	USBD_DeInit(&hUsbDeviceFS);
 800ceac:	4802      	ldr	r0, [pc, #8]	; (800ceb8 <MX_USB_DEVICE_DeInit+0x14>)
 800ceae:	f7fe fd15 	bl	800b8dc <USBD_DeInit>
}
 800ceb2:	bf00      	nop
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20000574 	.word	0x20000574

0800cebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cec0:	2200      	movs	r2, #0
 800cec2:	4912      	ldr	r1, [pc, #72]	; (800cf0c <MX_USB_DEVICE_Init+0x50>)
 800cec4:	4812      	ldr	r0, [pc, #72]	; (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800cec6:	f7fe fcd9 	bl	800b87c <USBD_Init>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ced0:	f7f4 fc70 	bl	80017b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ced4:	490f      	ldr	r1, [pc, #60]	; (800cf14 <MX_USB_DEVICE_Init+0x58>)
 800ced6:	480e      	ldr	r0, [pc, #56]	; (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800ced8:	f7fe fd34 	bl	800b944 <USBD_RegisterClass>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cee2:	f7f4 fc67 	bl	80017b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cee6:	490c      	ldr	r1, [pc, #48]	; (800cf18 <MX_USB_DEVICE_Init+0x5c>)
 800cee8:	4809      	ldr	r0, [pc, #36]	; (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800ceea:	f7fe fc21 	bl	800b730 <USBD_CDC_RegisterInterface>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cef4:	f7f4 fc5e 	bl	80017b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cef8:	4805      	ldr	r0, [pc, #20]	; (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800cefa:	f7fe fd4a 	bl	800b992 <USBD_Start>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf04:	f7f4 fc56 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf08:	bf00      	nop
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	20000150 	.word	0x20000150
 800cf10:	20000574 	.word	0x20000574
 800cf14:	20000038 	.word	0x20000038
 800cf18:	2000013c 	.word	0x2000013c

0800cf1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	ring_buffer_init();
 800cf20:	f7ff fe4c 	bl	800cbbc <ring_buffer_init>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf24:	2200      	movs	r2, #0
 800cf26:	4905      	ldr	r1, [pc, #20]	; (800cf3c <CDC_Init_FS+0x20>)
 800cf28:	4805      	ldr	r0, [pc, #20]	; (800cf40 <CDC_Init_FS+0x24>)
 800cf2a:	f7fe fc16 	bl	800b75a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf2e:	4905      	ldr	r1, [pc, #20]	; (800cf44 <CDC_Init_FS+0x28>)
 800cf30:	4803      	ldr	r0, [pc, #12]	; (800cf40 <CDC_Init_FS+0x24>)
 800cf32:	f7fe fc30 	bl	800b796 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	200008cc 	.word	0x200008cc
 800cf40:	20000574 	.word	0x20000574
 800cf44:	2000084c 	.word	0x2000084c

0800cf48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */

  return (USBD_OK);
 800cf4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	6039      	str	r1, [r7, #0]
 800cf62:	71fb      	strb	r3, [r7, #7]
 800cf64:	4613      	mov	r3, r2
 800cf66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	2b23      	cmp	r3, #35	; 0x23
 800cf6c:	f200 808f 	bhi.w	800d08e <CDC_Control_FS+0x136>
 800cf70:	a201      	add	r2, pc, #4	; (adr r2, 800cf78 <CDC_Control_FS+0x20>)
 800cf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf76:	bf00      	nop
 800cf78:	0800d08f 	.word	0x0800d08f
 800cf7c:	0800d08f 	.word	0x0800d08f
 800cf80:	0800d08f 	.word	0x0800d08f
 800cf84:	0800d08f 	.word	0x0800d08f
 800cf88:	0800d08f 	.word	0x0800d08f
 800cf8c:	0800d08f 	.word	0x0800d08f
 800cf90:	0800d08f 	.word	0x0800d08f
 800cf94:	0800d08f 	.word	0x0800d08f
 800cf98:	0800d08f 	.word	0x0800d08f
 800cf9c:	0800d08f 	.word	0x0800d08f
 800cfa0:	0800d08f 	.word	0x0800d08f
 800cfa4:	0800d08f 	.word	0x0800d08f
 800cfa8:	0800d08f 	.word	0x0800d08f
 800cfac:	0800d08f 	.word	0x0800d08f
 800cfb0:	0800d08f 	.word	0x0800d08f
 800cfb4:	0800d08f 	.word	0x0800d08f
 800cfb8:	0800d08f 	.word	0x0800d08f
 800cfbc:	0800d08f 	.word	0x0800d08f
 800cfc0:	0800d08f 	.word	0x0800d08f
 800cfc4:	0800d08f 	.word	0x0800d08f
 800cfc8:	0800d08f 	.word	0x0800d08f
 800cfcc:	0800d08f 	.word	0x0800d08f
 800cfd0:	0800d08f 	.word	0x0800d08f
 800cfd4:	0800d08f 	.word	0x0800d08f
 800cfd8:	0800d08f 	.word	0x0800d08f
 800cfdc:	0800d08f 	.word	0x0800d08f
 800cfe0:	0800d08f 	.word	0x0800d08f
 800cfe4:	0800d08f 	.word	0x0800d08f
 800cfe8:	0800d08f 	.word	0x0800d08f
 800cfec:	0800d08f 	.word	0x0800d08f
 800cff0:	0800d08f 	.word	0x0800d08f
 800cff4:	0800d08f 	.word	0x0800d08f
 800cff8:	0800d08f 	.word	0x0800d08f
 800cffc:	0800d08f 	.word	0x0800d08f
 800d000:	0800d009 	.word	0x0800d009
 800d004:	0800d08f 	.word	0x0800d08f
    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	/*When CDC_SET_CONTROL_LINE_STATE is called, once usb is plugged pbuf[2] doesn't exist. As a result it returns 0 and resets rts*/
    	/*this is used as workaround*/
    	if (pbuf[2])
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	3302      	adds	r3, #2
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d017      	beq.n	800d042 <CDC_Control_FS+0xea>
    	{
    		rts = (bool)(pbuf[2] & 0x02);
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	3302      	adds	r3, #2
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 0302 	and.w	r3, r3, #2
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	bf14      	ite	ne
 800d020:	2301      	movne	r3, #1
 800d022:	2300      	moveq	r3, #0
 800d024:	b2da      	uxtb	r2, r3
 800d026:	4b1f      	ldr	r3, [pc, #124]	; (800d0a4 <CDC_Control_FS+0x14c>)
 800d028:	701a      	strb	r2, [r3, #0]
    		dtr = (bool)(pbuf[2] & 0x01);
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	3302      	adds	r3, #2
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	2b00      	cmp	r3, #0
 800d036:	bf14      	ite	ne
 800d038:	2301      	movne	r3, #1
 800d03a:	2300      	moveq	r3, #0
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	4b1a      	ldr	r3, [pc, #104]	; (800d0a8 <CDC_Control_FS+0x150>)
 800d040:	701a      	strb	r2, [r3, #0]
    	}

    	if (is_esp || is_fpga)
 800d042:	4b1a      	ldr	r3, [pc, #104]	; (800d0ac <CDC_Control_FS+0x154>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <CDC_Control_FS+0xfa>
 800d04a:	4b19      	ldr	r3, [pc, #100]	; (800d0b0 <CDC_Control_FS+0x158>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d01f      	beq.n	800d092 <CDC_Control_FS+0x13a>
    	{
			if (!rts)
 800d052:	4b14      	ldr	r3, [pc, #80]	; (800d0a4 <CDC_Control_FS+0x14c>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	b2db      	uxtb	r3, r3
 800d058:	f083 0301 	eor.w	r3, r3, #1
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d003      	beq.n	800d06a <CDC_Control_FS+0x112>
			{
				is_reset_enabled = true;
 800d062:	4b14      	ldr	r3, [pc, #80]	; (800d0b4 <CDC_Control_FS+0x15c>)
 800d064:	2201      	movs	r2, #1
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	e002      	b.n	800d070 <CDC_Control_FS+0x118>
			}
			else
			{
				is_reset_enabled = false;
 800d06a:	4b12      	ldr	r3, [pc, #72]	; (800d0b4 <CDC_Control_FS+0x15c>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	701a      	strb	r2, [r3, #0]
			}
			if (!dtr)
 800d070:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <CDC_Control_FS+0x150>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	f083 0301 	eor.w	r3, r3, #1
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d008      	beq.n	800d092 <CDC_Control_FS+0x13a>
			{
				is_console_enabled = false;
 800d080:	4b0d      	ldr	r3, [pc, #52]	; (800d0b8 <CDC_Control_FS+0x160>)
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
				is_fpga_conf = false;
 800d086:	4b0d      	ldr	r3, [pc, #52]	; (800d0bc <CDC_Control_FS+0x164>)
 800d088:	2200      	movs	r2, #0
 800d08a:	701a      	strb	r2, [r3, #0]
			}
    	}


    break;
 800d08c:	e001      	b.n	800d092 <CDC_Control_FS+0x13a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d08e:	bf00      	nop
 800d090:	e000      	b.n	800d094 <CDC_Control_FS+0x13c>
    break;
 800d092:	bf00      	nop
  }

  return (USBD_OK);
 800d094:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d096:	4618      	mov	r0, r3
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	20000844 	.word	0x20000844
 800d0a8:	20000845 	.word	0x20000845
 800d0ac:	2000054a 	.word	0x2000054a
 800d0b0:	20000549 	.word	0x20000549
 800d0b4:	20000846 	.word	0x20000846
 800d0b8:	20000848 	.word	0x20000848
 800d0bc:	200002a0 	.word	0x200002a0

0800d0c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t len = (uint32_t) *Len; /* Get the size of the packet*/
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	60fb      	str	r3, [r7, #12]

	/*Check if there are bytes available*/
	if (len == 0)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <CDC_Receive_FS+0x1a>
	{
		return USBD_FAIL;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e018      	b.n	800d10c <CDC_Receive_FS+0x4c>
	}
	else
	{
		/*Reset the board hook*/
		if (is_reset_enabled && len == 1)
 800d0da:	4b0e      	ldr	r3, [pc, #56]	; (800d114 <CDC_Receive_FS+0x54>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d009      	beq.n	800d0f8 <CDC_Receive_FS+0x38>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d106      	bne.n	800d0f8 <CDC_Receive_FS+0x38>
		{
			board_reset_hook(Buf[0]);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 f86c 	bl	800d1cc <board_reset_hook>
		else
		{
			return USBD_OK;
		}
	}
	return USBD_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e009      	b.n	800d10c <CDC_Receive_FS+0x4c>
		else if (ring_buffer_write(Buf, len)!= 0)
 800d0f8:	68f9      	ldr	r1, [r7, #12]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fe0e 	bl	800cd1c <ring_buffer_write>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <CDC_Receive_FS+0x4a>
			return USBD_FAIL;
 800d106:	2303      	movs	r3, #3
 800d108:	e000      	b.n	800d10c <CDC_Receive_FS+0x4c>
			return USBD_OK;
 800d10a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20000846 	.word	0x20000846

0800d118 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d128:	4b0d      	ldr	r3, [pc, #52]	; (800d160 <CDC_Transmit_FS+0x48>)
 800d12a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d12e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e00b      	b.n	800d156 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d13e:	887b      	ldrh	r3, [r7, #2]
 800d140:	461a      	mov	r2, r3
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	4806      	ldr	r0, [pc, #24]	; (800d160 <CDC_Transmit_FS+0x48>)
 800d146:	f7fe fb08 	bl	800b75a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d14a:	4805      	ldr	r0, [pc, #20]	; (800d160 <CDC_Transmit_FS+0x48>)
 800d14c:	f7fe fb3c 	bl	800b7c8 <USBD_CDC_TransmitPacket>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20000574 	.word	0x20000574

0800d164 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	371c      	adds	r7, #28
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <CDC_Available_FS>:
  *
  *
  * @retval uint32_t: Number of bytes occupying the ring buffer.
  */
uint32_t CDC_Available_FS()
{
 800d186:	b580      	push	{r7, lr}
 800d188:	af00      	add	r7, sp, #0
	return ring_buffer_available_bytes();
 800d18a:	f7ff fd5d 	bl	800cc48 <ring_buffer_available_bytes>
 800d18e:	4603      	mov	r3, r0
}
 800d190:	4618      	mov	r0, r3
 800d192:	bd80      	pop	{r7, pc}

0800d194 <CDC_Read_FS>:
  * @param  data: pointer to the user provided buffer
  * @param  size: size of the user provided buffer
  * @retval Ring_Buffer_StatusTypeDef: Result of the operation: RING_BUFFER_OK if all operations are OK else RING_BUFFER_ERROR.
  */
uint8_t CDC_Read_FS(uint8_t* data, uint32_t size)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]

	if (ring_buffer_read(data, size)!=0  || USBD_CDC_ReceivePacket(&hUsbDeviceFS)!= USBD_OK)
 800d19e:	6839      	ldr	r1, [r7, #0]
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff fe17 	bl	800cdd4 <ring_buffer_read>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d105      	bne.n	800d1b8 <CDC_Read_FS+0x24>
 800d1ac:	4806      	ldr	r0, [pc, #24]	; (800d1c8 <CDC_Read_FS+0x34>)
 800d1ae:	f7fe fb3b 	bl	800b828 <USBD_CDC_ReceivePacket>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <CDC_Read_FS+0x28>
	{
		return 1;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e000      	b.n	800d1be <CDC_Read_FS+0x2a>
	}
	else
	{
		return 0;
 800d1bc:	2300      	movs	r3, #0
	}

}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000574 	.word	0x20000574

0800d1cc <board_reset_hook>:

void board_reset_hook(uint8_t Buf)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	71fb      	strb	r3, [r7, #7]
	if (Buf == (uint8_t)RESET)
 800d1d6:	79fb      	ldrb	r3, [r7, #7]
 800d1d8:	2b99      	cmp	r3, #153	; 0x99
 800d1da:	d102      	bne.n	800d1e2 <board_reset_hook+0x16>
	{
		is_reset = true;
 800d1dc:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <board_reset_hook+0x24>)
 800d1de:	2201      	movs	r2, #1
 800d1e0:	701a      	strb	r2, [r3, #0]
	}
}
 800d1e2:	bf00      	nop
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	20000847 	.word	0x20000847

0800d1f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	6039      	str	r1, [r7, #0]
 800d1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2212      	movs	r2, #18
 800d204:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d206:	4b03      	ldr	r3, [pc, #12]	; (800d214 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	2000016c 	.word	0x2000016c

0800d218 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	6039      	str	r1, [r7, #0]
 800d222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2204      	movs	r2, #4
 800d228:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d22a:	4b03      	ldr	r3, [pc, #12]	; (800d238 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	20000180 	.word	0x20000180

0800d23c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	6039      	str	r1, [r7, #0]
 800d246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d105      	bne.n	800d25a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	4907      	ldr	r1, [pc, #28]	; (800d270 <USBD_FS_ProductStrDescriptor+0x34>)
 800d252:	4808      	ldr	r0, [pc, #32]	; (800d274 <USBD_FS_ProductStrDescriptor+0x38>)
 800d254:	f7ff fb5b 	bl	800c90e <USBD_GetString>
 800d258:	e004      	b.n	800d264 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	4904      	ldr	r1, [pc, #16]	; (800d270 <USBD_FS_ProductStrDescriptor+0x34>)
 800d25e:	4805      	ldr	r0, [pc, #20]	; (800d274 <USBD_FS_ProductStrDescriptor+0x38>)
 800d260:	f7ff fb55 	bl	800c90e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d264:	4b02      	ldr	r3, [pc, #8]	; (800d270 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	200018cc 	.word	0x200018cc
 800d274:	0800def0 	.word	0x0800def0

0800d278 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	6039      	str	r1, [r7, #0]
 800d282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	4904      	ldr	r1, [pc, #16]	; (800d298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d288:	4804      	ldr	r0, [pc, #16]	; (800d29c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d28a:	f7ff fb40 	bl	800c90e <USBD_GetString>
  return USBD_StrDesc;
 800d28e:	4b02      	ldr	r3, [pc, #8]	; (800d298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	200018cc 	.word	0x200018cc
 800d29c:	0800df08 	.word	0x0800df08

0800d2a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	221a      	movs	r2, #26
 800d2b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2b2:	f000 f843 	bl	800d33c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2b6:	4b02      	ldr	r3, [pc, #8]	; (800d2c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	20000184 	.word	0x20000184

0800d2c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d105      	bne.n	800d2e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	4907      	ldr	r1, [pc, #28]	; (800d2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2da:	4808      	ldr	r0, [pc, #32]	; (800d2fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2dc:	f7ff fb17 	bl	800c90e <USBD_GetString>
 800d2e0:	e004      	b.n	800d2ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	4904      	ldr	r1, [pc, #16]	; (800d2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2e6:	4805      	ldr	r0, [pc, #20]	; (800d2fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2e8:	f7ff fb11 	bl	800c90e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2ec:	4b02      	ldr	r3, [pc, #8]	; (800d2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	200018cc 	.word	0x200018cc
 800d2fc:	0800df1c 	.word	0x0800df1c

0800d300 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	4603      	mov	r3, r0
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d105      	bne.n	800d31e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4907      	ldr	r1, [pc, #28]	; (800d334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d316:	4808      	ldr	r0, [pc, #32]	; (800d338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d318:	f7ff faf9 	bl	800c90e <USBD_GetString>
 800d31c:	e004      	b.n	800d328 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	4904      	ldr	r1, [pc, #16]	; (800d334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d322:	4805      	ldr	r0, [pc, #20]	; (800d338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d324:	f7ff faf3 	bl	800c90e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d328:	4b02      	ldr	r3, [pc, #8]	; (800d334 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	200018cc 	.word	0x200018cc
 800d338:	0800df28 	.word	0x0800df28

0800d33c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d342:	4b0f      	ldr	r3, [pc, #60]	; (800d380 <Get_SerialNum+0x44>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <Get_SerialNum+0x48>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d34e:	4b0e      	ldr	r3, [pc, #56]	; (800d388 <Get_SerialNum+0x4c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4413      	add	r3, r2
 800d35a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d009      	beq.n	800d376 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d362:	2208      	movs	r2, #8
 800d364:	4909      	ldr	r1, [pc, #36]	; (800d38c <Get_SerialNum+0x50>)
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f000 f814 	bl	800d394 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d36c:	2204      	movs	r2, #4
 800d36e:	4908      	ldr	r1, [pc, #32]	; (800d390 <Get_SerialNum+0x54>)
 800d370:	68b8      	ldr	r0, [r7, #8]
 800d372:	f000 f80f 	bl	800d394 <IntToUnicode>
  }
}
 800d376:	bf00      	nop
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	1fff7590 	.word	0x1fff7590
 800d384:	1fff7594 	.word	0x1fff7594
 800d388:	1fff7598 	.word	0x1fff7598
 800d38c:	20000186 	.word	0x20000186
 800d390:	20000196 	.word	0x20000196

0800d394 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d394:	b480      	push	{r7}
 800d396:	b087      	sub	sp, #28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	75fb      	strb	r3, [r7, #23]
 800d3aa:	e027      	b.n	800d3fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	0f1b      	lsrs	r3, r3, #28
 800d3b0:	2b09      	cmp	r3, #9
 800d3b2:	d80b      	bhi.n	800d3cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	0f1b      	lsrs	r3, r3, #28
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	005b      	lsls	r3, r3, #1
 800d3be:	4619      	mov	r1, r3
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	440b      	add	r3, r1
 800d3c4:	3230      	adds	r2, #48	; 0x30
 800d3c6:	b2d2      	uxtb	r2, r2
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	e00a      	b.n	800d3e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	0f1b      	lsrs	r3, r3, #28
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	440b      	add	r3, r1
 800d3dc:	3237      	adds	r2, #55	; 0x37
 800d3de:	b2d2      	uxtb	r2, r2
 800d3e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	011b      	lsls	r3, r3, #4
 800d3e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	75fb      	strb	r3, [r7, #23]
 800d3fc:	7dfa      	ldrb	r2, [r7, #23]
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	429a      	cmp	r2, r3
 800d402:	d3d3      	bcc.n	800d3ac <IntToUnicode+0x18>
  }
}
 800d404:	bf00      	nop
 800d406:	bf00      	nop
 800d408:	371c      	adds	r7, #28
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
	...

0800d414 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b0a4      	sub	sp, #144	; 0x90
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d41c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d420:	2200      	movs	r2, #0
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	605a      	str	r2, [r3, #4]
 800d426:	609a      	str	r2, [r3, #8]
 800d428:	60da      	str	r2, [r3, #12]
 800d42a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d42c:	f107 0314 	add.w	r3, r7, #20
 800d430:	2268      	movs	r2, #104	; 0x68
 800d432:	2100      	movs	r1, #0
 800d434:	4618      	mov	r0, r3
 800d436:	f000 fc35 	bl	800dca4 <memset>
  if(pcdHandle->Instance==USB)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a26      	ldr	r2, [pc, #152]	; (800d4d8 <HAL_PCD_MspInit+0xc4>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d144      	bne.n	800d4ce <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d448:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d44a:	2300      	movs	r3, #0
 800d44c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d44e:	f107 0314 	add.w	r3, r7, #20
 800d452:	4618      	mov	r0, r3
 800d454:	f7f9 f880 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800d45e:	f7f4 f9a9 	bl	80017b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d462:	4b1e      	ldr	r3, [pc, #120]	; (800d4dc <HAL_PCD_MspInit+0xc8>)
 800d464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d466:	4a1d      	ldr	r2, [pc, #116]	; (800d4dc <HAL_PCD_MspInit+0xc8>)
 800d468:	f043 0301 	orr.w	r3, r3, #1
 800d46c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d46e:	4b1b      	ldr	r3, [pc, #108]	; (800d4dc <HAL_PCD_MspInit+0xc8>)
 800d470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	613b      	str	r3, [r7, #16]
 800d478:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d47a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d47e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d480:	2302      	movs	r3, #2
 800d482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d486:	2300      	movs	r3, #0
 800d488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d48c:	2303      	movs	r3, #3
 800d48e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800d492:	230a      	movs	r3, #10
 800d494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d498:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d49c:	4619      	mov	r1, r3
 800d49e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4a2:	f7f6 f8b7 	bl	8003614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d4a6:	4b0d      	ldr	r3, [pc, #52]	; (800d4dc <HAL_PCD_MspInit+0xc8>)
 800d4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4aa:	4a0c      	ldr	r2, [pc, #48]	; (800d4dc <HAL_PCD_MspInit+0xc8>)
 800d4ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d4b0:	6593      	str	r3, [r2, #88]	; 0x58
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <HAL_PCD_MspInit+0xc8>)
 800d4b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	2043      	movs	r0, #67	; 0x43
 800d4c4:	f7f4 ff99 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d4c8:	2043      	movs	r0, #67	; 0x43
 800d4ca:	f7f4 ffb2 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d4ce:	bf00      	nop
 800d4d0:	3790      	adds	r7, #144	; 0x90
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	40006800 	.word	0x40006800
 800d4dc:	40021000 	.word	0x40021000

0800d4e0 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a0a      	ldr	r2, [pc, #40]	; (800d518 <HAL_PCD_MspDeInit+0x38>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d10e      	bne.n	800d510 <HAL_PCD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 800d4f2:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <HAL_PCD_MspDeInit+0x3c>)
 800d4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4f6:	4a09      	ldr	r2, [pc, #36]	; (800d51c <HAL_PCD_MspDeInit+0x3c>)
 800d4f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d4fc:	6593      	str	r3, [r2, #88]	; 0x58

    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800d4fe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d506:	f7f6 f9ff 	bl	8003908 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_IRQn);
 800d50a:	2043      	movs	r0, #67	; 0x43
 800d50c:	f7f4 ff9f 	bl	800244e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	40006800 	.word	0x40006800
 800d51c:	40021000 	.word	0x40021000

0800d520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d534:	4619      	mov	r1, r3
 800d536:	4610      	mov	r0, r2
 800d538:	f7fe fa76 	bl	800ba28 <USBD_LL_SetupStage>
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800d556:	78fa      	ldrb	r2, [r7, #3]
 800d558:	6879      	ldr	r1, [r7, #4]
 800d55a:	4613      	mov	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	440b      	add	r3, r1
 800d564:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	4619      	mov	r1, r3
 800d56e:	f7fe fab0 	bl	800bad2 <USBD_LL_DataOutStage>
}
 800d572:	bf00      	nop
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800d58c:	78fa      	ldrb	r2, [r7, #3]
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	4613      	mov	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	440b      	add	r3, r1
 800d59a:	3340      	adds	r3, #64	; 0x40
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	78fb      	ldrb	r3, [r7, #3]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f7fe faf9 	bl	800bb98 <USBD_LL_DataInStage>
}
 800d5a6:	bf00      	nop
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fe fc0d 	bl	800bddc <USBD_LL_SOF>
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d001      	beq.n	800d5e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d5de:	f7f4 f8e9 	bl	80017b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d5e8:	7bfa      	ldrb	r2, [r7, #15]
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fbb7 	bl	800bd60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fe fb63 	bl	800bcc4 <USBD_LL_Reset>
}
 800d5fe:	bf00      	nop
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fbb2 	bl	800bd80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d005      	beq.n	800d630 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d624:	4b04      	ldr	r3, [pc, #16]	; (800d638 <HAL_PCD_SuspendCallback+0x30>)
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	4a03      	ldr	r2, [pc, #12]	; (800d638 <HAL_PCD_SuspendCallback+0x30>)
 800d62a:	f043 0306 	orr.w	r3, r3, #6
 800d62e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	e000ed00 	.word	0xe000ed00

0800d63c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	699b      	ldr	r3, [r3, #24]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d007      	beq.n	800d65c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d64c:	4b08      	ldr	r3, [pc, #32]	; (800d670 <HAL_PCD_ResumeCallback+0x34>)
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	4a07      	ldr	r2, [pc, #28]	; (800d670 <HAL_PCD_ResumeCallback+0x34>)
 800d652:	f023 0306 	bic.w	r3, r3, #6
 800d656:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d658:	f000 fae4 	bl	800dc24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe fba2 	bl	800bdac <USBD_LL_Resume>
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	e000ed00 	.word	0xe000ed00

0800d674 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d67c:	f7f8 f89e 	bl	80057bc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d680:	4a2b      	ldr	r2, [pc, #172]	; (800d730 <USBD_LL_Init+0xbc>)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a29      	ldr	r2, [pc, #164]	; (800d730 <USBD_LL_Init+0xbc>)
 800d68c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d690:	4b27      	ldr	r3, [pc, #156]	; (800d730 <USBD_LL_Init+0xbc>)
 800d692:	4a28      	ldr	r2, [pc, #160]	; (800d734 <USBD_LL_Init+0xc0>)
 800d694:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d696:	4b26      	ldr	r3, [pc, #152]	; (800d730 <USBD_LL_Init+0xbc>)
 800d698:	2208      	movs	r2, #8
 800d69a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d69c:	4b24      	ldr	r3, [pc, #144]	; (800d730 <USBD_LL_Init+0xbc>)
 800d69e:	2202      	movs	r2, #2
 800d6a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6a2:	4b23      	ldr	r3, [pc, #140]	; (800d730 <USBD_LL_Init+0xbc>)
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d6a8:	4b21      	ldr	r3, [pc, #132]	; (800d730 <USBD_LL_Init+0xbc>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d6ae:	4b20      	ldr	r3, [pc, #128]	; (800d730 <USBD_LL_Init+0xbc>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d6b4:	4b1e      	ldr	r3, [pc, #120]	; (800d730 <USBD_LL_Init+0xbc>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d6ba:	4b1d      	ldr	r3, [pc, #116]	; (800d730 <USBD_LL_Init+0xbc>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d6c0:	481b      	ldr	r0, [pc, #108]	; (800d730 <USBD_LL_Init+0xbc>)
 800d6c2:	f7f6 fa45 	bl	8003b50 <HAL_PCD_Init>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d6cc:	f7f4 f872 	bl	80017b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d6d6:	2318      	movs	r3, #24
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2100      	movs	r1, #0
 800d6dc:	f7f7 ff8f 	bl	80055fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d6e6:	2358      	movs	r3, #88	; 0x58
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2180      	movs	r1, #128	; 0x80
 800d6ec:	f7f7 ff87 	bl	80055fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d6f6:	23c0      	movs	r3, #192	; 0xc0
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	2181      	movs	r1, #129	; 0x81
 800d6fc:	f7f7 ff7f 	bl	80055fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d706:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d70a:	2200      	movs	r2, #0
 800d70c:	2101      	movs	r1, #1
 800d70e:	f7f7 ff76 	bl	80055fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d71c:	2200      	movs	r2, #0
 800d71e:	2182      	movs	r1, #130	; 0x82
 800d720:	f7f7 ff6d 	bl	80055fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20001acc 	.word	0x20001acc
 800d734:	40006800 	.word	0x40006800

0800d738 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d74e:	4618      	mov	r0, r3
 800d750:	f7f6 fb15 	bl	8003d7e <HAL_PCD_DeInit>
 800d754:	4603      	mov	r3, r0
 800d756:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d758:	7bbb      	ldrb	r3, [r7, #14]
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d816      	bhi.n	800d78c <USBD_LL_DeInit+0x54>
 800d75e:	a201      	add	r2, pc, #4	; (adr r2, 800d764 <USBD_LL_DeInit+0x2c>)
 800d760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d764:	0800d775 	.word	0x0800d775
 800d768:	0800d77b 	.word	0x0800d77b
 800d76c:	0800d781 	.word	0x0800d781
 800d770:	0800d787 	.word	0x0800d787
    case HAL_OK :
      usb_status = USBD_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	73fb      	strb	r3, [r7, #15]
    break;
 800d778:	e00b      	b.n	800d792 <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d77a:	2303      	movs	r3, #3
 800d77c:	73fb      	strb	r3, [r7, #15]
    break;
 800d77e:	e008      	b.n	800d792 <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d780:	2301      	movs	r3, #1
 800d782:	73fb      	strb	r3, [r7, #15]
    break;
 800d784:	e005      	b.n	800d792 <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d786:	2303      	movs	r3, #3
 800d788:	73fb      	strb	r3, [r7, #15]
    break;
 800d78a:	e002      	b.n	800d792 <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d78c:	2303      	movs	r3, #3
 800d78e:	73fb      	strb	r3, [r7, #15]
    break;
 800d790:	bf00      	nop
  }
  return usb_status;
 800d792:	7bfb      	ldrb	r3, [r7, #15]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7f6 fb06 	bl	8003dc4 <HAL_PCD_Start>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d7bc:	7bbb      	ldrb	r3, [r7, #14]
 800d7be:	2b03      	cmp	r3, #3
 800d7c0:	d816      	bhi.n	800d7f0 <USBD_LL_Start+0x54>
 800d7c2:	a201      	add	r2, pc, #4	; (adr r2, 800d7c8 <USBD_LL_Start+0x2c>)
 800d7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c8:	0800d7d9 	.word	0x0800d7d9
 800d7cc:	0800d7df 	.word	0x0800d7df
 800d7d0:	0800d7e5 	.word	0x0800d7e5
 800d7d4:	0800d7eb 	.word	0x0800d7eb
    case HAL_OK :
      usb_status = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
    break;
 800d7dc:	e00b      	b.n	800d7f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7de:	2303      	movs	r3, #3
 800d7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e2:	e008      	b.n	800d7f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e8:	e005      	b.n	800d7f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ee:	e002      	b.n	800d7f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d7f0:	2303      	movs	r3, #3
 800d7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f4:	bf00      	nop
  }
  return usb_status;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d816:	4618      	mov	r0, r3
 800d818:	f7f6 faf6 	bl	8003e08 <HAL_PCD_Stop>
 800d81c:	4603      	mov	r3, r0
 800d81e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d820:	7bbb      	ldrb	r3, [r7, #14]
 800d822:	2b03      	cmp	r3, #3
 800d824:	d816      	bhi.n	800d854 <USBD_LL_Stop+0x54>
 800d826:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <USBD_LL_Stop+0x2c>)
 800d828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82c:	0800d83d 	.word	0x0800d83d
 800d830:	0800d843 	.word	0x0800d843
 800d834:	0800d849 	.word	0x0800d849
 800d838:	0800d84f 	.word	0x0800d84f
    case HAL_OK :
      usb_status = USBD_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]
    break;
 800d840:	e00b      	b.n	800d85a <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d842:	2303      	movs	r3, #3
 800d844:	73fb      	strb	r3, [r7, #15]
    break;
 800d846:	e008      	b.n	800d85a <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d848:	2301      	movs	r3, #1
 800d84a:	73fb      	strb	r3, [r7, #15]
    break;
 800d84c:	e005      	b.n	800d85a <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d84e:	2303      	movs	r3, #3
 800d850:	73fb      	strb	r3, [r7, #15]
    break;
 800d852:	e002      	b.n	800d85a <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d854:	2303      	movs	r3, #3
 800d856:	73fb      	strb	r3, [r7, #15]
    break;
 800d858:	bf00      	nop
  }
  return usb_status;
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	4608      	mov	r0, r1
 800d86e:	4611      	mov	r1, r2
 800d870:	461a      	mov	r2, r3
 800d872:	4603      	mov	r3, r0
 800d874:	70fb      	strb	r3, [r7, #3]
 800d876:	460b      	mov	r3, r1
 800d878:	70bb      	strb	r3, [r7, #2]
 800d87a:	4613      	mov	r3, r2
 800d87c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d88c:	78bb      	ldrb	r3, [r7, #2]
 800d88e:	883a      	ldrh	r2, [r7, #0]
 800d890:	78f9      	ldrb	r1, [r7, #3]
 800d892:	f7f6 fc27 	bl	80040e4 <HAL_PCD_EP_Open>
 800d896:	4603      	mov	r3, r0
 800d898:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d89a:	7bbb      	ldrb	r3, [r7, #14]
 800d89c:	2b03      	cmp	r3, #3
 800d89e:	d817      	bhi.n	800d8d0 <USBD_LL_OpenEP+0x6c>
 800d8a0:	a201      	add	r2, pc, #4	; (adr r2, 800d8a8 <USBD_LL_OpenEP+0x44>)
 800d8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a6:	bf00      	nop
 800d8a8:	0800d8b9 	.word	0x0800d8b9
 800d8ac:	0800d8bf 	.word	0x0800d8bf
 800d8b0:	0800d8c5 	.word	0x0800d8c5
 800d8b4:	0800d8cb 	.word	0x0800d8cb
    case HAL_OK :
      usb_status = USBD_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d8bc:	e00b      	b.n	800d8d6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c2:	e008      	b.n	800d8d6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c8:	e005      	b.n	800d8d6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ce:	e002      	b.n	800d8d6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d4:	bf00      	nop
  }
  return usb_status;
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d8fa:	78fa      	ldrb	r2, [r7, #3]
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f6 fc58 	bl	80041b4 <HAL_PCD_EP_Close>
 800d904:	4603      	mov	r3, r0
 800d906:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d908:	7bbb      	ldrb	r3, [r7, #14]
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d816      	bhi.n	800d93c <USBD_LL_CloseEP+0x5c>
 800d90e:	a201      	add	r2, pc, #4	; (adr r2, 800d914 <USBD_LL_CloseEP+0x34>)
 800d910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d914:	0800d925 	.word	0x0800d925
 800d918:	0800d92b 	.word	0x0800d92b
 800d91c:	0800d931 	.word	0x0800d931
 800d920:	0800d937 	.word	0x0800d937
    case HAL_OK :
      usb_status = USBD_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	73fb      	strb	r3, [r7, #15]
    break;
 800d928:	e00b      	b.n	800d942 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d92a:	2303      	movs	r3, #3
 800d92c:	73fb      	strb	r3, [r7, #15]
    break;
 800d92e:	e008      	b.n	800d942 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d930:	2301      	movs	r3, #1
 800d932:	73fb      	strb	r3, [r7, #15]
    break;
 800d934:	e005      	b.n	800d942 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d936:	2303      	movs	r3, #3
 800d938:	73fb      	strb	r3, [r7, #15]
    break;
 800d93a:	e002      	b.n	800d942 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d93c:	2303      	movs	r3, #3
 800d93e:	73fb      	strb	r3, [r7, #15]
    break;
 800d940:	bf00      	nop
  }
  return usb_status;
 800d942:	7bfb      	ldrb	r3, [r7, #15]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d966:	78fa      	ldrb	r2, [r7, #3]
 800d968:	4611      	mov	r1, r2
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7f6 fd06 	bl	800437c <HAL_PCD_EP_SetStall>
 800d970:	4603      	mov	r3, r0
 800d972:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	2b03      	cmp	r3, #3
 800d978:	d816      	bhi.n	800d9a8 <USBD_LL_StallEP+0x5c>
 800d97a:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <USBD_LL_StallEP+0x34>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d991 	.word	0x0800d991
 800d984:	0800d997 	.word	0x0800d997
 800d988:	0800d99d 	.word	0x0800d99d
 800d98c:	0800d9a3 	.word	0x0800d9a3
    case HAL_OK :
      usb_status = USBD_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	73fb      	strb	r3, [r7, #15]
    break;
 800d994:	e00b      	b.n	800d9ae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	73fb      	strb	r3, [r7, #15]
    break;
 800d99a:	e008      	b.n	800d9ae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d99c:	2301      	movs	r3, #1
 800d99e:	73fb      	strb	r3, [r7, #15]
    break;
 800d9a0:	e005      	b.n	800d9ae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9a6:	e002      	b.n	800d9ae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ac:	bf00      	nop
  }
  return usb_status;
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3710      	adds	r7, #16
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9d2:	78fa      	ldrb	r2, [r7, #3]
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7f6 fd32 	bl	8004440 <HAL_PCD_EP_ClrStall>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d9e0:	7bbb      	ldrb	r3, [r7, #14]
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d816      	bhi.n	800da14 <USBD_LL_ClearStallEP+0x5c>
 800d9e6:	a201      	add	r2, pc, #4	; (adr r2, 800d9ec <USBD_LL_ClearStallEP+0x34>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800d9fd 	.word	0x0800d9fd
 800d9f0:	0800da03 	.word	0x0800da03
 800d9f4:	0800da09 	.word	0x0800da09
 800d9f8:	0800da0f 	.word	0x0800da0f
    case HAL_OK :
      usb_status = USBD_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800da00:	e00b      	b.n	800da1a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da02:	2303      	movs	r3, #3
 800da04:	73fb      	strb	r3, [r7, #15]
    break;
 800da06:	e008      	b.n	800da1a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da08:	2301      	movs	r3, #1
 800da0a:	73fb      	strb	r3, [r7, #15]
    break;
 800da0c:	e005      	b.n	800da1a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da0e:	2303      	movs	r3, #3
 800da10:	73fb      	strb	r3, [r7, #15]
    break;
 800da12:	e002      	b.n	800da1a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800da14:	2303      	movs	r3, #3
 800da16:	73fb      	strb	r3, [r7, #15]
    break;
 800da18:	bf00      	nop
  }
  return usb_status;
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	da0c      	bge.n	800da5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da46:	68f9      	ldr	r1, [r7, #12]
 800da48:	1c5a      	adds	r2, r3, #1
 800da4a:	4613      	mov	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4413      	add	r3, r2
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	440b      	add	r3, r1
 800da54:	3306      	adds	r3, #6
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	e00b      	b.n	800da72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da5a:	78fb      	ldrb	r3, [r7, #3]
 800da5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da60:	68f9      	ldr	r1, [r7, #12]
 800da62:	4613      	mov	r3, r2
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	00db      	lsls	r3, r3, #3
 800da6a:	440b      	add	r3, r1
 800da6c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800da70:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da72:	4618      	mov	r0, r3
 800da74:	3714      	adds	r7, #20
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
	...

0800da80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da8c:	2300      	movs	r3, #0
 800da8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da9a:	78fa      	ldrb	r2, [r7, #3]
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7f6 fafb 	bl	800409a <HAL_PCD_SetAddress>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d816      	bhi.n	800dadc <USBD_LL_SetUSBAddress+0x5c>
 800daae:	a201      	add	r2, pc, #4	; (adr r2, 800dab4 <USBD_LL_SetUSBAddress+0x34>)
 800dab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab4:	0800dac5 	.word	0x0800dac5
 800dab8:	0800dacb 	.word	0x0800dacb
 800dabc:	0800dad1 	.word	0x0800dad1
 800dac0:	0800dad7 	.word	0x0800dad7
    case HAL_OK :
      usb_status = USBD_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]
    break;
 800dac8:	e00b      	b.n	800dae2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daca:	2303      	movs	r3, #3
 800dacc:	73fb      	strb	r3, [r7, #15]
    break;
 800dace:	e008      	b.n	800dae2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dad0:	2301      	movs	r3, #1
 800dad2:	73fb      	strb	r3, [r7, #15]
    break;
 800dad4:	e005      	b.n	800dae2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dad6:	2303      	movs	r3, #3
 800dad8:	73fb      	strb	r3, [r7, #15]
    break;
 800dada:	e002      	b.n	800dae2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dadc:	2303      	movs	r3, #3
 800dade:	73fb      	strb	r3, [r7, #15]
    break;
 800dae0:	bf00      	nop
  }
  return usb_status;
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	607a      	str	r2, [r7, #4]
 800daf6:	603b      	str	r3, [r7, #0]
 800daf8:	460b      	mov	r3, r1
 800dafa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db0a:	7af9      	ldrb	r1, [r7, #11]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	f7f6 fbf0 	bl	80042f4 <HAL_PCD_EP_Transmit>
 800db14:	4603      	mov	r3, r0
 800db16:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800db18:	7dbb      	ldrb	r3, [r7, #22]
 800db1a:	2b03      	cmp	r3, #3
 800db1c:	d816      	bhi.n	800db4c <USBD_LL_Transmit+0x60>
 800db1e:	a201      	add	r2, pc, #4	; (adr r2, 800db24 <USBD_LL_Transmit+0x38>)
 800db20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db24:	0800db35 	.word	0x0800db35
 800db28:	0800db3b 	.word	0x0800db3b
 800db2c:	0800db41 	.word	0x0800db41
 800db30:	0800db47 	.word	0x0800db47
    case HAL_OK :
      usb_status = USBD_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	75fb      	strb	r3, [r7, #23]
    break;
 800db38:	e00b      	b.n	800db52 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db3a:	2303      	movs	r3, #3
 800db3c:	75fb      	strb	r3, [r7, #23]
    break;
 800db3e:	e008      	b.n	800db52 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db40:	2301      	movs	r3, #1
 800db42:	75fb      	strb	r3, [r7, #23]
    break;
 800db44:	e005      	b.n	800db52 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db46:	2303      	movs	r3, #3
 800db48:	75fb      	strb	r3, [r7, #23]
    break;
 800db4a:	e002      	b.n	800db52 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800db4c:	2303      	movs	r3, #3
 800db4e:	75fb      	strb	r3, [r7, #23]
    break;
 800db50:	bf00      	nop
  }
  return usb_status;
 800db52:	7dfb      	ldrb	r3, [r7, #23]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	607a      	str	r2, [r7, #4]
 800db66:	603b      	str	r3, [r7, #0]
 800db68:	460b      	mov	r3, r1
 800db6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db7a:	7af9      	ldrb	r1, [r7, #11]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	f7f6 fb62 	bl	8004248 <HAL_PCD_EP_Receive>
 800db84:	4603      	mov	r3, r0
 800db86:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800db88:	7dbb      	ldrb	r3, [r7, #22]
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d816      	bhi.n	800dbbc <USBD_LL_PrepareReceive+0x60>
 800db8e:	a201      	add	r2, pc, #4	; (adr r2, 800db94 <USBD_LL_PrepareReceive+0x38>)
 800db90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db94:	0800dba5 	.word	0x0800dba5
 800db98:	0800dbab 	.word	0x0800dbab
 800db9c:	0800dbb1 	.word	0x0800dbb1
 800dba0:	0800dbb7 	.word	0x0800dbb7
    case HAL_OK :
      usb_status = USBD_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	75fb      	strb	r3, [r7, #23]
    break;
 800dba8:	e00b      	b.n	800dbc2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	75fb      	strb	r3, [r7, #23]
    break;
 800dbae:	e008      	b.n	800dbc2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	75fb      	strb	r3, [r7, #23]
    break;
 800dbb4:	e005      	b.n	800dbc2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	75fb      	strb	r3, [r7, #23]
    break;
 800dbba:	e002      	b.n	800dbc2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	75fb      	strb	r3, [r7, #23]
    break;
 800dbc0:	bf00      	nop
  }
  return usb_status;
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3718      	adds	r7, #24
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbde:	78fa      	ldrb	r2, [r7, #3]
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7f6 fb6e 	bl	80042c4 <HAL_PCD_EP_GetRxCount>
 800dbe8:	4603      	mov	r3, r0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
	...

0800dbf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dbfc:	4b03      	ldr	r3, [pc, #12]	; (800dc0c <USBD_static_malloc+0x18>)
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	20001dc4 	.word	0x20001dc4

0800dc10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]

}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dc28:	f7f3 fb1c 	bl	8001264 <SystemClock_Config>
}
 800dc2c:	bf00      	nop
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <calloc>:
 800dc30:	4b02      	ldr	r3, [pc, #8]	; (800dc3c <calloc+0xc>)
 800dc32:	460a      	mov	r2, r1
 800dc34:	4601      	mov	r1, r0
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	f000 b83c 	b.w	800dcb4 <_calloc_r>
 800dc3c:	200001a0 	.word	0x200001a0

0800dc40 <__errno>:
 800dc40:	4b01      	ldr	r3, [pc, #4]	; (800dc48 <__errno+0x8>)
 800dc42:	6818      	ldr	r0, [r3, #0]
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	200001a0 	.word	0x200001a0

0800dc4c <__libc_init_array>:
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	4d0d      	ldr	r5, [pc, #52]	; (800dc84 <__libc_init_array+0x38>)
 800dc50:	4c0d      	ldr	r4, [pc, #52]	; (800dc88 <__libc_init_array+0x3c>)
 800dc52:	1b64      	subs	r4, r4, r5
 800dc54:	10a4      	asrs	r4, r4, #2
 800dc56:	2600      	movs	r6, #0
 800dc58:	42a6      	cmp	r6, r4
 800dc5a:	d109      	bne.n	800dc70 <__libc_init_array+0x24>
 800dc5c:	4d0b      	ldr	r5, [pc, #44]	; (800dc8c <__libc_init_array+0x40>)
 800dc5e:	4c0c      	ldr	r4, [pc, #48]	; (800dc90 <__libc_init_array+0x44>)
 800dc60:	f000 f93a 	bl	800ded8 <_init>
 800dc64:	1b64      	subs	r4, r4, r5
 800dc66:	10a4      	asrs	r4, r4, #2
 800dc68:	2600      	movs	r6, #0
 800dc6a:	42a6      	cmp	r6, r4
 800dc6c:	d105      	bne.n	800dc7a <__libc_init_array+0x2e>
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}
 800dc70:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc74:	4798      	blx	r3
 800dc76:	3601      	adds	r6, #1
 800dc78:	e7ee      	b.n	800dc58 <__libc_init_array+0xc>
 800dc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc7e:	4798      	blx	r3
 800dc80:	3601      	adds	r6, #1
 800dc82:	e7f2      	b.n	800dc6a <__libc_init_array+0x1e>
 800dc84:	0800df88 	.word	0x0800df88
 800dc88:	0800df88 	.word	0x0800df88
 800dc8c:	0800df88 	.word	0x0800df88
 800dc90:	0800df8c 	.word	0x0800df8c

0800dc94 <free>:
 800dc94:	4b02      	ldr	r3, [pc, #8]	; (800dca0 <free+0xc>)
 800dc96:	4601      	mov	r1, r0
 800dc98:	6818      	ldr	r0, [r3, #0]
 800dc9a:	f000 b821 	b.w	800dce0 <_free_r>
 800dc9e:	bf00      	nop
 800dca0:	200001a0 	.word	0x200001a0

0800dca4 <memset>:
 800dca4:	4402      	add	r2, r0
 800dca6:	4603      	mov	r3, r0
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d100      	bne.n	800dcae <memset+0xa>
 800dcac:	4770      	bx	lr
 800dcae:	f803 1b01 	strb.w	r1, [r3], #1
 800dcb2:	e7f9      	b.n	800dca8 <memset+0x4>

0800dcb4 <_calloc_r>:
 800dcb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcb6:	fba1 2402 	umull	r2, r4, r1, r2
 800dcba:	b94c      	cbnz	r4, 800dcd0 <_calloc_r+0x1c>
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	9201      	str	r2, [sp, #4]
 800dcc0:	f000 f87a 	bl	800ddb8 <_malloc_r>
 800dcc4:	9a01      	ldr	r2, [sp, #4]
 800dcc6:	4605      	mov	r5, r0
 800dcc8:	b930      	cbnz	r0, 800dcd8 <_calloc_r+0x24>
 800dcca:	4628      	mov	r0, r5
 800dccc:	b003      	add	sp, #12
 800dcce:	bd30      	pop	{r4, r5, pc}
 800dcd0:	220c      	movs	r2, #12
 800dcd2:	6002      	str	r2, [r0, #0]
 800dcd4:	2500      	movs	r5, #0
 800dcd6:	e7f8      	b.n	800dcca <_calloc_r+0x16>
 800dcd8:	4621      	mov	r1, r4
 800dcda:	f7ff ffe3 	bl	800dca4 <memset>
 800dcde:	e7f4      	b.n	800dcca <_calloc_r+0x16>

0800dce0 <_free_r>:
 800dce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dce2:	2900      	cmp	r1, #0
 800dce4:	d044      	beq.n	800dd70 <_free_r+0x90>
 800dce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcea:	9001      	str	r0, [sp, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f1a1 0404 	sub.w	r4, r1, #4
 800dcf2:	bfb8      	it	lt
 800dcf4:	18e4      	addlt	r4, r4, r3
 800dcf6:	f000 f8e3 	bl	800dec0 <__malloc_lock>
 800dcfa:	4a1e      	ldr	r2, [pc, #120]	; (800dd74 <_free_r+0x94>)
 800dcfc:	9801      	ldr	r0, [sp, #4]
 800dcfe:	6813      	ldr	r3, [r2, #0]
 800dd00:	b933      	cbnz	r3, 800dd10 <_free_r+0x30>
 800dd02:	6063      	str	r3, [r4, #4]
 800dd04:	6014      	str	r4, [r2, #0]
 800dd06:	b003      	add	sp, #12
 800dd08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd0c:	f000 b8de 	b.w	800decc <__malloc_unlock>
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	d908      	bls.n	800dd26 <_free_r+0x46>
 800dd14:	6825      	ldr	r5, [r4, #0]
 800dd16:	1961      	adds	r1, r4, r5
 800dd18:	428b      	cmp	r3, r1
 800dd1a:	bf01      	itttt	eq
 800dd1c:	6819      	ldreq	r1, [r3, #0]
 800dd1e:	685b      	ldreq	r3, [r3, #4]
 800dd20:	1949      	addeq	r1, r1, r5
 800dd22:	6021      	streq	r1, [r4, #0]
 800dd24:	e7ed      	b.n	800dd02 <_free_r+0x22>
 800dd26:	461a      	mov	r2, r3
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	b10b      	cbz	r3, 800dd30 <_free_r+0x50>
 800dd2c:	42a3      	cmp	r3, r4
 800dd2e:	d9fa      	bls.n	800dd26 <_free_r+0x46>
 800dd30:	6811      	ldr	r1, [r2, #0]
 800dd32:	1855      	adds	r5, r2, r1
 800dd34:	42a5      	cmp	r5, r4
 800dd36:	d10b      	bne.n	800dd50 <_free_r+0x70>
 800dd38:	6824      	ldr	r4, [r4, #0]
 800dd3a:	4421      	add	r1, r4
 800dd3c:	1854      	adds	r4, r2, r1
 800dd3e:	42a3      	cmp	r3, r4
 800dd40:	6011      	str	r1, [r2, #0]
 800dd42:	d1e0      	bne.n	800dd06 <_free_r+0x26>
 800dd44:	681c      	ldr	r4, [r3, #0]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	6053      	str	r3, [r2, #4]
 800dd4a:	4421      	add	r1, r4
 800dd4c:	6011      	str	r1, [r2, #0]
 800dd4e:	e7da      	b.n	800dd06 <_free_r+0x26>
 800dd50:	d902      	bls.n	800dd58 <_free_r+0x78>
 800dd52:	230c      	movs	r3, #12
 800dd54:	6003      	str	r3, [r0, #0]
 800dd56:	e7d6      	b.n	800dd06 <_free_r+0x26>
 800dd58:	6825      	ldr	r5, [r4, #0]
 800dd5a:	1961      	adds	r1, r4, r5
 800dd5c:	428b      	cmp	r3, r1
 800dd5e:	bf04      	itt	eq
 800dd60:	6819      	ldreq	r1, [r3, #0]
 800dd62:	685b      	ldreq	r3, [r3, #4]
 800dd64:	6063      	str	r3, [r4, #4]
 800dd66:	bf04      	itt	eq
 800dd68:	1949      	addeq	r1, r1, r5
 800dd6a:	6021      	streq	r1, [r4, #0]
 800dd6c:	6054      	str	r4, [r2, #4]
 800dd6e:	e7ca      	b.n	800dd06 <_free_r+0x26>
 800dd70:	b003      	add	sp, #12
 800dd72:	bd30      	pop	{r4, r5, pc}
 800dd74:	20001fe4 	.word	0x20001fe4

0800dd78 <sbrk_aligned>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	4e0e      	ldr	r6, [pc, #56]	; (800ddb4 <sbrk_aligned+0x3c>)
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	6831      	ldr	r1, [r6, #0]
 800dd80:	4605      	mov	r5, r0
 800dd82:	b911      	cbnz	r1, 800dd8a <sbrk_aligned+0x12>
 800dd84:	f000 f88c 	bl	800dea0 <_sbrk_r>
 800dd88:	6030      	str	r0, [r6, #0]
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f000 f887 	bl	800dea0 <_sbrk_r>
 800dd92:	1c43      	adds	r3, r0, #1
 800dd94:	d00a      	beq.n	800ddac <sbrk_aligned+0x34>
 800dd96:	1cc4      	adds	r4, r0, #3
 800dd98:	f024 0403 	bic.w	r4, r4, #3
 800dd9c:	42a0      	cmp	r0, r4
 800dd9e:	d007      	beq.n	800ddb0 <sbrk_aligned+0x38>
 800dda0:	1a21      	subs	r1, r4, r0
 800dda2:	4628      	mov	r0, r5
 800dda4:	f000 f87c 	bl	800dea0 <_sbrk_r>
 800dda8:	3001      	adds	r0, #1
 800ddaa:	d101      	bne.n	800ddb0 <sbrk_aligned+0x38>
 800ddac:	f04f 34ff 	mov.w	r4, #4294967295
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
 800ddb4:	20001fe8 	.word	0x20001fe8

0800ddb8 <_malloc_r>:
 800ddb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbc:	1ccd      	adds	r5, r1, #3
 800ddbe:	f025 0503 	bic.w	r5, r5, #3
 800ddc2:	3508      	adds	r5, #8
 800ddc4:	2d0c      	cmp	r5, #12
 800ddc6:	bf38      	it	cc
 800ddc8:	250c      	movcc	r5, #12
 800ddca:	2d00      	cmp	r5, #0
 800ddcc:	4607      	mov	r7, r0
 800ddce:	db01      	blt.n	800ddd4 <_malloc_r+0x1c>
 800ddd0:	42a9      	cmp	r1, r5
 800ddd2:	d905      	bls.n	800dde0 <_malloc_r+0x28>
 800ddd4:	230c      	movs	r3, #12
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	2600      	movs	r6, #0
 800ddda:	4630      	mov	r0, r6
 800dddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde0:	4e2e      	ldr	r6, [pc, #184]	; (800de9c <_malloc_r+0xe4>)
 800dde2:	f000 f86d 	bl	800dec0 <__malloc_lock>
 800dde6:	6833      	ldr	r3, [r6, #0]
 800dde8:	461c      	mov	r4, r3
 800ddea:	bb34      	cbnz	r4, 800de3a <_malloc_r+0x82>
 800ddec:	4629      	mov	r1, r5
 800ddee:	4638      	mov	r0, r7
 800ddf0:	f7ff ffc2 	bl	800dd78 <sbrk_aligned>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	d14d      	bne.n	800de96 <_malloc_r+0xde>
 800ddfa:	6834      	ldr	r4, [r6, #0]
 800ddfc:	4626      	mov	r6, r4
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	d140      	bne.n	800de84 <_malloc_r+0xcc>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	4631      	mov	r1, r6
 800de06:	4638      	mov	r0, r7
 800de08:	eb04 0803 	add.w	r8, r4, r3
 800de0c:	f000 f848 	bl	800dea0 <_sbrk_r>
 800de10:	4580      	cmp	r8, r0
 800de12:	d13a      	bne.n	800de8a <_malloc_r+0xd2>
 800de14:	6821      	ldr	r1, [r4, #0]
 800de16:	3503      	adds	r5, #3
 800de18:	1a6d      	subs	r5, r5, r1
 800de1a:	f025 0503 	bic.w	r5, r5, #3
 800de1e:	3508      	adds	r5, #8
 800de20:	2d0c      	cmp	r5, #12
 800de22:	bf38      	it	cc
 800de24:	250c      	movcc	r5, #12
 800de26:	4629      	mov	r1, r5
 800de28:	4638      	mov	r0, r7
 800de2a:	f7ff ffa5 	bl	800dd78 <sbrk_aligned>
 800de2e:	3001      	adds	r0, #1
 800de30:	d02b      	beq.n	800de8a <_malloc_r+0xd2>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	442b      	add	r3, r5
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	e00e      	b.n	800de58 <_malloc_r+0xa0>
 800de3a:	6822      	ldr	r2, [r4, #0]
 800de3c:	1b52      	subs	r2, r2, r5
 800de3e:	d41e      	bmi.n	800de7e <_malloc_r+0xc6>
 800de40:	2a0b      	cmp	r2, #11
 800de42:	d916      	bls.n	800de72 <_malloc_r+0xba>
 800de44:	1961      	adds	r1, r4, r5
 800de46:	42a3      	cmp	r3, r4
 800de48:	6025      	str	r5, [r4, #0]
 800de4a:	bf18      	it	ne
 800de4c:	6059      	strne	r1, [r3, #4]
 800de4e:	6863      	ldr	r3, [r4, #4]
 800de50:	bf08      	it	eq
 800de52:	6031      	streq	r1, [r6, #0]
 800de54:	5162      	str	r2, [r4, r5]
 800de56:	604b      	str	r3, [r1, #4]
 800de58:	4638      	mov	r0, r7
 800de5a:	f104 060b 	add.w	r6, r4, #11
 800de5e:	f000 f835 	bl	800decc <__malloc_unlock>
 800de62:	f026 0607 	bic.w	r6, r6, #7
 800de66:	1d23      	adds	r3, r4, #4
 800de68:	1af2      	subs	r2, r6, r3
 800de6a:	d0b6      	beq.n	800ddda <_malloc_r+0x22>
 800de6c:	1b9b      	subs	r3, r3, r6
 800de6e:	50a3      	str	r3, [r4, r2]
 800de70:	e7b3      	b.n	800ddda <_malloc_r+0x22>
 800de72:	6862      	ldr	r2, [r4, #4]
 800de74:	42a3      	cmp	r3, r4
 800de76:	bf0c      	ite	eq
 800de78:	6032      	streq	r2, [r6, #0]
 800de7a:	605a      	strne	r2, [r3, #4]
 800de7c:	e7ec      	b.n	800de58 <_malloc_r+0xa0>
 800de7e:	4623      	mov	r3, r4
 800de80:	6864      	ldr	r4, [r4, #4]
 800de82:	e7b2      	b.n	800ddea <_malloc_r+0x32>
 800de84:	4634      	mov	r4, r6
 800de86:	6876      	ldr	r6, [r6, #4]
 800de88:	e7b9      	b.n	800ddfe <_malloc_r+0x46>
 800de8a:	230c      	movs	r3, #12
 800de8c:	603b      	str	r3, [r7, #0]
 800de8e:	4638      	mov	r0, r7
 800de90:	f000 f81c 	bl	800decc <__malloc_unlock>
 800de94:	e7a1      	b.n	800ddda <_malloc_r+0x22>
 800de96:	6025      	str	r5, [r4, #0]
 800de98:	e7de      	b.n	800de58 <_malloc_r+0xa0>
 800de9a:	bf00      	nop
 800de9c:	20001fe4 	.word	0x20001fe4

0800dea0 <_sbrk_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4d06      	ldr	r5, [pc, #24]	; (800debc <_sbrk_r+0x1c>)
 800dea4:	2300      	movs	r3, #0
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	602b      	str	r3, [r5, #0]
 800deac:	f7f3 ffac 	bl	8001e08 <_sbrk>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_sbrk_r+0x1a>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_sbrk_r+0x1a>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	20001fec 	.word	0x20001fec

0800dec0 <__malloc_lock>:
 800dec0:	4801      	ldr	r0, [pc, #4]	; (800dec8 <__malloc_lock+0x8>)
 800dec2:	f7f4 b872 	b.w	8001faa <__retarget_lock_acquire_recursive>
 800dec6:	bf00      	nop
 800dec8:	20000550 	.word	0x20000550

0800decc <__malloc_unlock>:
 800decc:	4801      	ldr	r0, [pc, #4]	; (800ded4 <__malloc_unlock+0x8>)
 800dece:	f7f4 b880 	b.w	8001fd2 <__retarget_lock_release_recursive>
 800ded2:	bf00      	nop
 800ded4:	20000550 	.word	0x20000550

0800ded8 <_init>:
 800ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deda:	bf00      	nop
 800dedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dede:	bc08      	pop	{r3}
 800dee0:	469e      	mov	lr, r3
 800dee2:	4770      	bx	lr

0800dee4 <_fini>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	bf00      	nop
 800dee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deea:	bc08      	pop	{r3}
 800deec:	469e      	mov	lr, r3
 800deee:	4770      	bx	lr
