
DSD-i2_Bootloader_no_commands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d778  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d99c  0800d99c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800d99c  0800d99c  0001d99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9a4  0800d9a4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9a4  0800d9a4  0001d9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d9ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd0  20000204  0800dbb0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fd4  0800dbb0  00021fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c308  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d7  00000000  00000000  0003c53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00040c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  00042120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271d6  00000000  00000000  00043450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c839  00000000  00000000  0006a626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d86fc  00000000  00000000  00086e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f55b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000576c  00000000  00000000  0015f5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000204 	.word	0x20000204
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800d8f4 	.word	0x0800d8f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000208 	.word	0x20000208
 80001d0:	0800d8f4 	.word	0x0800d8f4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <reset>:
static uint32_t calculate_crc(CRC_HandleTypeDef hcrc);
//static void reset(uint8_t reply);
/*********************************************************************************************************************************/

void reset(uint8_t reply)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	if (reply)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d003      	beq.n	80004f0 <reset+0x18>
	{
		send_reply((uint8_t) NACK);
 80004e8:	206e      	movs	r0, #110	; 0x6e
 80004ea:	f000 fadb 	bl	8000aa4 <send_reply>
 80004ee:	e002      	b.n	80004f6 <reset+0x1e>
	}
	else
	{
		send_reply((uint8_t) ACK);
 80004f0:	2079      	movs	r0, #121	; 0x79
 80004f2:	f000 fad7 	bl	8000aa4 <send_reply>
	}
	/*Reset ESP*/
	/*Reset FPGA*/
	/*Reset STM*/
	HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2104      	movs	r1, #4
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <reset+0x5c>)
 80004fc:	f003 f9ae 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f001 fdcb 	bl	800209c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2101      	movs	r1, #1
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <reset+0x5c>)
 800050c:	f003 f9a6 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000510:	2064      	movs	r0, #100	; 0x64
 8000512:	f001 fdc3 	bl	800209c <HAL_Delay>
	HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2104      	movs	r1, #4
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <reset+0x5c>)
 800051c:	f003 f99e 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f001 fdbb 	bl	800209c <HAL_Delay>
	HAL_NVIC_SystemReset();
 8000526:	f001 ff2a 	bl	800237e <HAL_NVIC_SystemReset>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48000800 	.word	0x48000800

08000538 <bootloader_init>:
  *
  * @param
  * @retval
  */
uint8_t bootloader_init(void)
{
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af06      	add	r7, sp, #24
	uint32_t timer = HAL_GetTick();
#endif



	if (*(volatile uint64_t*)(USER_APPLICATION_STARTING_ADDRESS) == -1 || \
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <bootloader_init+0x88>)
 8000540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000548:	bf08      	it	eq
 800054a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800054e:	d02b      	beq.n	80005a8 <bootloader_init+0x70>
			((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) == 0 || \
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <bootloader_init+0x8c>)
 8000552:	681b      	ldr	r3, [r3, #0]
	if (*(volatile uint64_t*)(USER_APPLICATION_STARTING_ADDRESS) == -1 || \
 8000554:	2b00      	cmp	r3, #0
 8000556:	d027      	beq.n	80005a8 <bootloader_init+0x70>
			(((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) > (FLASH_SIZE-BOOTLOADER_SIZE)) || \
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <bootloader_init+0x8c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <bootloader_init+0x90>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000566:	428b      	cmp	r3, r1
 8000568:	d007      	beq.n	800057a <bootloader_init+0x42>
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <bootloader_init+0x90>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	0299      	lsls	r1, r3, #10
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <bootloader_init+0x94>)
 8000572:	400b      	ands	r3, r1
 8000574:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000578:	e001      	b.n	800057e <bootloader_init+0x46>
 800057a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
			((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) == 0 || \
 800057e:	4293      	cmp	r3, r2
 8000580:	d312      	bcc.n	80005a8 <bootloader_init+0x70>
			(*(volatile uint32_t*)(USER_APPLICATION_HEADER_CRC_ADDRESS) != calculate_crc(hcrc)))
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <bootloader_init+0x98>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4e12      	ldr	r6, [pc, #72]	; (80005d4 <bootloader_init+0x9c>)
 800058a:	466d      	mov	r5, sp
 800058c:	f106 0410 	add.w	r4, r6, #16
 8000590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	602b      	str	r3, [r5, #0]
 8000598:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800059c:	f000 fa94 	bl	8000ac8 <calculate_crc>
 80005a0:	4603      	mov	r3, r0
			(((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) > (FLASH_SIZE-BOOTLOADER_SIZE)) || \
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d006      	beq.n	80005b6 <bootloader_init+0x7e>
	{
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <bootloader_init+0xa0>)
 80005ae:	f003 f955 	bl	800385c <HAL_GPIO_WritePin>
		return 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <bootloader_init+0x80>
	{
#if 0
		//Not needed anymore found a better, faster and more usable workaround to windows COM Port handler issue!
		while (HAL_GetTick()-timer <400);
#endif
		return 0;
 80005b6:	2300      	movs	r3, #0
	}
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	08010000 	.word	0x08010000
 80005c4:	08010194 	.word	0x08010194
 80005c8:	1fff75e0 	.word	0x1fff75e0
 80005cc:	03fffc00 	.word	0x03fffc00
 80005d0:	08010198 	.word	0x08010198
 80005d4:	200002a0 	.word	0x200002a0
 80005d8:	48000400 	.word	0x48000400

080005dc <command_handler>:
  *
  * @param
  * @retval
  */
void command_handler(uint32_t command)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	switch(command)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <command_handler+0x70>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d01a      	beq.n	8000622 <command_handler+0x46>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <command_handler+0x70>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d826      	bhi.n	8000642 <command_handler+0x66>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <command_handler+0x74>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d004      	beq.n	8000606 <command_handler+0x2a>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <command_handler+0x78>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d007      	beq.n	8000614 <command_handler+0x38>
		{
			reset(fpga_usb_to_uart());
		}
	break;
	}
}
 8000604:	e01d      	b.n	8000642 <command_handler+0x66>
		reset(flash_stm_program());
 8000606:	f000 f84d 	bl	80006a4 <flash_stm_program>
 800060a:	4603      	mov	r3, r0
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff63 	bl	80004d8 <reset>
	break;
 8000612:	e016      	b.n	8000642 <command_handler+0x66>
		reset(flash_esp_program());
 8000614:	f000 fad2 	bl	8000bbc <flash_esp_program>
 8000618:	4603      	mov	r3, r0
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff5c 	bl	80004d8 <reset>
	break;
 8000620:	e00f      	b.n	8000642 <command_handler+0x66>
		if (conf_ps_fpga())
 8000622:	f000 fb3b 	bl	8000c9c <conf_ps_fpga>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <command_handler+0x58>
			reset(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff53 	bl	80004d8 <reset>
	break;
 8000632:	e005      	b.n	8000640 <command_handler+0x64>
			reset(fpga_usb_to_uart());
 8000634:	f000 fc0e 	bl	8000e54 <fpga_usb_to_uart>
 8000638:	4603      	mov	r3, r0
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff4c 	bl	80004d8 <reset>
	break;
 8000640:	bf00      	nop
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	f1a541c1 	.word	0xf1a541c1
 8000650:	57932145 	.word	0x57932145
 8000654:	5ec932c3 	.word	0x5ec932c3

08000658 <jump_to_user_application>:
  *
  * @param
  * @retval
  */
void jump_to_user_application()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
	typedef void (*func_ptr)(void);
	func_ptr jump_to_app;
	uint32_t address = (uint32_t) USER_APPLICATION_STARTING_ADDRESS;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <jump_to_user_application+0x44>)
 8000660:	60fb      	str	r3, [r7, #12]
	uint32_t stack = (uint32_t)*((uint32_t*)address);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	60bb      	str	r3, [r7, #8]
	jump_to_app = (func_ptr)*(uint32_t*)(address+4);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3304      	adds	r3, #4
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	607b      	str	r3, [r7, #4]
	deInitializer();
 8000670:	f000 fed8 	bl	8001424 <deInitializer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f383 8808 	msr	MSP, r3
}
 8000682:	bf00      	nop
	__disable_irq();
	__set_MSP(stack);
	SCB->VTOR = address;
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <jump_to_user_application+0x48>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800068a:	b662      	cpsie	i
}
 800068c:	bf00      	nop
	__enable_irq();
	jump_to_app();
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08010000 	.word	0x08010000
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <flash_stm_program>:
  * @param :
  * @retval
  */

static uint8_t flash_stm_program()
{
 80006a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006a8:	b0ba      	sub	sp, #232	; 0xe8
 80006aa:	af00      	add	r7, sp, #0
	uint32_t address = (uint32_t)USER_APPLICATION_STARTING_ADDRESS;
 80006ac:	4bbe      	ldr	r3, [pc, #760]	; (80009a8 <flash_stm_program+0x304>)
 80006ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint32_t file_size;
	uint32_t chunk_size = 64; /*Size of a usb packet*/
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t bytes_written = 0; /*bytes written in flash*/
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	uint32_t loop_correction = 8; /*correcting the loop which make the bytes into doublewords depending on the leftover bytes*/
 80006be:	2308      	movs	r3, #8
 80006c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint8_t data[64];
	uint64_t dword = 0;
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	send_reply((uint8_t) ACK);
 80006d0:	2079      	movs	r0, #121	; 0x79
 80006d2:	f000 f9e7 	bl	8000aa4 <send_reply>

	if (usb_cmd_timeout(50))
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f000 f9c8 	bl	8000a6c <usb_cmd_timeout>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <flash_stm_program+0x42>
	{
		return 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e1ba      	b.n	8000a5c <flash_stm_program+0x3b8>
	}
	else
	{
		uint8_t temp_num[4];
		CDC_Read_FS(temp_num,sizeof(temp_num));
 80006e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00c fa39 	bl	800cb64 <CDC_Read_FS>
		file_size = (uint32_t)(temp_num[0]<<24) | (uint32_t)(temp_num[1]<<16) | (uint32_t)(temp_num[2]<<8) | (uint32_t)(temp_num[3]);
 80006f2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80006f6:	061b      	lsls	r3, r3, #24
 80006f8:	461a      	mov	r2, r3
 80006fa:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80006fe:	041b      	lsls	r3, r3, #16
 8000700:	431a      	orrs	r2, r3
 8000702:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	431a      	orrs	r2, r3
 800070a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800070e:	4313      	orrs	r3, r2
 8000710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		/*if the number of bytes is 0 or bigger than the available size then something is wrong*/
		if (file_size == 0 || file_size > (FLASH_END - USER_APPLICATION_STARTING_ADDRESS))
 8000714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000718:	2b00      	cmp	r3, #0
 800071a:	d004      	beq.n	8000726 <flash_stm_program+0x82>
 800071c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000720:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000724:	d301      	bcc.n	800072a <flash_stm_program+0x86>
		{
			return 1;
 8000726:	2301      	movs	r3, #1
 8000728:	e198      	b.n	8000a5c <flash_stm_program+0x3b8>
		}

		/*Notify the host that we started erasing*/
		send_reply((uint8_t) ACK);
 800072a:	2079      	movs	r0, #121	; 0x79
 800072c:	f000 f9ba 	bl	8000aa4 <send_reply>

		/*Calculate the first page that we need to erase*/
		uint8_t first_page = (USER_APPLICATION_STARTING_ADDRESS - FLASH_BASE) / 0x800; /*0x800 is the page size*/
 8000730:	2320      	movs	r3, #32
 8000732:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

		/*Erase part*/
		FLASH_EraseInitTypeDef pEraseInit;
		pEraseInit.TypeErase=FLASH_TYPEERASE_PAGES;
 8000736:	2300      	movs	r3, #0
 8000738:	66fb      	str	r3, [r7, #108]	; 0x6c
		pEraseInit.Banks=FLASH_BANK_1;
 800073a:	2301      	movs	r3, #1
 800073c:	673b      	str	r3, [r7, #112]	; 0x70
		pEraseInit.Page = first_page;
 800073e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000742:	677b      	str	r3, [r7, #116]	; 0x74
		pEraseInit.NbPages= 256-first_page;
 8000744:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000748:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800074c:	67bb      	str	r3, [r7, #120]	; 0x78
		uint32_t PageError = 0xFFFFFFFF;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	66bb      	str	r3, [r7, #104]	; 0x68
		HAL_FLASH_Unlock();
 8000754:	f002 fc0a 	bl	8002f6c <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 8000758:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800075c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fce8 	bl	8003138 <HAL_FLASHEx_Erase>
		/*Notify the host if the erase was successful or not*/
		HAL_FLASH_Lock();
 8000768:	f002 fc22 	bl	8002fb0 <HAL_FLASH_Lock>
		if (PageError != 0xFFFFFFFF)
 800076c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000772:	d001      	beq.n	8000778 <flash_stm_program+0xd4>
		{
			return 1;
 8000774:	2301      	movs	r3, #1
 8000776:	e171      	b.n	8000a5c <flash_stm_program+0x3b8>
		}
/*Write in flash part*/
		do
		{
			/*Request the next packet*/
			send_reply((uint8_t) ACK);
 8000778:	2079      	movs	r0, #121	; 0x79
 800077a:	f000 f993 	bl	8000aa4 <send_reply>
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	488a      	ldr	r0, [pc, #552]	; (80009ac <flash_stm_program+0x308>)
 8000784:	f003 f86a 	bl	800385c <HAL_GPIO_WritePin>
			if(usb_cmd_timeout(50))
 8000788:	2032      	movs	r0, #50	; 0x32
 800078a:	f000 f96f 	bl	8000a6c <usb_cmd_timeout>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <flash_stm_program+0xf4>
			{
				return 1;
 8000794:	2301      	movs	r3, #1
 8000796:	e161      	b.n	8000a5c <flash_stm_program+0x3b8>
			}
			else
			{
				uint8_t usb_data_rx_size = CDC_Available_FS();
 8000798:	f00c f9cc 	bl	800cb34 <CDC_Available_FS>
 800079c:	4603      	mov	r3, r0
 800079e:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
				CDC_Read_FS(data, usb_data_rx_size);
 80007a2:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 80007a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00c f9d9 	bl	800cb64 <CDC_Read_FS>
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2110      	movs	r1, #16
 80007b6:	487d      	ldr	r0, [pc, #500]	; (80009ac <flash_stm_program+0x308>)
 80007b8:	f003 f850 	bl	800385c <HAL_GPIO_WritePin>

				HAL_FLASH_Unlock();
 80007bc:	f002 fbd6 	bl	8002f6c <HAL_FLASH_Unlock>
				/*No mutex is needed here since we won't get new chunk of data unless we send an ack*/
				for (uint32_t i=0;i<loop_correction;i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007c6:	e103      	b.n	80009d0 <flash_stm_program+0x32c>
				{
					dword = (uint64_t)(data[i*8])   | (uint64_t)(data[i*8+1]) << 8 | (uint64_t)(data[i*8+2]) << 16 | (uint64_t)(data[i*8+3]) << 24
 80007c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	3380      	adds	r3, #128	; 0x80
 80007d0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007d4:	4413      	add	r3, r2
 80007d6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
 80007e0:	657a      	str	r2, [r7, #84]	; 0x54
 80007e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	3301      	adds	r3, #1
 80007ea:	3380      	adds	r3, #128	; 0x80
 80007ec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007f0:	4413      	add	r3, r2
 80007f2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2200      	movs	r2, #0
 80007fa:	663b      	str	r3, [r7, #96]	; 0x60
 80007fc:	667a      	str	r2, [r7, #100]	; 0x64
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000808:	020b      	lsls	r3, r1, #8
 800080a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800080c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8000810:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000812:	020a      	lsls	r2, r1, #8
 8000814:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000816:	4311      	orrs	r1, r2
 8000818:	64b9      	str	r1, [r7, #72]	; 0x48
 800081a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800081c:	430b      	orrs	r3, r1
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	3302      	adds	r3, #2
 8000828:	3380      	adds	r3, #128	; 0x80
 800082a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800082e:	4413      	add	r3, r2
 8000830:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2200      	movs	r2, #0
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
 800083a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000846:	040b      	lsls	r3, r1, #16
 8000848:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800084a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800084e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000850:	040a      	lsls	r2, r1, #16
 8000852:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000854:	4311      	orrs	r1, r2
 8000856:	6439      	str	r1, [r7, #64]	; 0x40
 8000858:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800085a:	430b      	orrs	r3, r1
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
 800085e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	3303      	adds	r3, #3
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800086c:	4413      	add	r3, r2
 800086e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2200      	movs	r2, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
 8000878:	637a      	str	r2, [r7, #52]	; 0x34
 800087a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800087e:	460b      	mov	r3, r1
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000884:	460b      	mov	r3, r1
 8000886:	061b      	lsls	r3, r3, #24
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
 800088a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800088c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000890:	4602      	mov	r2, r0
 8000892:	4313      	orrs	r3, r2
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
 8000896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000898:	460a      	mov	r2, r1
 800089a:	4313      	orrs	r3, r2
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
							| (uint64_t)(data[i*8+4]) << 32 | (uint64_t)(data[i*8+5]) << 40 | (uint64_t)(data[i*8+6]) << 48 | (uint64_t)(data[i*8+7])<< 56;
 800089e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	3304      	adds	r3, #4
 80008a6:	3380      	adds	r3, #128	; 0x80
 80008a8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008ac:	4413      	add	r3, r2
 80008ae:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	623b      	str	r3, [r7, #32]
 80008b8:	627a      	str	r2, [r7, #36]	; 0x24
 80008ba:	f04f 0200 	mov.w	r2, #0
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	6a39      	ldr	r1, [r7, #32]
 80008c4:	000b      	movs	r3, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80008ca:	ea41 0a02 	orr.w	sl, r1, r2
 80008ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80008d0:	ea41 0b03 	orr.w	fp, r1, r3
 80008d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3305      	adds	r3, #5
 80008dc:	3380      	adds	r3, #128	; 0x80
 80008de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008e2:	4413      	add	r3, r2
 80008e4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	61fa      	str	r2, [r7, #28]
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	69b9      	ldr	r1, [r7, #24]
 80008fa:	020b      	lsls	r3, r1, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	ea4a 0802 	orr.w	r8, sl, r2
 8000902:	ea4b 0903 	orr.w	r9, fp, r3
 8000906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	3306      	adds	r3, #6
 800090e:	3380      	adds	r3, #128	; 0x80
 8000910:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000914:	4413      	add	r3, r2
 8000916:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2200      	movs	r2, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	617a      	str	r2, [r7, #20]
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	f04f 0300 	mov.w	r3, #0
 800092a:	6939      	ldr	r1, [r7, #16]
 800092c:	040b      	lsls	r3, r1, #16
 800092e:	2200      	movs	r2, #0
 8000930:	ea48 0402 	orr.w	r4, r8, r2
 8000934:	ea49 0503 	orr.w	r5, r9, r3
 8000938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	3307      	adds	r3, #7
 8000940:	3380      	adds	r3, #128	; 0x80
 8000942:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000946:	4413      	add	r3, r2
 8000948:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2200      	movs	r2, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	60fa      	str	r2, [r7, #12]
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	060b      	lsls	r3, r1, #24
 8000960:	2200      	movs	r2, #0
					dword = (uint64_t)(data[i*8])   | (uint64_t)(data[i*8+1]) << 8 | (uint64_t)(data[i*8+2]) << 16 | (uint64_t)(data[i*8+3]) << 24
 8000962:	ea44 0102 	orr.w	r1, r4, r2
 8000966:	6039      	str	r1, [r7, #0]
 8000968:	432b      	orrs	r3, r5
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000970:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, dword);
 8000974:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8000978:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800097c:	2000      	movs	r0, #0
 800097e:	f002 fa89 	bl	8002e94 <HAL_FLASH_Program>
					/*Check if the data written matches the data in the buffer*/
					if (dword != *(volatile uint64_t*)(address))
 8000982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800098a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800098e:	428b      	cmp	r3, r1
 8000990:	bf08      	it	eq
 8000992:	4282      	cmpeq	r2, r0
 8000994:	d00c      	beq.n	80009b0 <flash_stm_program+0x30c>
					{
						HAL_FLASH_Lock();
 8000996:	f002 fb0b 	bl	8002fb0 <HAL_FLASH_Lock>
						HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2110      	movs	r1, #16
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <flash_stm_program+0x308>)
 80009a0:	f002 ff5c 	bl	800385c <HAL_GPIO_WritePin>
						return 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e059      	b.n	8000a5c <flash_stm_program+0x3b8>
 80009a8:	08010000 	.word	0x08010000
 80009ac:	48000400 	.word	0x48000400
					}
					else
					{
						/*clear the dword*/
						dword = 0;
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
						/*Increment the address*/
						address+=8;
 80009bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009c0:	3308      	adds	r3, #8
 80009c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				for (uint32_t i=0;i<loop_correction;i++)
 80009c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009ca:	3301      	adds	r3, #1
 80009cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80009d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80009d8:	429a      	cmp	r2, r3
 80009da:	f4ff aef5 	bcc.w	80007c8 <flash_stm_program+0x124>
					}
				}
				HAL_FLASH_Lock();
 80009de:	f002 fae7 	bl	8002fb0 <HAL_FLASH_Lock>
				/*Increment the bytes_written*/
				bytes_written+=chunk_size;
 80009e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80009e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80009ea:	4413      	add	r3, r2
 80009ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				/*Clear the buffer*/
				memset(data,'\0',sizeof(data));
 80009f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80009f4:	2240      	movs	r2, #64	; 0x40
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f00c fe5f 	bl	800d6bc <memset>
				/*Correcting the loop due to leftover bytes*/
				if(file_size - bytes_written < chunk_size)
 80009fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000a06:	1ad2      	subs	r2, r2, r3
 8000a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d918      	bls.n	8000a42 <flash_stm_program+0x39e>
				{
					chunk_size = file_size - bytes_written;
 8000a10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

					if (chunk_size%8)
 8000a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d006      	beq.n	8000a38 <flash_stm_program+0x394>
					{
						loop_correction = (chunk_size/8)+1;
 8000a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	3301      	adds	r3, #1
 8000a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000a36:	e004      	b.n	8000a42 <flash_stm_program+0x39e>
					}
					else
					{
						loop_correction = (chunk_size/8);
 8000a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					}
				}
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2110      	movs	r1, #16
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <flash_stm_program+0x3c4>)
 8000a48:	f002 ff08 	bl	800385c <HAL_GPIO_WritePin>
			}
		}
		while(bytes_written-file_size);
 8000a4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a54:	429a      	cmp	r2, r3
 8000a56:	f47f ae8f 	bne.w	8000778 <flash_stm_program+0xd4>
	}
	return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	37e8      	adds	r7, #232	; 0xe8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a66:	bf00      	nop
 8000a68:	48000400 	.word	0x48000400

08000a6c <usb_cmd_timeout>:
  *
  * @param timeout: Timeout set by the user.
  * @retval uint8_t: Return 0 if the host sends data else return 1 if the time run out.
  */
uint8_t usb_cmd_timeout(uint32_t timeout)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uint32_t timer = HAL_GetTick();
 8000a74:	f001 fb06 	bl	8002084 <HAL_GetTick>
 8000a78:	60f8      	str	r0, [r7, #12]

	while (HAL_GetTick()-timer <timeout)
 8000a7a:	e006      	b.n	8000a8a <usb_cmd_timeout+0x1e>
	{
		if (CDC_Available_FS()>0)
 8000a7c:	f00c f85a 	bl	800cb34 <CDC_Available_FS>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <usb_cmd_timeout+0x1e>
		{
			return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e008      	b.n	8000a9c <usb_cmd_timeout+0x30>
	while (HAL_GetTick()-timer <timeout)
 8000a8a:	f001 fafb 	bl	8002084 <HAL_GetTick>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d8f0      	bhi.n	8000a7c <usb_cmd_timeout+0x10>
		}
	}
	return 1;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <send_reply>:
  *
  * @param timeout: byte to be returned.
  * @retval uint8_t: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t send_reply(uint8_t data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	uint8_t reply = data;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	73fb      	strb	r3, [r7, #15]
	return CDC_Transmit_FS(&reply,1);
 8000ab2:	f107 030f 	add.w	r3, r7, #15
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00c f803 	bl	800cac4 <CDC_Transmit_FS>
 8000abe:	4603      	mov	r3, r0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <calculate_crc>:
  *
  * @param hcrc: crc handler.
  * @retval uint8_t: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
static uint32_t calculate_crc(CRC_HandleTypeDef hcrc)
{
 8000ac8:	b084      	sub	sp, #16
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	f107 0c10 	add.w	ip, r7, #16
 8000ad4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/*Retrieve the size of the application from the header.*/
	uint32_t app_size = *(volatile uint32_t*)(USER_APPLICATION_STARTING_ADDRESS+0x194);
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <calculate_crc+0x48>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	607b      	str	r3, [r7, #4]

	/*Calculate the crc value of the vector table (404 bytes) plus the size of the application (4 bytes)*/
	HAL_CRC_Calculate(&hcrc, (uint32_t*)USER_APPLICATION_STARTING_ADDRESS, 0x198);
 8000ade:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000ae2:	490c      	ldr	r1, [pc, #48]	; (8000b14 <calculate_crc+0x4c>)
 8000ae4:	f107 0010 	add.w	r0, r7, #16
 8000ae8:	f001 fd32 	bl	8002550 <HAL_CRC_Calculate>

	return HAL_CRC_Accumulate(&hcrc, (uint32_t*)(USER_APPLICATION_STARTING_ADDRESS+0x19C), (app_size-0x19C));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000af2:	461a      	mov	r2, r3
 8000af4:	4908      	ldr	r1, [pc, #32]	; (8000b18 <calculate_crc+0x50>)
 8000af6:	f107 0010 	add.w	r0, r7, #16
 8000afa:	f001 fce5 	bl	80024c8 <HAL_CRC_Accumulate>
 8000afe:	4603      	mov	r3, r0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	08010194 	.word	0x08010194
 8000b14:	08010000 	.word	0x08010000
 8000b18:	0801019c 	.word	0x0801019c

08000b1c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_UARTEx_RxEventCallback+0x88>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d119      	bne.n	8000b66 <HAL_UARTEx_RxEventCallback+0x4a>
	{
		HAL_UART_DMAPause(&huart1);
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000b34:	f006 fbdf 	bl	80072f6 <HAL_UART_DMAPause>
		CDC_Transmit_FS(uart_rx_buf, Size);
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481b      	ldr	r0, [pc, #108]	; (8000bac <HAL_UARTEx_RxEventCallback+0x90>)
 8000b3e:	f00b ffc1 	bl	800cac4 <CDC_Transmit_FS>
		memset(uart_rx_buf,'\0',sizeof(uart_rx_buf));
 8000b42:	2240      	movs	r2, #64	; 0x40
 8000b44:	2100      	movs	r1, #0
 8000b46:	4819      	ldr	r0, [pc, #100]	; (8000bac <HAL_UARTEx_RxEventCallback+0x90>)
 8000b48:	f00c fdb8 	bl	800d6bc <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_rx_buf,sizeof(uart_rx_buf));
 8000b4c:	2240      	movs	r2, #64	; 0x40
 8000b4e:	4917      	ldr	r1, [pc, #92]	; (8000bac <HAL_UARTEx_RxEventCallback+0x90>)
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000b52:	f007 fea2 	bl	800889a <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2110      	movs	r1, #16
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000b5c:	f002 fe7e 	bl	800385c <HAL_GPIO_WritePin>
		HAL_UART_DMAResume(&huart1);
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000b62:	f006 fc63 	bl	800742c <HAL_UART_DMAResume>
	}

	if (huart->Instance == UART4)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <HAL_UARTEx_RxEventCallback+0x98>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d114      	bne.n	8000b9a <HAL_UARTEx_RxEventCallback+0x7e>
	{
		HAL_UART_DMAPause(&huart4);
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000b72:	f006 fbc0 	bl	80072f6 <HAL_UART_DMAPause>
		CDC_Transmit_FS(uart_rx_buf, Size);
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <HAL_UARTEx_RxEventCallback+0x90>)
 8000b7c:	f00b ffa2 	bl	800cac4 <CDC_Transmit_FS>
		memset(uart_rx_buf,'\0',sizeof(uart_rx_buf));
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	2100      	movs	r1, #0
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_UARTEx_RxEventCallback+0x90>)
 8000b86:	f00c fd99 	bl	800d6bc <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart4,uart_rx_buf,sizeof(uart_rx_buf));
 8000b8a:	2240      	movs	r2, #64	; 0x40
 8000b8c:	4907      	ldr	r1, [pc, #28]	; (8000bac <HAL_UARTEx_RxEventCallback+0x90>)
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000b90:	f007 fe83 	bl	800889a <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_UART_DMAResume(&huart4);
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000b96:	f006 fc49 	bl	800742c <HAL_UART_DMAResume>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40013800 	.word	0x40013800
 8000ba8:	200003ac 	.word	0x200003ac
 8000bac:	20000260 	.word	0x20000260
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	40004c00 	.word	0x40004c00
 8000bb8:	20000328 	.word	0x20000328

08000bbc <flash_esp_program>:


uint8_t flash_esp_program()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ACK);
 8000bc2:	2079      	movs	r0, #121	; 0x79
 8000bc4:	f7ff ff6e 	bl	8000aa4 <send_reply>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_rx_buf,sizeof(uart_rx_buf));
 8000bc8:	2240      	movs	r2, #64	; 0x40
 8000bca:	492d      	ldr	r1, [pc, #180]	; (8000c80 <flash_esp_program+0xc4>)
 8000bcc:	482d      	ldr	r0, [pc, #180]	; (8000c84 <flash_esp_program+0xc8>)
 8000bce:	f007 fe64 	bl	800889a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <flash_esp_program+0xcc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <flash_esp_program+0xcc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0204 	bic.w	r2, r2, #4
 8000be0:	601a      	str	r2, [r3, #0]

	/*ESP download mode sequence*/
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_RESET); /*IO9 strapping pin high*/
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be8:	4828      	ldr	r0, [pc, #160]	; (8000c8c <flash_esp_program+0xd0>)
 8000bea:	f002 fe37 	bl	800385c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET); /*Reset pin low*/
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4827      	ldr	r0, [pc, #156]	; (8000c90 <flash_esp_program+0xd4>)
 8000bf4:	f002 fe32 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f001 fa4f 	bl	800209c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_SET); /*IO9 strapping pin low */
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <flash_esp_program+0xd0>)
 8000c06:	f002 fe29 	bl	800385c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET); /*Reset pin high, esp is out of reset and in bootloader mode*/
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <flash_esp_program+0xd4>)
 8000c10:	f002 fe24 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000c14:	2032      	movs	r0, #50	; 0x32
 8000c16:	f001 fa41 	bl	800209c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_RESET); /*IO9 strapping pin high*/
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <flash_esp_program+0xd0>)
 8000c22:	f002 fe1b 	bl	800385c <HAL_GPIO_WritePin>

	while(!is_reset)
 8000c26:	e01d      	b.n	8000c64 <flash_esp_program+0xa8>
	{
		uint32_t data_length = CDC_Available_FS();
 8000c28:	f00b ff84 	bl	800cb34 <CDC_Available_FS>
 8000c2c:	6078      	str	r0, [r7, #4]
		if (data_length>0)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d017      	beq.n	8000c64 <flash_esp_program+0xa8>
		{
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <flash_esp_program+0xd0>)
 8000c3a:	f002 fe0f 	bl	800385c <HAL_GPIO_WritePin>
			CDC_Read_FS(usb_rx_buf, data_length);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <flash_esp_program+0xd8>)
 8000c42:	f00b ff8f 	bl	800cb64 <CDC_Read_FS>
			HAL_Delay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f001 fa28 	bl	800209c <HAL_Delay>
			HAL_UART_Transmit(&huart1,usb_rx_buf,data_length,10);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	230a      	movs	r3, #10
 8000c52:	4910      	ldr	r1, [pc, #64]	; (8000c94 <flash_esp_program+0xd8>)
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <flash_esp_program+0xc8>)
 8000c56:	f006 faba 	bl	80071ce <HAL_UART_Transmit>
			memset(usb_rx_buf,'\0',data_length);
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <flash_esp_program+0xd8>)
 8000c60:	f00c fd2c 	bl	800d6bc <memset>
	while(!is_reset)
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <flash_esp_program+0xdc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f083 0301 	eor.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1d9      	bne.n	8000c28 <flash_esp_program+0x6c>
		}
	}
return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000260 	.word	0x20000260
 8000c84:	200003ac 	.word	0x200003ac
 8000c88:	200004fc 	.word	0x200004fc
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48000800 	.word	0x48000800
 8000c94:	20000220 	.word	0x20000220
 8000c98:	2000082a 	.word	0x2000082a

08000c9c <conf_ps_fpga>:

static uint8_t conf_ps_fpga()
{
 8000c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ca0:	b089      	sub	sp, #36	; 0x24
 8000ca2:	af00      	add	r7, sp, #0
	uint32_t file_size;
	uint32_t bytes_written = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
	uint32_t timer = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
	/*Flash fpga cmd ACK*/
	send_reply((uint8_t) ACK);
 8000cac:	2079      	movs	r0, #121	; 0x79
 8000cae:	f7ff fef9 	bl	8000aa4 <send_reply>

	if (usb_cmd_timeout(50))
 8000cb2:	2032      	movs	r0, #50	; 0x32
 8000cb4:	f7ff feda 	bl	8000a6c <usb_cmd_timeout>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <conf_ps_fpga+0x26>
	{
		return 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0bb      	b.n	8000e3a <conf_ps_fpga+0x19e>
	}
	else
	{
		uint8_t temp_num[4];
		CDC_Read_FS(temp_num,sizeof(temp_num));
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00b ff4c 	bl	800cb64 <CDC_Read_FS>
		file_size = (uint32_t)(temp_num[0]<<24) | (uint32_t)(temp_num[1]<<16) | (uint32_t)(temp_num[2]<<8) | (uint32_t)(temp_num[3]);
 8000ccc:	793b      	ldrb	r3, [r7, #4]
 8000cce:	061b      	lsls	r3, r3, #24
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	797b      	ldrb	r3, [r7, #5]
 8000cd4:	041b      	lsls	r3, r3, #16
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	79ba      	ldrb	r2, [r7, #6]
 8000cda:	0212      	lsls	r2, r2, #8
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
		/*if the number of bytes is 0 or bigger than the available size then something is wrong*/

		if (file_size != BITSTREAM_MAX_SIZE)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	4a57      	ldr	r2, [pc, #348]	; (8000e44 <conf_ps_fpga+0x1a8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d001      	beq.n	8000cf0 <conf_ps_fpga+0x54>
		{
			return 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0a4      	b.n	8000e3a <conf_ps_fpga+0x19e>
		}

		/*File Size received ACK*/
		send_reply((uint8_t) ACK);
 8000cf0:	2079      	movs	r0, #121	; 0x79
 8000cf2:	f7ff fed7 	bl	8000aa4 <send_reply>
		/*Start configuration process.*/
		/*To begin we set the nCONFIG pin to high then low and high*/
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4853      	ldr	r0, [pc, #332]	; (8000e48 <conf_ps_fpga+0x1ac>)
 8000cfc:	f002 fdae 	bl	800385c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f001 f9cb 	bl	800209c <HAL_Delay>
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2104      	movs	r1, #4
 8000d0a:	484f      	ldr	r0, [pc, #316]	; (8000e48 <conf_ps_fpga+0x1ac>)
 8000d0c:	f002 fda6 	bl	800385c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f001 f9c3 	bl	800209c <HAL_Delay>
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2104      	movs	r1, #4
 8000d1a:	484b      	ldr	r0, [pc, #300]	; (8000e48 <conf_ps_fpga+0x1ac>)
 8000d1c:	f002 fd9e 	bl	800385c <HAL_GPIO_WritePin>
		send_reply((uint8_t) ACK);
 8000d20:	2079      	movs	r0, #121	; 0x79
 8000d22:	f7ff febf 	bl	8000aa4 <send_reply>
			//{
				//HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
				//return 1;
			//}

			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4848      	ldr	r0, [pc, #288]	; (8000e4c <conf_ps_fpga+0x1b0>)
 8000d2c:	f002 fd96 	bl	800385c <HAL_GPIO_WritePin>
			if(usb_cmd_timeout(50))
 8000d30:	2032      	movs	r0, #50	; 0x32
 8000d32:	f7ff fe9b 	bl	8000a6c <usb_cmd_timeout>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <conf_ps_fpga+0xa4>
			{
				return 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e07c      	b.n	8000e3a <conf_ps_fpga+0x19e>
			}
			else
			{
 8000d40:	466b      	mov	r3, sp
 8000d42:	461e      	mov	r6, r3
				uint8_t usb_data_rx_size = CDC_Available_FS();
 8000d44:	f00b fef6 	bl	800cb34 <CDC_Available_FS>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	74fb      	strb	r3, [r7, #19]
				uint8_t data[usb_data_rx_size];
 8000d4c:	7cf9      	ldrb	r1, [r7, #19]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	3b01      	subs	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	b2cb      	uxtb	r3, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	461c      	mov	r4, r3
 8000d5a:	4615      	mov	r5, r2
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	00eb      	lsls	r3, r5, #3
 8000d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d6a:	00e2      	lsls	r2, r4, #3
 8000d6c:	b2cb      	uxtb	r3, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4698      	mov	r8, r3
 8000d72:	4691      	mov	r9, r2
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	3307      	adds	r3, #7
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	ebad 0d03 	sub.w	sp, sp, r3
 8000d94:	466b      	mov	r3, sp
 8000d96:	3300      	adds	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
				if (CDC_Read_FS(data, usb_data_rx_size))
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68b8      	ldr	r0, [r7, #8]
 8000da0:	f00b fee0 	bl	800cb64 <CDC_Read_FS>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <conf_ps_fpga+0x114>
				{
					return 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	46b5      	mov	sp, r6
 8000dae:	e044      	b.n	8000e3a <conf_ps_fpga+0x19e>
				}
				HAL_SPI_Transmit(&hspi2, data, usb_data_rx_size, 100);
 8000db0:	7cfb      	ldrb	r3, [r7, #19]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	4825      	ldr	r0, [pc, #148]	; (8000e50 <conf_ps_fpga+0x1b4>)
 8000dba:	f005 feae 	bl	8006b1a <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4822      	ldr	r0, [pc, #136]	; (8000e4c <conf_ps_fpga+0x1b0>)
 8000dc4:	f002 fd4a 	bl	800385c <HAL_GPIO_WritePin>
				bytes_written+=usb_data_rx_size;
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	4413      	add	r3, r2
 8000dce:	61fb      	str	r3, [r7, #28]
				/*Request the next packet*/

				send_reply((uint8_t) ACK);
 8000dd0:	2079      	movs	r0, #121	; 0x79
 8000dd2:	f7ff fe67 	bl	8000aa4 <send_reply>
 8000dd6:	46b5      	mov	sp, r6
			}
		}while(bytes_written-file_size);
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d1a2      	bne.n	8000d26 <conf_ps_fpga+0x8a>

		/*Once all the data has been transmitted wait for CONF_DONE to be SET*/
		timer = HAL_GetTick();
 8000de0:	f001 f950 	bl	8002084 <HAL_GetTick>
 8000de4:	61b8      	str	r0, [r7, #24]
		while (HAL_GetTick() - timer< 10000)
 8000de6:	e006      	b.n	8000df6 <conf_ps_fpga+0x15a>
		{
			if (HAL_GPIO_ReadPin(CONF_DONE_GPIO_Port, CONF_DONE_Pin) == GPIO_PIN_SET)
 8000de8:	2102      	movs	r1, #2
 8000dea:	4817      	ldr	r0, [pc, #92]	; (8000e48 <conf_ps_fpga+0x1ac>)
 8000dec:	f002 fd1e 	bl	800382c <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d009      	beq.n	8000e0a <conf_ps_fpga+0x16e>
		while (HAL_GetTick() - timer< 10000)
 8000df6:	f001 f945 	bl	8002084 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d9ef      	bls.n	8000de8 <conf_ps_fpga+0x14c>
 8000e08:	e000      	b.n	8000e0c <conf_ps_fpga+0x170>
			{
			break;
 8000e0a:	bf00      	nop
			}
		}
		/*Wait for the INIT_DONE to be SET*/
			timer = HAL_GetTick();
 8000e0c:	f001 f93a 	bl	8002084 <HAL_GetTick>
 8000e10:	61b8      	str	r0, [r7, #24]
			while (HAL_GetTick() - timer< 10000)
 8000e12:	e008      	b.n	8000e26 <conf_ps_fpga+0x18a>
			{
				if (HAL_GPIO_ReadPin(INIT_DONE_GPIO_Port, INIT_DONE_Pin) == GPIO_PIN_SET)
 8000e14:	2104      	movs	r1, #4
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <conf_ps_fpga+0x1b0>)
 8000e18:	f002 fd08 	bl	800382c <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d101      	bne.n	8000e26 <conf_ps_fpga+0x18a>
				{
					return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e009      	b.n	8000e3a <conf_ps_fpga+0x19e>
			while (HAL_GetTick() - timer< 10000)
 8000e26:	f001 f92d 	bl	8002084 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d9ed      	bls.n	8000e14 <conf_ps_fpga+0x178>
				}
			}
	}
	return 1;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e44:	00059d8b 	.word	0x00059d8b
 8000e48:	48000800 	.word	0x48000800
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	200002c4 	.word	0x200002c4

08000e54 <fpga_usb_to_uart>:

static uint8_t fpga_usb_to_uart()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ACK);
 8000e5a:	2079      	movs	r0, #121	; 0x79
 8000e5c:	f7ff fe22 	bl	8000aa4 <send_reply>
	while(!is_reset)
 8000e60:	e018      	b.n	8000e94 <fpga_usb_to_uart+0x40>
	{
		/*There is a race condition that I can't detect. Adding a 10 ms delay is a workaround that works for whatever reason.*/
		uint32_t data_length = CDC_Available_FS();
 8000e62:	f00b fe67 	bl	800cb34 <CDC_Available_FS>
 8000e66:	6078      	str	r0, [r7, #4]
		if (data_length>0)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d012      	beq.n	8000e94 <fpga_usb_to_uart+0x40>
		{
			CDC_Read_FS(usb_rx_buf, data_length);
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <fpga_usb_to_uart+0x5c>)
 8000e72:	f00b fe77 	bl	800cb64 <CDC_Read_FS>
			HAL_Delay(10);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f001 f910 	bl	800209c <HAL_Delay>
			HAL_UART_Transmit(&huart4,usb_rx_buf,data_length,10);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	230a      	movs	r3, #10
 8000e82:	490b      	ldr	r1, [pc, #44]	; (8000eb0 <fpga_usb_to_uart+0x5c>)
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <fpga_usb_to_uart+0x60>)
 8000e86:	f006 f9a2 	bl	80071ce <HAL_UART_Transmit>
			memset(usb_rx_buf,'\0',data_length);
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <fpga_usb_to_uart+0x5c>)
 8000e90:	f00c fc14 	bl	800d6bc <memset>
	while(!is_reset)
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <fpga_usb_to_uart+0x64>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f083 0301 	eor.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1de      	bne.n	8000e62 <fpga_usb_to_uart+0xe>
		}
	}
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000220 	.word	0x20000220
 8000eb4:	20000328 	.word	0x20000328
 8000eb8:	2000082a 	.word	0x2000082a

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f001 f833 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f83f 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f9b3 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ece:	f000 f97f 	bl	80011d0 <MX_DMA_Init>
  MX_UART4_Init();
 8000ed2:	f000 f8ed 	bl	80010b0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000ed6:	f000 f91b 	bl	8001110 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 f949 	bl	8001170 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ede:	f00b fcb9 	bl	800c854 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000ee2:	f000 f885 	bl	8000ff0 <MX_CRC_Init>
  MX_SPI2_Init();
 8000ee6:	f000 f8a5 	bl	8001034 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t user_application_error=bootloader_init();
 8000eea:	f7ff fb25 	bl	8000538 <bootloader_init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t timer = HAL_GetTick();
 8000ef2:	f001 f8c7 	bl	8002084 <HAL_GetTick>
 8000ef6:	60b8      	str	r0, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (user_application_error || (HAL_GetTick()-timer)<400)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d107      	bne.n	8000f0e <main+0x52>
 8000efe:	f001 f8c1 	bl	8002084 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f0c:	d219      	bcs.n	8000f42 <main+0x86>
	  {
		  if(CDC_Available_FS()>0)
 8000f0e:	f00b fe11 	bl	800cb34 <CDC_Available_FS>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d016      	beq.n	8000f46 <main+0x8a>
		  {
				uint8_t received_command[4];
				CDC_Read_FS(received_command,sizeof(received_command));
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00b fe21 	bl	800cb64 <CDC_Read_FS>
				uint32_t command = (uint32_t)(received_command[0]<<24) | (uint32_t)(received_command[1]<<16) | (uint32_t)(received_command[2]<<8) | (uint32_t)(received_command[3]);
 8000f22:	783b      	ldrb	r3, [r7, #0]
 8000f24:	061b      	lsls	r3, r3, #24
 8000f26:	461a      	mov	r2, r3
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	041b      	lsls	r3, r3, #16
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	78ba      	ldrb	r2, [r7, #2]
 8000f30:	0212      	lsls	r2, r2, #8
 8000f32:	4313      	orrs	r3, r2
 8000f34:	78fa      	ldrb	r2, [r7, #3]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	607b      	str	r3, [r7, #4]
				command_handler(command);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fb4e 	bl	80005dc <command_handler>
		  if(CDC_Available_FS()>0)
 8000f40:	e001      	b.n	8000f46 <main+0x8a>
		  }
	  }
	  else
      {
		  jump_to_user_application();
 8000f42:	f7ff fb89 	bl	8000658 <jump_to_user_application>
	  if (user_application_error || (HAL_GetTick()-timer)<400)
 8000f46:	e7d7      	b.n	8000ef8 <main+0x3c>

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	; 0x58
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2244      	movs	r2, #68	; 0x44
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00c fbb0 	bl	800d6bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f004 fa87 	bl	8005480 <HAL_PWREx_ControlVoltageScaling>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f78:	f000 fa8e 	bl	8001498 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2322      	movs	r3, #34	; 0x22
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f86:	2301      	movs	r3, #1
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8a:	2340      	movs	r3, #64	; 0x40
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f92:	2302      	movs	r3, #2
 8000f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 fb64 	bl	800567c <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000fba:	f000 fa6d 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 ff70 	bl	8005ebc <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fe2:	f000 fa59 	bl	8001498 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3758      	adds	r7, #88	; 0x58
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_CRC_Init+0x3c>)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <MX_CRC_Init+0x40>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_CRC_Init+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_CRC_Init+0x3c>)
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_CRC_Init+0x3c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_CRC_Init+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_CRC_Init+0x3c>)
 8001014:	2201      	movs	r2, #1
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_CRC_Init+0x3c>)
 800101a:	f001 f9c1 	bl	80023a0 <HAL_CRC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001024:	f000 fa38 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002a0 	.word	0x200002a0
 8001030:	40023000 	.word	0x40023000

08001034 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_SPI2_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_SPI2_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001044:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI2_Init+0x74>)
 800104e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001052:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_SPI2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001066:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI2_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_SPI2_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001082:	2207      	movs	r2, #7
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI2_Init+0x74>)
 800108e:	2208      	movs	r2, #8
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_SPI2_Init+0x74>)
 8001094:	f005 fc76 	bl	8006984 <HAL_SPI_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 f9fb 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200002c4 	.word	0x200002c4
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_UART4_Init+0x58>)
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <MX_UART4_Init+0x5c>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_UART4_Init+0x58>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_UART4_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_UART4_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_UART4_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_UART4_Init+0x58>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_UART4_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_UART4_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_UART4_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_UART4_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_UART4_Init+0x58>)
 80010f4:	f005 ffe4 	bl	80070c0 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 f9cb 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000328 	.word	0x20000328
 800110c:	40004c00 	.word	0x40004c00

08001110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART1_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001154:	f005 ffb4 	bl	80070c0 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 f99b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200003ac 	.word	0x200003ac
 800116c:	40013800 	.word	0x40013800

08001170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <MX_USART2_UART_Init+0x5c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART2_UART_Init+0x58>)
 80011b4:	f005 ff84 	bl	80070c0 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011be:	f000 f96b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000430 	.word	0x20000430
 80011cc:	40004400 	.word	0x40004400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_DMA_Init+0x60>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <MX_DMA_Init+0x60>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6493      	str	r3, [r2, #72]	; 0x48
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_DMA_Init+0x60>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_DMA_Init+0x60>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <MX_DMA_Init+0x60>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6493      	str	r3, [r2, #72]	; 0x48
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_DMA_Init+0x60>)
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200f      	movs	r0, #15
 800120c:	f001 f87f 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001210:	200f      	movs	r0, #15
 8001212:	f001 f898 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	203c      	movs	r0, #60	; 0x3c
 800121c:	f001 f877 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001220:	203c      	movs	r0, #60	; 0x3c
 8001222:	f001 f890 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	4b71      	ldr	r3, [pc, #452]	; (8001410 <MX_GPIO_Init+0x1dc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a70      	ldr	r2, [pc, #448]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b68      	ldr	r3, [pc, #416]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <MX_GPIO_Init+0x1dc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a64      	ldr	r2, [pc, #400]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b62      	ldr	r3, [pc, #392]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a5e      	ldr	r2, [pc, #376]	; (8001410 <MX_GPIO_Init+0x1dc>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <MX_GPIO_Init+0x1dc>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	4b59      	ldr	r3, [pc, #356]	; (8001410 <MX_GPIO_Init+0x1dc>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <MX_GPIO_Init+0x1dc>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <MX_GPIO_Init+0x1dc>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_RST_Pin|nCONFIG_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	4853      	ldr	r0, [pc, #332]	; (8001414 <MX_GPIO_Init+0x1e0>)
 80012c8:	f002 fac8 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2120      	movs	r1, #32
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f002 fac2 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUSY_LED_Pin|ERROR_LED_Pin|ESP_IO9_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 710c 	mov.w	r1, #560	; 0x230
 80012de:	484e      	ldr	r0, [pc, #312]	; (8001418 <MX_GPIO_Init+0x1e4>)
 80012e0:	f002 fabc 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4846      	ldr	r0, [pc, #280]	; (8001414 <MX_GPIO_Init+0x1e0>)
 80012fc:	f002 f842 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RST_Pin nCONFIG_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin|nCONFIG_Pin;
 8001300:	2305      	movs	r3, #5
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	483f      	ldr	r0, [pc, #252]	; (8001414 <MX_GPIO_Init+0x1e0>)
 8001318:	f002 f834 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONF_DONE_Pin */
  GPIO_InitStruct.Pin = CONF_DONE_Pin;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONF_DONE_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4839      	ldr	r0, [pc, #228]	; (8001414 <MX_GPIO_Init+0x1e0>)
 8001330:	f002 f828 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001334:	f248 73d2 	movw	r3, #34770	; 0x87d2
 8001338:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f002 f81a 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001350:	2320      	movs	r3, #32
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f002 f80b 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800136e:	f241 73f0 	movw	r3, #6128	; 0x17f0
 8001372:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	2303      	movs	r3, #3
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4824      	ldr	r0, [pc, #144]	; (8001414 <MX_GPIO_Init+0x1e0>)
 8001384:	f001 fffe 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001388:	f64f 1301 	movw	r3, #63745	; 0xf901
 800138c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <MX_GPIO_Init+0x1e4>)
 800139e:	f001 fff1 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : nSTATUS_Pin INIT_DONE_Pin */
  GPIO_InitStruct.Pin = nSTATUS_Pin|INIT_DONE_Pin;
 80013a2:	2306      	movs	r3, #6
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <MX_GPIO_Init+0x1e4>)
 80013b6:	f001 ffe5 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ba:	2304      	movs	r3, #4
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013be:	2303      	movs	r3, #3
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <MX_GPIO_Init+0x1e8>)
 80013ce:	f001 ffd9 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_LED_Pin ERROR_LED_Pin ESP_IO9_Pin */
  GPIO_InitStruct.Pin = BUSY_LED_Pin|ERROR_LED_Pin|ESP_IO9_Pin;
 80013d2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <MX_GPIO_Init+0x1e4>)
 80013ec:	f001 ffca 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f0:	2308      	movs	r3, #8
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_GPIO_Init+0x1ec>)
 8001404:	f001 ffbe 	bl	8003384 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	48000800 	.word	0x48000800
 8001418:	48000400 	.word	0x48000400
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001c00 	.word	0x48001c00

08001424 <deInitializer>:

/* USER CODE BEGIN 4 */
void deInitializer()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	HAL_CRC_DeInit(&hcrc);
 8001428:	4814      	ldr	r0, [pc, #80]	; (800147c <deInitializer+0x58>)
 800142a:	f001 f81d 	bl	8002468 <HAL_CRC_DeInit>
	MX_USB_DEVICE_DeInit();
 800142e:	f00b fa07 	bl	800c840 <MX_USB_DEVICE_DeInit>
	HAL_UART_DeInit(&huart2);
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <deInitializer+0x5c>)
 8001434:	f005 fe92 	bl	800715c <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart1);
 8001438:	4812      	ldr	r0, [pc, #72]	; (8001484 <deInitializer+0x60>)
 800143a:	f005 fe8f 	bl	800715c <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart4);
 800143e:	4812      	ldr	r0, [pc, #72]	; (8001488 <deInitializer+0x64>)
 8001440:	f005 fe8c 	bl	800715c <HAL_UART_DeInit>
	HAL_SPI_DeInit(&hspi2);
 8001444:	4811      	ldr	r0, [pc, #68]	; (800148c <deInitializer+0x68>)
 8001446:	f005 fb40 	bl	8006aca <HAL_SPI_DeInit>
	//HAL_SPI_DeInit(&hspi1);
	HAL_GPIO_DeInit(LD4_GPIO_Port, LD4_Pin);
 800144a:	2120      	movs	r1, #32
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f002 f912 	bl	8003678 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(B1_GPIO_Port, B1_Pin);
 8001454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <deInitializer+0x6c>)
 800145a:	f002 f90d 	bl	8003678 <HAL_GPIO_DeInit>

	HAL_RCC_DeInit();
 800145e:	f004 f875 	bl	800554c <HAL_RCC_DeInit>
	HAL_DeInit();
 8001462:	f000 fd83 	bl	8001f6c <HAL_DeInit>
	SysTick->CTRL = 0;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <deInitializer+0x70>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <deInitializer+0x70>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <deInitializer+0x70>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002a0 	.word	0x200002a0
 8001480:	20000430 	.word	0x20000430
 8001484:	200003ac 	.word	0x200003ac
 8001488:	20000328 	.word	0x20000328
 800148c:	200002c4 	.word	0x200002c4
 8001490:	48000800 	.word	0x48000800
 8001494:	e000e010 	.word	0xe000e010

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80014a0:	2120      	movs	r1, #32
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <Error_Handler+0x1c>)
 80014a4:	f002 f9f2 	bl	800388c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ac:	f000 fdf6 	bl	800209c <HAL_Delay>
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80014b0:	e7f6      	b.n	80014a0 <Error_Handler+0x8>
 80014b2:	bf00      	nop
 80014b4:	48000400 	.word	0x48000400

080014b8 <ring_buffer_init>:
    bool is_full;
};


rbuf_handle_t ring_buffer_init(size_t size)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

	rbuf_handle_t buf = malloc(sizeof(ring_buffer_t));
 80014c0:	2014      	movs	r0, #20
 80014c2:	f00c f8eb 	bl	800d69c <malloc>
 80014c6:	4603      	mov	r3, r0
 80014c8:	60fb      	str	r3, [r7, #12]
	if (buf == NULL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <ring_buffer_init+0x1c>
	{
		return NULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e01c      	b.n	800150e <ring_buffer_init+0x56>
	}

	buf->head = 0;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
	buf->tail = 0;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
	buf->buffer_size = size;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]
	buf->data = calloc(buf->buffer_size, sizeof(*buf->data));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2101      	movs	r1, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00c f8a3 	bl	800d638 <calloc>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	60da      	str	r2, [r3, #12]
	buf->is_empty = true;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	741a      	strb	r2, [r3, #16]
	buf->is_full = false;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	745a      	strb	r2, [r3, #17]
	lock = false;
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <ring_buffer_init+0x60>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

	return buf;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000544 	.word	0x20000544

0800151c <ring_buffer_available_bytes>:
	lock = false;
	return OK;
}

size_t ring_buffer_available_bytes(rbuf_handle_t handle)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if (lock)
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <ring_buffer_available_bytes+0x14>
	{
		return 0;
 800152c:	2300      	movs	r3, #0
 800152e:	e03b      	b.n	80015a8 <ring_buffer_available_bytes+0x8c>
	}
	lock = true;
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d104      	bne.n	8001546 <ring_buffer_available_bytes+0x2a>
	{
		lock = false;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
		return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e030      	b.n	80015a8 <ring_buffer_available_bytes+0x8c>
	}

	if (handle->is_empty)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7c1b      	ldrb	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <ring_buffer_available_bytes+0x3c>
	{
		lock = false;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
		return 0;
 8001554:	2300      	movs	r3, #0
 8001556:	e027      	b.n	80015a8 <ring_buffer_available_bytes+0x8c>
	}
	else if (handle->is_full)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7c5b      	ldrb	r3, [r3, #17]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <ring_buffer_available_bytes+0x50>
	{
		lock = false;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
		return (handle->buffer_size);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	e01d      	b.n	80015a8 <ring_buffer_available_bytes+0x8c>
	}
	else if (handle->head > handle->tail)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	d90a      	bls.n	800158e <ring_buffer_available_bytes+0x72>
	{
		size_t ret = (size_t)(handle->head - handle->tail);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	60bb      	str	r3, [r7, #8]
		lock = false;
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
		return ret;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	e00c      	b.n	80015a8 <ring_buffer_available_bytes+0x8c>
	}
	else
	{
		/*This case shouldn't happen normally since the tail should never exceed the head*/
		size_t ret = (size_t)(handle->buffer_size + handle->head - handle->tail);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	441a      	add	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	60fb      	str	r3, [r7, #12]
		lock = false;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <ring_buffer_available_bytes+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
		return ret;
 80015a6:	68fb      	ldr	r3, [r7, #12]
	}
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20000544 	.word	0x20000544

080015b8 <ring_buffer_write>:


ring_buffer_SIG ring_buffer_write(rbuf_handle_t handle, uint8_t* data, size_t size)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	if (lock)
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <ring_buffer_write+0xfc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <ring_buffer_write+0x18>
	{
		return BUSY;
 80015cc:	2302      	movs	r3, #2
 80015ce:	e06a      	b.n	80016a6 <ring_buffer_write+0xee>
	}
	lock = true;
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <ring_buffer_write+0xfc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <ring_buffer_write+0x2e>
	{
		lock = false;
 80015dc:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <ring_buffer_write+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
		return FAIL;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e05f      	b.n	80016a6 <ring_buffer_write+0xee>
	}
	size_t buf_unused_space;
	if (handle->is_full)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	7c5b      	ldrb	r3, [r3, #17]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <ring_buffer_write+0x40>
	{
		lock = false;
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <ring_buffer_write+0xfc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		return FAIL;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e056      	b.n	80016a6 <ring_buffer_write+0xee>
	}
	else if (handle->is_empty)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	7c1b      	ldrb	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <ring_buffer_write+0x50>
	{
		buf_unused_space = handle->buffer_size;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e015      	b.n	8001634 <ring_buffer_write+0x7c>
	}
	else if (handle->head > handle->tail)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d909      	bls.n	8001628 <ring_buffer_write+0x70>
	{
		buf_unused_space = handle->buffer_size - (handle->head - handle->tail);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1acb      	subs	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e005      	b.n	8001634 <ring_buffer_write+0x7c>
	}
	else
	{
		buf_unused_space = handle->tail - handle->head;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
	}

	if (buf_unused_space < size)
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d204      	bcs.n	8001646 <ring_buffer_write+0x8e>
	{
		lock = false;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <ring_buffer_write+0xfc>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001642:	2301      	movs	r3, #1
 8001644:	e02f      	b.n	80016a6 <ring_buffer_write+0xee>
	}

	for (size_t i = 0; i < size; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	e018      	b.n	800167e <ring_buffer_write+0xc6>
	{
		handle->data[handle->head] = *(data + i);
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	441a      	add	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	68d9      	ldr	r1, [r3, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	440b      	add	r3, r1
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	701a      	strb	r2, [r3, #0]
		handle->head = ((handle->head + 1) % handle->buffer_size);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	6892      	ldr	r2, [r2, #8]
 800166a:	fbb3 f1f2 	udiv	r1, r3, r2
 800166e:	fb01 f202 	mul.w	r2, r1, r2
 8001672:	1a9a      	subs	r2, r3, r2
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < size; i++)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	3301      	adds	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3e2      	bcc.n	800164c <ring_buffer_write+0x94>
	}
	if (handle->head == handle->tail)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	d102      	bne.n	8001698 <ring_buffer_write+0xe0>
	{
		handle->is_full = true;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	745a      	strb	r2, [r3, #17]
	}
	handle->is_empty = false;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	741a      	strb	r2, [r3, #16]
	lock = false;
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ring_buffer_write+0xfc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
	return OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000544 	.word	0x20000544

080016b8 <ring_buffer_read>:

ring_buffer_SIG ring_buffer_read(rbuf_handle_t handle, uint8_t* data, size_t size)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
	if (lock)
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <ring_buffer_read+0x108>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <ring_buffer_read+0x18>
	{
		return BUSY;
 80016cc:	2302      	movs	r3, #2
 80016ce:	e071      	b.n	80017b4 <ring_buffer_read+0xfc>
	}
	lock = true;
 80016d0:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <ring_buffer_read+0x108>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <ring_buffer_read+0x2e>
	{
		lock = false;
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <ring_buffer_read+0x108>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
		return FAIL;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e066      	b.n	80017b4 <ring_buffer_read+0xfc>
	}
	size_t buf_size_used;
	if (handle->is_empty)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	7c1b      	ldrb	r3, [r3, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <ring_buffer_read+0x40>
	{
		lock = false;
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <ring_buffer_read+0x108>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
		return FAIL;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e05d      	b.n	80017b4 <ring_buffer_read+0xfc>
	}
	else if (handle->is_full)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	7c5b      	ldrb	r3, [r3, #17]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <ring_buffer_read+0x50>
	{
		buf_size_used = handle->buffer_size;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e015      	b.n	8001734 <ring_buffer_read+0x7c>
	}
	else if (handle->head > handle->tail)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	d906      	bls.n	8001722 <ring_buffer_read+0x6a>
	{
		buf_size_used = (handle->head - handle->tail);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e008      	b.n	8001734 <ring_buffer_read+0x7c>
	}
	else
	{
		buf_size_used = handle->buffer_size - (handle->tail - handle->head);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	1acb      	subs	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
	}

	if (buf_size_used > size)
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d904      	bls.n	8001746 <ring_buffer_read+0x8e>
	{
		lock = false;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <ring_buffer_read+0x108>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001742:	2301      	movs	r3, #1
 8001744:	e036      	b.n	80017b4 <ring_buffer_read+0xfc>
	}


	for (size_t i = 0; i < buf_size_used; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	e01f      	b.n	800178c <ring_buffer_read+0xd4>
	{
		*(data + i) = handle->data[handle->tail];
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	441a      	add	r2, r3
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	440b      	add	r3, r1
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	701a      	strb	r2, [r3, #0]
		handle->data[handle->tail] = '\0';
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4413      	add	r3, r2
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
		handle->tail = ((handle->tail + 1) % handle->buffer_size);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6892      	ldr	r2, [r2, #8]
 8001778:	fbb3 f1f2 	udiv	r1, r3, r2
 800177c:	fb01 f202 	mul.w	r2, r1, r2
 8001780:	1a9a      	subs	r2, r3, r2
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	605a      	str	r2, [r3, #4]
	for (size_t i = 0; i < buf_size_used; i++)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	3301      	adds	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	d3db      	bcc.n	800174c <ring_buffer_read+0x94>
	}
	if (handle->tail == handle->head)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d102      	bne.n	80017a6 <ring_buffer_read+0xee>
	{
		handle->is_empty = true;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	741a      	strb	r2, [r3, #16]
	}
	handle->is_full = false;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	745a      	strb	r2, [r3, #17]
	lock = false;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <ring_buffer_read+0x108>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
	return OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000544 	.word	0x20000544

080017c4 <ring_buffer_deinit>:


ring_buffer_SIG ring_buffer_deinit(rbuf_handle_t handle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if (lock)
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <ring_buffer_deinit+0x4c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <ring_buffer_deinit+0x14>
	{
		return BUSY;
 80017d4:	2302      	movs	r3, #2
 80017d6:	e016      	b.n	8001806 <ring_buffer_deinit+0x42>
	}
	lock = true;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <ring_buffer_deinit+0x4c>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <ring_buffer_deinit+0x2a>
	{
		lock = false;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <ring_buffer_deinit+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
		return FAIL;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00b      	b.n	8001806 <ring_buffer_deinit+0x42>
	}
	free(handle->data);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00b ff5a 	bl	800d6ac <free>
	free(handle);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f00b ff57 	bl	800d6ac <free>
	lock = false;
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <ring_buffer_deinit+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
	return OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000544 	.word	0x20000544

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_MspInit+0x44>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6613      	str	r3, [r2, #96]	; 0x60
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x44>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_CRC_MspInit+0x38>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_CRC_MspInit+0x3c>)
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_CRC_MspInit+0x3c>)
 8001874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001878:	6493      	str	r3, [r2, #72]	; 0x48
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_CRC_MspInit+0x3c>)
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023000 	.word	0x40023000
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_CRC_MspDeInit+0x2c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d105      	bne.n	80018ba <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_CRC_MspDeInit+0x30>)
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_CRC_MspDeInit+0x30>)
 80018b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018b8:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023000 	.word	0x40023000
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a25      	ldr	r2, [pc, #148]	; (8001984 <HAL_SPI_MspInit+0xb4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d144      	bne.n	800197c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	4a24      	ldr	r2, [pc, #144]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_SPI_MspInit+0xb8>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800193a:	2308      	movs	r3, #8
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800194a:	2305      	movs	r3, #5
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <HAL_SPI_MspInit+0xbc>)
 8001956:	f001 fd15 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196c:	2305      	movs	r3, #5
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <HAL_SPI_MspInit+0xc0>)
 8001978:	f001 fd04 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40003800 	.word	0x40003800
 8001988:	40021000 	.word	0x40021000
 800198c:	48000800 	.word	0x48000800
 8001990:	48000400 	.word	0x48000400

08001994 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_SPI_MspDeInit+0x38>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10e      	bne.n	80019c4 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_SPI_MspDeInit+0x3c>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_SPI_MspDeInit+0x3c>)
 80019ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58

    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 80019b2:	2108      	movs	r1, #8
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <HAL_SPI_MspDeInit+0x40>)
 80019b6:	f001 fe5f 	bl	8003678 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <HAL_SPI_MspDeInit+0x44>)
 80019c0:	f001 fe5a 	bl	8003678 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40003800 	.word	0x40003800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000400 	.word	0x48000400

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0a8      	sub	sp, #160	; 0xa0
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2268      	movs	r2, #104	; 0x68
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00b fe5d 	bl	800d6bc <memset>
  if(huart->Instance==UART4)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4aa5      	ldr	r2, [pc, #660]	; (8001c9c <HAL_UART_MspInit+0x2c0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	f040 8090 	bne.w	8001b2e <HAL_UART_MspInit+0x152>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 fc54 	bl	80062c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a26:	f7ff fd37 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a9c      	ldr	r2, [pc, #624]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a34:	6593      	str	r3, [r2, #88]	; 0x58
 8001a36:	4b9a      	ldr	r3, [pc, #616]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b97      	ldr	r3, [pc, #604]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a96      	ldr	r2, [pc, #600]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b91      	ldr	r3, [pc, #580]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f001 fc73 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4877      	ldr	r0, [pc, #476]	; (8001ca4 <HAL_UART_MspInit+0x2c8>)
 8001ac6:	f001 fc5d 	bl	8003384 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001aca:	4b77      	ldr	r3, [pc, #476]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001acc:	4a77      	ldr	r2, [pc, #476]	; (8001cac <HAL_UART_MspInit+0x2d0>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8001ad0:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad6:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001adc:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae2:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001af4:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afa:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b00:	4869      	ldr	r0, [pc, #420]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001b02:	f000 febf 	bl	8002884 <HAL_DMA_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8001b0c:	f7ff fcc4 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001b14:	671a      	str	r2, [r3, #112]	; 0x70
 8001b16:	4a64      	ldr	r2, [pc, #400]	; (8001ca8 <HAL_UART_MspInit+0x2cc>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2034      	movs	r0, #52	; 0x34
 8001b22:	f000 fbf4 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b26:	2034      	movs	r0, #52	; 0x34
 8001b28:	f000 fc0d 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b2c:	e0b2      	b.n	8001c94 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5f      	ldr	r2, [pc, #380]	; (8001cb0 <HAL_UART_MspInit+0x2d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d16c      	bne.n	8001c12 <HAL_UART_MspInit+0x236>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fbbf 	bl	80062c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8001b50:	f7ff fca2 	bl	8001498 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b54:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b60:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4842      	ldr	r0, [pc, #264]	; (8001cb4 <HAL_UART_MspInit+0x2d8>)
 8001baa:	f001 fbeb 	bl	8003384 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001bae:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bb0:	4a42      	ldr	r2, [pc, #264]	; (8001cbc <HAL_UART_MspInit+0x2e0>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001be4:	4834      	ldr	r0, [pc, #208]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001be6:	f000 fe4d 	bl	8002884 <HAL_DMA_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8001bf0:	f7ff fc52 	bl	8001498 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a30      	ldr	r2, [pc, #192]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bf8:	671a      	str	r2, [r3, #112]	; 0x70
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <HAL_UART_MspInit+0x2dc>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2025      	movs	r0, #37	; 0x25
 8001c06:	f000 fb82 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c0a:	2025      	movs	r0, #37	; 0x25
 8001c0c:	f000 fb9b 	bl	8002346 <HAL_NVIC_EnableIRQ>
}
 8001c10:	e040      	b.n	8001c94 <HAL_UART_MspInit+0x2b8>
  else if(huart->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <HAL_UART_MspInit+0x2e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d13b      	bne.n	8001c94 <HAL_UART_MspInit+0x2b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fb4d 	bl	80062c8 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001c34:	f7ff fc30 	bl	8001498 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c42:	6593      	str	r3, [r2, #88]	; 0x58
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x2c4>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f001 fb78 	bl	8003384 <HAL_GPIO_Init>
}
 8001c94:	bf00      	nop
 8001c96:	37a0      	adds	r7, #160	; 0xa0
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004c00 	.word	0x40004c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	200004b4 	.word	0x200004b4
 8001cac:	40020458 	.word	0x40020458
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	200004fc 	.word	0x200004fc
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40004400 	.word	0x40004400

08001cc4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_UART_MspDeInit+0x9c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d118      	bne.n	8001d08 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_UART_MspDeInit+0xa0>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <HAL_UART_MspDeInit+0xa0>)
 8001cdc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f001 fcc6 	bl	8003678 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8001cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cf0:	481d      	ldr	r0, [pc, #116]	; (8001d68 <HAL_UART_MspDeInit+0xa4>)
 8001cf2:	f001 fcc1 	bl	8003678 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fe7a 	bl	80029f4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001d00:	2034      	movs	r0, #52	; 0x34
 8001d02:	f000 fb2e 	bl	8002362 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001d06:	e027      	b.n	8001d58 <HAL_UART_MspDeInit+0x94>
  else if(huart->Instance==USART1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_UART_MspDeInit+0xa8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d112      	bne.n	8001d38 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_UART_MspDeInit+0xa0>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_UART_MspDeInit+0xa0>)
 8001d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1c:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001d1e:	21c0      	movs	r1, #192	; 0xc0
 8001d20:	4813      	ldr	r0, [pc, #76]	; (8001d70 <HAL_UART_MspDeInit+0xac>)
 8001d22:	f001 fca9 	bl	8003678 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fe62 	bl	80029f4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001d30:	2025      	movs	r0, #37	; 0x25
 8001d32:	f000 fb16 	bl	8002362 <HAL_NVIC_DisableIRQ>
}
 8001d36:	e00f      	b.n	8001d58 <HAL_UART_MspDeInit+0x94>
  else if(huart->Instance==USART2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_UART_MspDeInit+0xb0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10a      	bne.n	8001d58 <HAL_UART_MspDeInit+0x94>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_UART_MspDeInit+0xa0>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_UART_MspDeInit+0xa0>)
 8001d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001d4e:	210c      	movs	r1, #12
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f001 fc90 	bl	8003678 <HAL_GPIO_DeInit>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004c00 	.word	0x40004c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000800 	.word	0x48000800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	48000400 	.word	0x48000400
 8001d74:	40004400 	.word	0x40004400

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>
	...

08001d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001d84:	2120      	movs	r1, #32
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <HardFault_Handler+0x18>)
 8001d88:	f001 fd80 	bl	800388c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d90:	f000 f984 	bl	800209c <HAL_Delay>
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001d94:	e7f6      	b.n	8001d84 <HardFault_Handler+0x4>
 8001d96:	bf00      	nop
 8001d98:	48000400 	.word	0x48000400

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 f93e 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <DMA1_Channel5_IRQHandler+0x10>)
 8001dea:	f000 ff74 	bl	8002cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200004fc 	.word	0x200004fc

08001df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <USART1_IRQHandler+0x10>)
 8001dfe:	f005 fba7 	bl	8007550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200003ac 	.word	0x200003ac

08001e0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <UART4_IRQHandler+0x10>)
 8001e12:	f005 fb9d 	bl	8007550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000328 	.word	0x20000328

08001e20 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA2_Channel5_IRQHandler+0x10>)
 8001e26:	f000 ff56 	bl	8002cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004b4 	.word	0x200004b4

08001e34 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <USB_IRQHandler+0x10>)
 8001e3a:	f001 febf 	bl	8003bbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20001aac 	.word	0x20001aac

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f00b fbe6 	bl	800d648 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20028000 	.word	0x20028000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	20000548 	.word	0x20000548
 8001eb0:	20001fd8 	.word	0x20001fd8

08001eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Boot_Reset_Handler>:

    .section	.text.Boot_Reset_Handler
	.weak	Boot_Reset_Handler
	.type	Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001edc:	f7ff ffea 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee2:	490d      	ldr	r1, [pc, #52]	; (8001f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <LoopForever+0xe>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	; (8001f24 <LoopForever+0x16>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f06:	f00b fba5 	bl	800d654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0a:	f7fe ffd7 	bl	8000ebc <main>

08001f0e <LoopForever>:

LoopForever:
    b LoopForever
 8001f0e:	e7fe      	b.n	8001f0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f10:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001f1c:	0800d9ac 	.word	0x0800d9ac
  ldr r2, =_sbss
 8001f20:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001f24:	20001fd4 	.word	0x20001fd4

08001f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC1_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_Init+0x3c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <HAL_Init+0x3c>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f000 f9d8 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 f84b 	bl	8001fe4 <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	e001      	b.n	8001f5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f5a:	f7ff fc5b 	bl	8001814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_DeInit+0x64>)
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_DeInit+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_DeInit+0x64>)
 8001faa:	f04f 32ff 	mov.w	r2, #4294967295
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_DeInit+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_DeInit+0x64>)
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_DeInit+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001fc4:	f000 f806 	bl	8001fd4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_InitTick+0x6c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d023      	beq.n	8002040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_InitTick+0x70>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_InitTick+0x6c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f9b9 	bl	8002386 <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d809      	bhi.n	8002034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f971 	bl	800230e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_InitTick+0x74>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e007      	b.n	8002044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e004      	b.n	8002044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e001      	b.n	8002044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000008 	.word	0x20000008
 8002080:	2000054c 	.word	0x2000054c

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000054c 	.word	0x2000054c

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db12      	blt.n	80021bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	490a      	ldr	r1, [pc, #40]	; (80021c8 <__NVIC_DisableIRQ+0x44>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	3320      	adds	r3, #32
 80021ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021b0:	f3bf 8f4f 	dsb	sy
}
 80021b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021b6:	f3bf 8f6f 	isb	sy
}
 80021ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800228c:	f3bf 8f4f 	dsb	sy
}
 8002290:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <__NVIC_SystemReset+0x24>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800229a:	4904      	ldr	r1, [pc, #16]	; (80022ac <__NVIC_SystemReset+0x24>)
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_SystemReset+0x28>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022a2:	f3bf 8f4f 	dsb	sy
}
 80022a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <__NVIC_SystemReset+0x20>
 80022ac:	e000ed00 	.word	0xe000ed00
 80022b0:	05fa0004 	.word	0x05fa0004

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff78 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff feef 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff04 	bl	800212c <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff78 	bl	8002220 <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff47 	bl	80021cc <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fef7 	bl	8002148 <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff07 	bl	8002184 <__NVIC_DisableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002382:	f7ff ff81 	bl	8002288 <__NVIC_SystemReset>

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff90 	bl	80022b4 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e054      	b.n	800245c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7f5b      	ldrb	r3, [r3, #29]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fa4a 	bl	800185c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_CRC_Init+0xc4>)
 80023dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0218 	bic.w	r2, r2, #24
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	e00c      	b.n	800240a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	461a      	mov	r2, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9bc 	bl	8002778 <HAL_CRCEx_Polynomial_Set>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e028      	b.n	800245c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	795b      	ldrb	r3, [r3, #5]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f04f 32ff 	mov.w	r2, #4294967295
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	e004      	b.n	8002428 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6912      	ldr	r2, [r2, #16]
 8002426:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	04c11db7 	.word	0x04c11db7

08002468 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e022      	b.n	80024c0 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7f5b      	ldrb	r3, [r3, #29]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d101      	bne.n	8002488 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
 8002486:	e01b      	b.n	80024c0 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	791b      	ldrb	r3, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff f9f5 	bl	800189c <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2202      	movs	r2, #2
 80024dc:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d006      	beq.n	80024f4 <HAL_CRC_Accumulate+0x2c>
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d829      	bhi.n	800253e <HAL_CRC_Accumulate+0x76>
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d019      	beq.n	8002522 <HAL_CRC_Accumulate+0x5a>
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d01e      	beq.n	8002530 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80024f2:	e024      	b.n	800253e <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e00a      	b.n	8002510 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	441a      	add	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3f0      	bcc.n	80024fa <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
      break;
 8002520:	e00e      	b.n	8002540 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f85e 	bl	80025e8 <CRC_Handle_8>
 800252c:	6138      	str	r0, [r7, #16]
      break;
 800252e:	e007      	b.n	8002540 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f8e5 	bl	8002704 <CRC_Handle_16>
 800253a:	6138      	str	r0, [r7, #16]
      break;
 800253c:	e000      	b.n	8002540 <HAL_CRC_Accumulate+0x78>
      break;
 800253e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002546:	693b      	ldr	r3, [r7, #16]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2202      	movs	r2, #2
 8002564:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d006      	beq.n	800258c <HAL_CRC_Calculate+0x3c>
 800257e:	2b03      	cmp	r3, #3
 8002580:	d829      	bhi.n	80025d6 <HAL_CRC_Calculate+0x86>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d019      	beq.n	80025ba <HAL_CRC_Calculate+0x6a>
 8002586:	2b02      	cmp	r3, #2
 8002588:	d01e      	beq.n	80025c8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800258a:	e024      	b.n	80025d6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e00a      	b.n	80025a8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3f0      	bcc.n	8002592 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
      break;
 80025b8:	e00e      	b.n	80025d8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f812 	bl	80025e8 <CRC_Handle_8>
 80025c4:	6138      	str	r0, [r7, #16]
      break;
 80025c6:	e007      	b.n	80025d8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f899 	bl	8002704 <CRC_Handle_16>
 80025d2:	6138      	str	r0, [r7, #16]
      break;
 80025d4:	e000      	b.n	80025d8 <HAL_CRC_Calculate+0x88>
      break;
 80025d6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80025de:	693b      	ldr	r3, [r7, #16]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	e023      	b.n	8002642 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	3301      	adds	r3, #1
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	440b      	add	r3, r1
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002614:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	440b      	add	r3, r1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002624:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	3303      	adds	r3, #3
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	440b      	add	r3, r1
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002638:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800263a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3301      	adds	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	429a      	cmp	r2, r3
 800264a:	d3d6      	bcc.n	80025fa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d04d      	beq.n	80026f2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d116      	bne.n	80026a8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	b21a      	sxth	r2, r3
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3301      	adds	r3, #1
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	440b      	add	r3, r1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b21b      	sxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	b21b      	sxth	r3, r3
 800269a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	8b7a      	ldrh	r2, [r7, #26]
 80026a6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d11f      	bne.n	80026f2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	3301      	adds	r3, #1
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	440b      	add	r3, r1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	8b7a      	ldrh	r2, [r7, #26]
 80026de:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3724      	adds	r7, #36	; 0x24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e013      	b.n	800273e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	440b      	add	r3, r1
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3301      	adds	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3e6      	bcc.n	8002716 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4413      	add	r3, r2
 8002760:	881a      	ldrh	r2, [r3, #0]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002788:	231f      	movs	r3, #31
 800278a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800278c:	bf00      	nop
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1e5a      	subs	r2, r3, #1
 8002792:	613a      	str	r2, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <HAL_CRCEx_Polynomial_Set+0x34>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b18      	cmp	r3, #24
 80027b0:	d846      	bhi.n	8002840 <HAL_CRCEx_Polynomial_Set+0xc8>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	08002847 	.word	0x08002847
 80027bc:	08002841 	.word	0x08002841
 80027c0:	08002841 	.word	0x08002841
 80027c4:	08002841 	.word	0x08002841
 80027c8:	08002841 	.word	0x08002841
 80027cc:	08002841 	.word	0x08002841
 80027d0:	08002841 	.word	0x08002841
 80027d4:	08002841 	.word	0x08002841
 80027d8:	08002835 	.word	0x08002835
 80027dc:	08002841 	.word	0x08002841
 80027e0:	08002841 	.word	0x08002841
 80027e4:	08002841 	.word	0x08002841
 80027e8:	08002841 	.word	0x08002841
 80027ec:	08002841 	.word	0x08002841
 80027f0:	08002841 	.word	0x08002841
 80027f4:	08002841 	.word	0x08002841
 80027f8:	08002829 	.word	0x08002829
 80027fc:	08002841 	.word	0x08002841
 8002800:	08002841 	.word	0x08002841
 8002804:	08002841 	.word	0x08002841
 8002808:	08002841 	.word	0x08002841
 800280c:	08002841 	.word	0x08002841
 8002810:	08002841 	.word	0x08002841
 8002814:	08002841 	.word	0x08002841
 8002818:	0800281d 	.word	0x0800281d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b06      	cmp	r3, #6
 8002820:	d913      	bls.n	800284a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002826:	e010      	b.n	800284a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b07      	cmp	r3, #7
 800282c:	d90f      	bls.n	800284e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002832:	e00c      	b.n	800284e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	d90b      	bls.n	8002852 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800283e:	e008      	b.n	8002852 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	75fb      	strb	r3, [r7, #23]
      break;
 8002844:	e006      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002846:	bf00      	nop
 8002848:	e004      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800284a:	bf00      	nop
 800284c:	e002      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002852:	bf00      	nop
  }
  if (status == HAL_OK)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 0118 	bic.w	r1, r3, #24
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e098      	b.n	80029c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <HAL_DMA_Init+0x150>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d80f      	bhi.n	80028c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <HAL_DMA_Init+0x154>)
 80028aa:	4413      	add	r3, r2
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_DMA_Init+0x158>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <HAL_DMA_Init+0x15c>)
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
 80028c0:	e00e      	b.n	80028e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_DMA_Init+0x160>)
 80028ca:	4413      	add	r3, r2
 80028cc:	4a43      	ldr	r2, [pc, #268]	; (80029dc <HAL_DMA_Init+0x158>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	009a      	lsls	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <HAL_DMA_Init+0x164>)
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800293a:	d039      	beq.n	80029b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_DMA_Init+0x15c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d11a      	bne.n	800297c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_DMA_Init+0x168>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f003 031c 	and.w	r3, r3, #28
 8002952:	210f      	movs	r1, #15
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	4924      	ldr	r1, [pc, #144]	; (80029ec <HAL_DMA_Init+0x168>)
 800295c:	4013      	ands	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_DMA_Init+0x168>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f003 031c 	and.w	r3, r3, #28
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	491d      	ldr	r1, [pc, #116]	; (80029ec <HAL_DMA_Init+0x168>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
 800297a:	e019      	b.n	80029b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_DMA_Init+0x16c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f003 031c 	and.w	r3, r3, #28
 8002988:	210f      	movs	r1, #15
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	4917      	ldr	r1, [pc, #92]	; (80029f0 <HAL_DMA_Init+0x16c>)
 8002992:	4013      	ands	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_DMA_Init+0x16c>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f003 031c 	and.w	r3, r3, #28
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	4911      	ldr	r1, [pc, #68]	; (80029f0 <HAL_DMA_Init+0x16c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40020407 	.word	0x40020407
 80029d8:	bffdfff8 	.word	0xbffdfff8
 80029dc:	cccccccd 	.word	0xcccccccd
 80029e0:	40020000 	.word	0x40020000
 80029e4:	bffdfbf8 	.word	0xbffdfbf8
 80029e8:	40020400 	.word	0x40020400
 80029ec:	400200a8 	.word	0x400200a8
 80029f0:	400204a8 	.word	0x400204a8

080029f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e072      	b.n	8002aec <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_DMA_DeInit+0x104>)
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d80f      	bhi.n	8002a42 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_DMA_DeInit+0x108>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_DMA_DeInit+0x10c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a31      	ldr	r2, [pc, #196]	; (8002b04 <HAL_DMA_DeInit+0x110>)
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a40:	e00e      	b.n	8002a60 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_DMA_DeInit+0x114>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <HAL_DMA_DeInit+0x10c>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_DMA_DeInit+0x118>)
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	f003 021c 	and.w	r2, r3, #28
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_DMA_DeInit+0x110>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10d      	bne.n	8002aa2 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_DMA_DeInit+0x11c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 031c 	and.w	r3, r3, #28
 8002a92:	210f      	movs	r1, #15
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	491d      	ldr	r1, [pc, #116]	; (8002b10 <HAL_DMA_DeInit+0x11c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e00c      	b.n	8002abc <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_DMA_DeInit+0x120>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f003 031c 	and.w	r3, r3, #28
 8002aae:	210f      	movs	r1, #15
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	4917      	ldr	r1, [pc, #92]	; (8002b14 <HAL_DMA_DeInit+0x120>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40020407 	.word	0x40020407
 8002afc:	bffdfff8 	.word	0xbffdfff8
 8002b00:	cccccccd 	.word	0xcccccccd
 8002b04:	40020000 	.word	0x40020000
 8002b08:	bffdfbf8 	.word	0xbffdfbf8
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	400200a8 	.word	0x400200a8
 8002b14:	400204a8 	.word	0x400204a8

08002b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Start_IT+0x20>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e04b      	b.n	8002bd0 <HAL_DMA_Start_IT+0xb8>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d13a      	bne.n	8002bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f95f 	bl	8002e34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 020e 	orr.w	r2, r2, #14
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e00f      	b.n	8002bb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 020a 	orr.w	r2, r2, #10
 8002bae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e005      	b.n	8002bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f003 021c 	and.w	r2, r3, #28
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d005      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e029      	b.n	8002ccc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 020e 	bic.w	r2, r2, #14
 8002c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f003 021c 	and.w	r2, r3, #28
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
    }
  }
  return status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f003 031c 	and.w	r3, r3, #28
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d026      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x7a>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d021      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0204 	bic.w	r2, r2, #4
 8002d28:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f003 021c 	and.w	r2, r3, #28
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2104      	movs	r1, #4
 8002d38:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d071      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d4e:	e06c      	b.n	8002e2a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f003 031c 	and.w	r3, r3, #28
 8002d58:	2202      	movs	r2, #2
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02e      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0xec>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d029      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020a 	bic.w	r2, r2, #10
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f003 021c 	and.w	r2, r3, #28
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2102      	movs	r1, #2
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d038      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dc0:	e033      	b.n	8002e2a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f003 031c 	and.w	r3, r3, #28
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02a      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x156>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d025      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 020e 	bic.w	r2, r2, #14
 8002dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 021c 	and.w	r2, r3, #28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
}
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	f003 021c 	and.w	r2, r3, #28
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d108      	bne.n	8002e78 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e76:	e007      	b.n	8002e88 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_FLASH_Program+0xd0>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_FLASH_Program+0x1e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e053      	b.n	8002f5a <HAL_FLASH_Program+0xc6>
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_FLASH_Program+0xd0>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ebc:	f000 f888 	bl	8002fd0 <FLASH_WaitForLastOperation>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d143      	bne.n	8002f52 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_FLASH_Program+0xd0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_FLASH_Program+0xd4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_FLASH_Program+0xd4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_FLASH_Program+0xd4>)
 8002ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_FLASH_Program+0xd0>)
 8002eea:	2202      	movs	r2, #2
 8002eec:	771a      	strb	r2, [r3, #28]
 8002eee:	e002      	b.n	8002ef6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_FLASH_Program+0xd0>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f00:	68b8      	ldr	r0, [r7, #8]
 8002f02:	f000 f8bd 	bl	8003080 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002f06:	2301      	movs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e010      	b.n	8002f2e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d002      	beq.n	8002f18 <HAL_FLASH_Program+0x84>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d10a      	bne.n	8002f2e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	f000 f8d5 	bl	80030cc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d102      	bne.n	8002f2e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002f28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f2c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f32:	f000 f84d 	bl	8002fd0 <FLASH_WaitForLastOperation>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_FLASH_Program+0xd4>)
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4907      	ldr	r1, [pc, #28]	; (8002f68 <HAL_FLASH_Program+0xd4>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002f4e:	f000 f9cf 	bl	80032f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_FLASH_Program+0xd0>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]

  return status;
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000000c 	.word	0x2000000c
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_FLASH_Unlock+0x38>)
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da0b      	bge.n	8002f96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_FLASH_Unlock+0x38>)
 8002f80:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_FLASH_Unlock+0x3c>)
 8002f82:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_FLASH_Unlock+0x38>)
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_FLASH_Unlock+0x40>)
 8002f88:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_FLASH_Unlock+0x38>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da01      	bge.n	8002f96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	45670123 	.word	0x45670123
 8002fac:	cdef89ab 	.word	0xcdef89ab

08002fb0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_FLASH_Lock+0x1c>)
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_FLASH_Lock+0x1c>)
 8002fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40022000 	.word	0x40022000

08002fd0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff f854 	bl	8002084 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002fde:	e00d      	b.n	8002ffc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d009      	beq.n	8002ffc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002fe8:	f7ff f84c 	bl	8002084 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d801      	bhi.n	8002ffc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e036      	b.n	800306a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1eb      	bne.n	8002fe0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <FLASH_WaitForLastOperation+0xa8>)
 800300e:	4013      	ands	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01e      	beq.n	8003056 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <FLASH_WaitForLastOperation+0xac>)
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	4a16      	ldr	r2, [pc, #88]	; (800307c <FLASH_WaitForLastOperation+0xac>)
 8003022:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <FLASH_WaitForLastOperation+0x6e>
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	618b      	str	r3, [r1, #24]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <FLASH_WaitForLastOperation+0x82>
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003050:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e009      	b.n	800306a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <FLASH_WaitForLastOperation+0xa4>)
 8003064:	2201      	movs	r2, #1
 8003066:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	0002c3fa 	.word	0x0002c3fa
 800307c:	2000000c 	.word	0x2000000c

08003080 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <FLASH_Program_DoubleWord+0x48>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <FLASH_Program_DoubleWord+0x48>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800309e:	f3bf 8f6f 	isb	sy
}
 80030a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80030a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	000a      	movs	r2, r1
 80030b2:	2300      	movs	r3, #0
 80030b4:	68f9      	ldr	r1, [r7, #12]
 80030b6:	3104      	adds	r1, #4
 80030b8:	4613      	mov	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40022000 	.word	0x40022000

080030cc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80030d6:	2340      	movs	r3, #64	; 0x40
 80030d8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <FLASH_Program_Fast+0x68>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <FLASH_Program_Fast+0x68>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ee:	f3ef 8310 	mrs	r3, PRIMASK
 80030f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80030f4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80030f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	3304      	adds	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	3304      	adds	r3, #4
 800310e:	617b      	str	r3, [r7, #20]
    row_index--;
 8003110:	7ffb      	ldrb	r3, [r7, #31]
 8003112:	3b01      	subs	r3, #1
 8003114:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ef      	bne.n	80030fc <FLASH_Program_Fast+0x30>
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003128:	bf00      	nop
 800312a:	3724      	adds	r7, #36	; 0x24
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40022000 	.word	0x40022000

08003138 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003142:	4b48      	ldr	r3, [pc, #288]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_FLASHEx_Erase+0x16>
 800314a:	2302      	movs	r3, #2
 800314c:	e085      	b.n	800325a <HAL_FLASHEx_Erase+0x122>
 800314e:	4b45      	ldr	r3, [pc, #276]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003154:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003158:	f7ff ff3a 	bl	8002fd0 <FLASH_WaitForLastOperation>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d175      	bne.n	8003252 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003166:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 8003168:	2200      	movs	r2, #0
 800316a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003178:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a37      	ldr	r2, [pc, #220]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 800318a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003190:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 8003192:	2203      	movs	r2, #3
 8003194:	771a      	strb	r2, [r3, #28]
 8003196:	e016      	b.n	80031c6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 800319a:	2201      	movs	r2, #1
 800319c:	771a      	strb	r2, [r3, #28]
 800319e:	e012      	b.n	80031c6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 80031b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 80031ba:	2202      	movs	r2, #2
 80031bc:	771a      	strb	r2, [r3, #28]
 80031be:	e002      	b.n	80031c6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80031c0:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d111      	bne.n	80031f2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f84a 	bl	800326c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031dc:	f7ff fef8 	bl	8002fd0 <FLASH_WaitForLastOperation>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 80031ea:	f023 0304 	bic.w	r3, r3, #4
 80031ee:	6153      	str	r3, [r2, #20]
 80031f0:	e02d      	b.n	800324e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	e01d      	b.n	800323e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4619      	mov	r1, r3
 8003208:	68b8      	ldr	r0, [r7, #8]
 800320a:	f000 f84d 	bl	80032a8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800320e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003212:	f7ff fedd 	bl	8002fd0 <FLASH_WaitForLastOperation>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_FLASHEx_Erase+0x130>)
 8003220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	601a      	str	r2, [r3, #0]
          break;
 8003236:	e00a      	b.n	800324e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	3301      	adds	r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4413      	add	r3, r2
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d3d9      	bcc.n	8003202 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800324e:	f000 f84f 	bl	80032f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_FLASHEx_Erase+0x12c>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000000c 	.word	0x2000000c
 8003268:	40022000 	.word	0x40022000

0800326c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <FLASH_MassErase+0x38>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <FLASH_MassErase+0x38>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <FLASH_MassErase+0x38>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <FLASH_MassErase+0x38>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6153      	str	r3, [r2, #20]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000

080032a8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <FLASH_PageErase+0x44>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <FLASH_PageErase+0x44>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <FLASH_PageErase+0x44>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <FLASH_PageErase+0x44>)
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <FLASH_PageErase+0x44>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <FLASH_PageErase+0x44>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	6153      	str	r3, [r2, #20]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40022000 	.word	0x40022000

080032f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <FLASH_FlushCaches+0x8c>)
 80032f8:	7f1b      	ldrb	r3, [r3, #28]
 80032fa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d002      	beq.n	8003308 <FLASH_FlushCaches+0x18>
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d117      	bne.n	8003338 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <FLASH_FlushCaches+0x90>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <FLASH_FlushCaches+0x90>)
 800330e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003312:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003314:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <FLASH_FlushCaches+0x90>)
 800331a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800332a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <FLASH_FlushCaches+0x90>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003336:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d002      	beq.n	8003344 <FLASH_FlushCaches+0x54>
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d111      	bne.n	8003368 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <FLASH_FlushCaches+0x90>)
 800334a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800335a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <FLASH_FlushCaches+0x90>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a07      	ldr	r2, [pc, #28]	; (8003380 <FLASH_FlushCaches+0x90>)
 8003362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003366:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <FLASH_FlushCaches+0x8c>)
 800336a:	2200      	movs	r2, #0
 800336c:	771a      	strb	r2, [r3, #28]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	2000000c 	.word	0x2000000c
 8003380:	40022000 	.word	0x40022000

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	e154      	b.n	800363e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8146 	beq.w	8003638 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d005      	beq.n	80033c4 <HAL_GPIO_Init+0x40>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d130      	bne.n	8003426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033fa:	2201      	movs	r2, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0201 	and.w	r2, r3, #1
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b03      	cmp	r3, #3
 8003430:	d017      	beq.n	8003462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d123      	bne.n	80034b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	6939      	ldr	r1, [r7, #16]
 80034b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0203 	and.w	r2, r3, #3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a0 	beq.w	8003638 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f8:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_GPIO_Init+0x2d8>)
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	4a57      	ldr	r2, [pc, #348]	; (800365c <HAL_GPIO_Init+0x2d8>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6613      	str	r3, [r2, #96]	; 0x60
 8003504:	4b55      	ldr	r3, [pc, #340]	; (800365c <HAL_GPIO_Init+0x2d8>)
 8003506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003510:	4a53      	ldr	r2, [pc, #332]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800353a:	d019      	beq.n	8003570 <HAL_GPIO_Init+0x1ec>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a49      	ldr	r2, [pc, #292]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_GPIO_Init+0x1e8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a48      	ldr	r2, [pc, #288]	; (8003668 <HAL_GPIO_Init+0x2e4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00d      	beq.n	8003568 <HAL_GPIO_Init+0x1e4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a47      	ldr	r2, [pc, #284]	; (800366c <HAL_GPIO_Init+0x2e8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <HAL_GPIO_Init+0x1e0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a46      	ldr	r2, [pc, #280]	; (8003670 <HAL_GPIO_Init+0x2ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_GPIO_Init+0x1dc>
 800355c:	2304      	movs	r3, #4
 800355e:	e008      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003560:	2307      	movs	r3, #7
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003564:	2303      	movs	r3, #3
 8003566:	e004      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003568:	2302      	movs	r3, #2
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003570:	2300      	movs	r3, #0
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f002 0203 	and.w	r2, r2, #3
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	4093      	lsls	r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003582:	4937      	ldr	r1, [pc, #220]	; (8003660 <HAL_GPIO_Init+0x2dc>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003590:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43db      	mvns	r3, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b4:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ba:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035de:	4a25      	ldr	r2, [pc, #148]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003608:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	f47f aea3 	bne.w	8003394 <HAL_GPIO_Init+0x10>
  }
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40021000 	.word	0x40021000
 8003660:	40010000 	.word	0x40010000
 8003664:	48000400 	.word	0x48000400
 8003668:	48000800 	.word	0x48000800
 800366c:	48000c00 	.word	0x48000c00
 8003670:	48001000 	.word	0x48001000
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003686:	e0b7      	b.n	80037f8 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003688:	2201      	movs	r2, #1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80aa 	beq.w	80037f2 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800369e:	4a5d      	ldr	r2, [pc, #372]	; (8003814 <HAL_GPIO_DeInit+0x19c>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036c6:	d019      	beq.n	80036fc <HAL_GPIO_DeInit+0x84>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a53      	ldr	r2, [pc, #332]	; (8003818 <HAL_GPIO_DeInit+0x1a0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_GPIO_DeInit+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a52      	ldr	r2, [pc, #328]	; (800381c <HAL_GPIO_DeInit+0x1a4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_DeInit+0x7c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_GPIO_DeInit+0x1a8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_DeInit+0x78>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_GPIO_DeInit+0x1ac>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_DeInit+0x74>
 80036e8:	2304      	movs	r3, #4
 80036ea:	e008      	b.n	80036fe <HAL_GPIO_DeInit+0x86>
 80036ec:	2307      	movs	r3, #7
 80036ee:	e006      	b.n	80036fe <HAL_GPIO_DeInit+0x86>
 80036f0:	2303      	movs	r3, #3
 80036f2:	e004      	b.n	80036fe <HAL_GPIO_DeInit+0x86>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_DeInit+0x86>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_GPIO_DeInit+0x86>
 80036fc:	2300      	movs	r3, #0
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	f002 0203 	and.w	r2, r2, #3
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	4093      	lsls	r3, r2
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	429a      	cmp	r2, r3
 800370c:	d132      	bne.n	8003774 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800370e:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	4944      	ldr	r1, [pc, #272]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 8003718:	4013      	ands	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	4940      	ldr	r1, [pc, #256]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 8003726:	4013      	ands	r3, r2
 8003728:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800372a:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	493d      	ldr	r1, [pc, #244]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 8003734:	4013      	ands	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	4939      	ldr	r1, [pc, #228]	; (8003828 <HAL_GPIO_DeInit+0x1b0>)
 8003742:	4013      	ands	r3, r2
 8003744:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003756:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <HAL_GPIO_DeInit+0x19c>)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43da      	mvns	r2, r3
 8003766:	482b      	ldr	r0, [pc, #172]	; (8003814 <HAL_GPIO_DeInit+0x19c>)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	400a      	ands	r2, r1
 800376e:	3302      	adds	r3, #2
 8003770:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	2103      	movs	r1, #3
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	08da      	lsrs	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3208      	adds	r2, #8
 8003790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	08d2      	lsrs	r2, r2, #3
 80037a8:	4019      	ands	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2103      	movs	r1, #3
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	401a      	ands	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	2101      	movs	r1, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	401a      	ands	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2103      	movs	r1, #3
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	401a      	ands	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3301      	adds	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	f47f af41 	bne.w	8003688 <HAL_GPIO_DeInit+0x10>
  }
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40010000 	.word	0x40010000
 8003818:	48000400 	.word	0x48000400
 800381c:	48000800 	.word	0x48000800
 8003820:	48000c00 	.word	0x48000c00
 8003824:	48001000 	.word	0x48001000
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	e001      	b.n	800384e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003878:	e002      	b.n	8003880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4013      	ands	r3, r2
 80038a4:	041a      	lsls	r2, r3, #16
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43d9      	mvns	r1, r3
 80038aa:	887b      	ldrh	r3, [r7, #2]
 80038ac:	400b      	ands	r3, r1
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b08b      	sub	sp, #44	; 0x2c
 80038c4:	af06      	add	r7, sp, #24
 80038c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e109      	b.n	8003ae6 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f009 fa98 	bl	800ce1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2203      	movs	r2, #3
 80038f0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f005 f851 	bl	80089a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	687e      	ldr	r6, [r7, #4]
 8003906:	466d      	mov	r5, sp
 8003908:	f106 0410 	add.w	r4, r6, #16
 800390c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800390e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003914:	e885 0003 	stmia.w	r5, {r0, r1}
 8003918:	1d33      	adds	r3, r6, #4
 800391a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800391c:	6838      	ldr	r0, [r7, #0]
 800391e:	f005 f817 	bl	8008950 <USB_CoreInit>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d8      	b.n	8003ae6 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f005 f84b 	bl	80089d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e04d      	b.n	80039e2 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	3305      	adds	r3, #5
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	440b      	add	r3, r1
 800396c:	3304      	adds	r3, #4
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	b298      	uxth	r0, r3
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	440b      	add	r3, r1
 8003984:	333a      	adds	r3, #58	; 0x3a
 8003986:	4602      	mov	r2, r0
 8003988:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3307      	adds	r3, #7
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	333c      	adds	r3, #60	; 0x3c
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	3340      	adds	r3, #64	; 0x40
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	3344      	adds	r3, #68	; 0x44
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3301      	adds	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3ac      	bcc.n	8003946 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e044      	b.n	8003a7c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	440b      	add	r3, r1
 8003a42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3b5      	bcc.n	80039f2 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	687e      	ldr	r6, [r7, #4]
 8003a8e:	466d      	mov	r5, sp
 8003a90:	f106 0410 	add.w	r4, r6, #16
 8003a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aa0:	1d33      	adds	r3, r6, #4
 8003aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	f004 ffa3 	bl	80089f0 <USB_DevInit>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e014      	b.n	8003ae6 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f001 fc8f 	bl	80053f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f007 f9a0 	bl	800ae24 <USB_DevDisconnect>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aee <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e015      	b.n	8003b2c <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f007 f947 	bl	800ada0 <USB_StopDevice>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f009 f9e3 	bl	800cee8 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_PCD_Start+0x16>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e012      	b.n	8003b70 <HAL_PCD_Start+0x3c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 ff0b 	bl	8008972 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f007 f948 	bl	800adf6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_PCD_Stop+0x16>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e012      	b.n	8003bb4 <HAL_PCD_Stop+0x3c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_DISABLE(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f004 ff00 	bl	80089a0 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f007 f93d 	bl	800ae24 <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f007 f940 	bl	800ae4e <USB_ReadInterrupts>
 8003bce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fb3e 	bl	800425c <PCD_EP_ISR_Handler>

    return;
 8003be0:	e110      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f009 f9e4 	bl	800cfd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8fc 	bl	8003e0a <HAL_PCD_SetAddress>

    return;
 8003c12:	e0f7      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c30:	b292      	uxth	r2, r2
 8003c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c36:	e0e5      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c54:	b292      	uxth	r2, r2
 8003c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c5a:	e0d3      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d034      	beq.n	8003cd0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0204 	bic.w	r2, r2, #4
 8003c78:	b292      	uxth	r2, r2
 8003c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	b292      	uxth	r2, r2
 8003c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f001 fbce 	bl	800544c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f009 f9c7 	bl	800d044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003cce:	e099      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d027      	beq.n	8003d2a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0208 	orr.w	r2, r2, #8
 8003cec:	b292      	uxth	r2, r2
 8003cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	b292      	uxth	r2, r2
 8003d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0204 	orr.w	r2, r2, #4
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f009 f974 	bl	800d010 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d28:	e06c      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d040      	beq.n	8003db6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d46:	b292      	uxth	r2, r2
 8003d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d12b      	bne.n	8003dae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0204 	orr.w	r2, r2, #4
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0208 	orr.w	r2, r2, #8
 8003d80:	b292      	uxth	r2, r2
 8003d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003da4:	2101      	movs	r1, #1
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 fb50 	bl	800544c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003dac:	e02a      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f009 f92e 	bl	800d010 <HAL_PCD_SuspendCallback>
    return;
 8003db4:	e026      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00f      	beq.n	8003de0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f009 f8ec 	bl	800cfb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003dde:	e011      	b.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e02:	bf00      	nop
  }
}
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_PCD_SetAddress+0x1a>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e013      	b.n	8003e4c <HAL_PCD_SetAddress+0x42>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f006 ffc6 	bl	800adce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	4611      	mov	r1, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	70fb      	strb	r3, [r7, #3]
 8003e66:	460b      	mov	r3, r1
 8003e68:	803b      	strh	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	da0f      	bge.n	8003e9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3304      	adds	r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	705a      	strb	r2, [r3, #1]
 8003e98:	e00f      	b.n	8003eba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 0207 	and.w	r2, r3, #7
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ec6:	883a      	ldrh	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	78ba      	ldrb	r2, [r7, #2]
 8003ed0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ee4:	78bb      	ldrb	r3, [r7, #2]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d102      	bne.n	8003ef0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_PCD_EP_Open+0xaa>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e00e      	b.n	8003f1c <HAL_PCD_EP_Open+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fd91 	bl	8008a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	da0f      	bge.n	8003f58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	705a      	strb	r2, [r3, #1]
 8003f56:	e00f      	b.n	8003f78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_PCD_EP_Close+0x6e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e00e      	b.n	8003fb0 <HAL_PCD_EP_Close+0x8c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f005 f8db 	bl	800915c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc8:	7afb      	ldrb	r3, [r7, #11]
 8003fca:	f003 0207 	and.w	r2, r3, #7
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3304      	adds	r3, #4
 8003fe0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	b2da      	uxtb	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6979      	ldr	r1, [r7, #20]
 8004016:	4618      	mov	r0, r3
 8004018:	f005 fa8d 	bl	8009536 <USB_EPStartXfer>
 800401c:	e005      	b.n	800402a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6979      	ldr	r1, [r7, #20]
 8004024:	4618      	mov	r0, r3
 8004026:	f005 fa86 	bl	8009536 <USB_EPStartXfer>
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	f003 0207 	and.w	r2, r3, #7
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	440b      	add	r3, r1
 8004052:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	7afb      	ldrb	r3, [r7, #11]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2201      	movs	r2, #1
 80040b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6979      	ldr	r1, [r7, #20]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f005 fa31 	bl	8009536 <USB_EPStartXfer>
 80040d4:	e005      	b.n	80040e2 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6979      	ldr	r1, [r7, #20]
 80040dc:	4618      	mov	r0, r3
 80040de:	f005 fa2a 	bl	8009536 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 0207 	and.w	r2, r3, #7
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d901      	bls.n	800410a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e04e      	b.n	80041a8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800410a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410e:	2b00      	cmp	r3, #0
 8004110:	da0f      	bge.n	8004132 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	705a      	strb	r2, [r3, #1]
 8004130:	e00d      	b.n	800414e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	3304      	adds	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_PCD_EP_SetStall+0x82>
 800416a:	2302      	movs	r3, #2
 800416c:	e01c      	b.n	80041a8 <HAL_PCD_EP_SetStall+0xbc>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	4618      	mov	r0, r3
 800417e:	f006 fd10 	bl	800aba2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f006 fe68 	bl	800ae6e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d901      	bls.n	80041ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e042      	b.n	8004254 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da0f      	bge.n	80041f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	3304      	adds	r3, #4
 80041ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	705a      	strb	r2, [r3, #1]
 80041f4:	e00f      	b.n	8004216 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	f003 0207 	and.w	r2, r3, #7
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	3304      	adds	r3, #4
 800420e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_PCD_EP_ClrStall+0x86>
 8004232:	2302      	movs	r3, #2
 8004234:	e00e      	b.n	8004254 <HAL_PCD_EP_ClrStall+0xa4>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	4618      	mov	r0, r3
 8004246:	f006 fcfd 	bl	800ac44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b096      	sub	sp, #88	; 0x58
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004264:	e39e      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
  {
    wIstr = hpcd->Instance->ISTR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800426e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004272:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004280:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 815e 	bne.w	8004546 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800428a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	d150      	bne.n	8004338 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	81fb      	strh	r3, [r7, #14]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	89fb      	ldrh	r3, [r7, #14]
 80042ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	332c      	adds	r3, #44	; 0x2c
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	441a      	add	r2, r3
 80042f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80042f6:	2100      	movs	r1, #0
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f008 fe42 	bl	800cf82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 834c 	beq.w	80049a4 <PCD_EP_ISR_Handler+0x748>
 800430c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 8347 	bne.w	80049a4 <PCD_EP_ISR_Handler+0x748>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004322:	b2da      	uxtb	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b292      	uxth	r2, r2
 800432a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004336:	e335      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800434a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800434e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004352:	2b00      	cmp	r3, #0
 8004354:	d032      	beq.n	80043bc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	4413      	add	r3, r2
 8004370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004390:	b29b      	uxth	r3, r3
 8004392:	f006 fdba 	bl	800af0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29a      	uxth	r2, r3
 800439e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043a2:	4013      	ands	r3, r2
 80043a4:	823b      	strh	r3, [r7, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	8a3a      	ldrh	r2, [r7, #16]
 80043ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043b0:	b292      	uxth	r2, r2
 80043b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f008 fdb7 	bl	800cf28 <HAL_PCD_SetupStageCallback>
 80043ba:	e2f3      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043bc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f280 82ef 	bge.w	80049a4 <PCD_EP_ISR_Handler+0x748>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043d2:	4013      	ands	r3, r2
 80043d4:	83fb      	strh	r3, [r7, #30]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	8bfa      	ldrh	r2, [r7, #30]
 80043dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043e0:	b292      	uxth	r2, r2
 80043e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800440c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d019      	beq.n	8004448 <PCD_EP_ISR_Handler+0x1ec>
 8004414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004422:	6959      	ldr	r1, [r3, #20]
 8004424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004426:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800442c:	b29b      	uxth	r3, r3
 800442e:	f006 fd6c 	bl	800af0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	441a      	add	r2, r3
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004440:	2100      	movs	r1, #0
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f008 fd82 	bl	800cf4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 82a5 	bne.w	80049a4 <PCD_EP_ISR_Handler+0x748>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004468:	b29b      	uxth	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b3e      	cmp	r3, #62	; 0x3e
 8004480:	d918      	bls.n	80044b4 <PCD_EP_ISR_Handler+0x258>
 8004482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	647b      	str	r3, [r7, #68]	; 0x44
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <PCD_EP_ISR_Handler+0x240>
 8004496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004498:	3b01      	subs	r3, #1
 800449a:	647b      	str	r3, [r7, #68]	; 0x44
 800449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449e:	b29b      	uxth	r3, r3
 80044a0:	029b      	lsls	r3, r3, #10
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e029      	b.n	8004508 <PCD_EP_ISR_Handler+0x2ac>
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d112      	bne.n	80044e2 <PCD_EP_ISR_Handler+0x286>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044da:	b29a      	uxth	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e012      	b.n	8004508 <PCD_EP_ISR_Handler+0x2ac>
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <PCD_EP_ISR_Handler+0x2a0>
 80044f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f8:	3301      	adds	r3, #1
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
 80044fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fe:	b29b      	uxth	r3, r3
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	b29a      	uxth	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004518:	827b      	strh	r3, [r7, #18]
 800451a:	8a7b      	ldrh	r3, [r7, #18]
 800451c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004520:	827b      	strh	r3, [r7, #18]
 8004522:	8a7b      	ldrh	r3, [r7, #18]
 8004524:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004528:	827b      	strh	r3, [r7, #18]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	8a7b      	ldrh	r3, [r7, #18]
 8004530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	b29b      	uxth	r3, r3
 8004542:	8013      	strh	r3, [r2, #0]
 8004544:	e22e      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800455a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800455e:	2b00      	cmp	r3, #0
 8004560:	f280 80f7 	bge.w	8004752 <PCD_EP_ISR_Handler+0x4f6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29a      	uxth	r2, r3
 8004576:	f640 738f 	movw	r3, #3983	; 0xf8f
 800457a:	4013      	ands	r3, r2
 800457c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004596:	b292      	uxth	r2, r2
 8004598:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800459a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	3304      	adds	r3, #4
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	7b1b      	ldrb	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d123      	bne.n	8004602 <PCD_EP_ISR_Handler+0x3a6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80045e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 808e 	beq.w	8004708 <PCD_EP_ISR_Handler+0x4ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f2:	6959      	ldr	r1, [r3, #20]
 80045f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f6:	88da      	ldrh	r2, [r3, #6]
 80045f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045fc:	f006 fc85 	bl	800af0a <USB_ReadPMA>
 8004600:	e082      	b.n	8004708 <PCD_EP_ISR_Handler+0x4ac>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	78db      	ldrb	r3, [r3, #3]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d10a      	bne.n	8004620 <PCD_EP_ISR_Handler+0x3c4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800460a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800460e:	461a      	mov	r2, r3
 8004610:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9d4 	bl	80049c0 <HAL_PCD_EP_DB_Receive>
 8004618:	4603      	mov	r3, r0
 800461a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800461e:	e073      	b.n	8004708 <PCD_EP_ISR_Handler+0x4ac>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	441a      	add	r2, r3
 800464c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d022      	beq.n	80046c4 <PCD_EP_ISR_Handler+0x468>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4413      	add	r3, r2
 8004698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80046a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02c      	beq.n	8004708 <PCD_EP_ISR_Handler+0x4ac>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	6959      	ldr	r1, [r3, #20]
 80046b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b8:	891a      	ldrh	r2, [r3, #8]
 80046ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046be:	f006 fc24 	bl	800af0a <USB_ReadPMA>
 80046c2:	e021      	b.n	8004708 <PCD_EP_ISR_Handler+0x4ac>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80046ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <PCD_EP_ISR_Handler+0x4ac>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	6959      	ldr	r1, [r3, #20]
 80046fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fe:	895a      	ldrh	r2, [r3, #10]
 8004700:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004704:	f006 fc01 	bl	800af0a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004710:	441a      	add	r2, r3
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800471e:	441a      	add	r2, r3
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <PCD_EP_ISR_Handler+0x4dc>
 800472c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	429a      	cmp	r2, r3
 8004736:	d206      	bcs.n	8004746 <PCD_EP_ISR_Handler+0x4ea>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f008 fc04 	bl	800cf4c <HAL_PCD_DataOutStageCallback>
 8004744:	e005      	b.n	8004752 <PCD_EP_ISR_Handler+0x4f6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800474c:	4618      	mov	r0, r3
 800474e:	f004 fef2 	bl	8009536 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004752:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8122 	beq.w	80049a4 <PCD_EP_ISR_Handler+0x748>
      {
        ep = &hpcd->IN_ep[epindex];
 8004760:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	3304      	adds	r3, #4
 8004774:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80047b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b4:	78db      	ldrb	r3, [r3, #3]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	f000 80a2 	beq.w	8004900 <PCD_EP_ISR_Handler+0x6a4>
        {
          ep->xfer_len = 0U;
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	2200      	movs	r2, #0
 80047c0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	7b1b      	ldrb	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8093 	beq.w	80048f2 <PCD_EP_ISR_Handler+0x696>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d046      	beq.n	8004866 <PCD_EP_ISR_Handler+0x60a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d126      	bne.n	800482e <PCD_EP_ISR_Handler+0x5d2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	4413      	add	r3, r2
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	00da      	lsls	r2, r3, #3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	4413      	add	r3, r2
 8004802:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004812:	b29a      	uxth	r2, r3
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004826:	b29a      	uxth	r2, r3
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	e061      	b.n	80048f2 <PCD_EP_ISR_Handler+0x696>
 800482e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d15d      	bne.n	80048f2 <PCD_EP_ISR_Handler+0x696>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	4413      	add	r3, r2
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	4413      	add	r3, r2
 8004858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	2200      	movs	r2, #0
 8004862:	801a      	strh	r2, [r3, #0]
 8004864:	e045      	b.n	80048f2 <PCD_EP_ISR_Handler+0x696>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d126      	bne.n	80048c2 <PCD_EP_ISR_Handler+0x666>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	4413      	add	r3, r2
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	00da      	lsls	r2, r3, #3
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	4413      	add	r3, r2
 8004896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e017      	b.n	80048f2 <PCD_EP_ISR_Handler+0x696>
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d113      	bne.n	80048f2 <PCD_EP_ISR_Handler+0x696>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	4413      	add	r3, r2
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	00da      	lsls	r2, r3, #3
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	2200      	movs	r2, #0
 80048f0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f008 fb42 	bl	800cf82 <HAL_PCD_DataInStageCallback>
 80048fe:	e051      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004900:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d144      	bne.n	8004996 <PCD_EP_ISR_Handler+0x73a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	4413      	add	r3, r2
 8004926:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004930:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800493c:	429a      	cmp	r2, r3
 800493e:	d907      	bls.n	8004950 <PCD_EP_ISR_Handler+0x6f4>
            {
              ep->xfer_len -= TxPctSize;
 8004940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004948:	1ad2      	subs	r2, r2, r3
 800494a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494c:	619a      	str	r2, [r3, #24]
 800494e:	e002      	b.n	8004956 <PCD_EP_ISR_Handler+0x6fa>
            }
            else
            {
              ep->xfer_len = 0U;
 8004950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004952:	2200      	movs	r2, #0
 8004954:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <PCD_EP_ISR_Handler+0x710>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f008 fb0c 	bl	800cf82 <HAL_PCD_DataInStageCallback>
 800496a:	e01b      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004974:	441a      	add	r2, r3
 8004976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004978:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004982:	441a      	add	r2, r3
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800498e:	4618      	mov	r0, r3
 8004990:	f004 fdd1 	bl	8009536 <USB_EPStartXfer>
 8004994:	e006      	b.n	80049a4 <PCD_EP_ISR_Handler+0x748>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004996:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800499a:	461a      	mov	r2, r3
 800499c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f917 	bl	8004bd2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	b21b      	sxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f6ff ac58 	blt.w	8004266 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3758      	adds	r7, #88	; 0x58
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d07c      	beq.n	8004ad2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	8b7b      	ldrh	r3, [r7, #26]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d306      	bcc.n	8004a16 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	8b7b      	ldrh	r3, [r7, #26]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	619a      	str	r2, [r3, #24]
 8004a14:	e002      	b.n	8004a1c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d123      	bne.n	8004a6c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	833b      	strh	r3, [r7, #24]
 8004a40:	8b3b      	ldrh	r3, [r7, #24]
 8004a42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a46:	833b      	strh	r3, [r7, #24]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	8b3b      	ldrh	r3, [r7, #24]
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01f      	beq.n	8004ab6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	82fb      	strh	r3, [r7, #22]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8afb      	ldrh	r3, [r7, #22]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ab6:	8b7b      	ldrh	r3, [r7, #26]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8085 	beq.w	8004bc8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6959      	ldr	r1, [r3, #20]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	891a      	ldrh	r2, [r3, #8]
 8004aca:	8b7b      	ldrh	r3, [r7, #26]
 8004acc:	f006 fa1d 	bl	800af0a <USB_ReadPMA>
 8004ad0:	e07a      	b.n	8004bc8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	4413      	add	r3, r2
 8004aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	8b7b      	ldrh	r3, [r7, #26]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d306      	bcc.n	8004b10 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	8b7b      	ldrh	r3, [r7, #26]
 8004b08:	1ad2      	subs	r2, r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	619a      	str	r2, [r3, #24]
 8004b0e:	e002      	b.n	8004b16 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d123      	bne.n	8004b66 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	83fb      	strh	r3, [r7, #30]
 8004b3a:	8bfb      	ldrh	r3, [r7, #30]
 8004b3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b40:	83fb      	strh	r3, [r7, #30]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	8bfb      	ldrh	r3, [r7, #30]
 8004b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11f      	bne.n	8004bb0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8a:	83bb      	strh	r3, [r7, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8bbb      	ldrh	r3, [r7, #28]
 8004b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bb0:	8b7b      	ldrh	r3, [r7, #26]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	895a      	ldrh	r2, [r3, #10]
 8004bc2:	8b7b      	ldrh	r3, [r7, #26]
 8004bc4:	f006 f9a1 	bl	800af0a <USB_ReadPMA>
    }
  }

  return count;
 8004bc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b0a2      	sub	sp, #136	; 0x88
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 81c5 	beq.w	8004f76 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d907      	bls.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	e002      	b.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 80b9 	bne.w	8004db2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d126      	bne.n	8004c96 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	4413      	add	r3, r2
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	00da      	lsls	r2, r3, #3
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	e01a      	b.n	8004ccc <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d116      	bne.n	8004ccc <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	4413      	add	r3, r2
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	00da      	lsls	r2, r3, #3
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2200      	movs	r2, #0
 8004cca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d126      	bne.n	8004d28 <HAL_PCD_EP_DB_Transmit+0x156>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	e017      	b.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d113      	bne.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	4413      	add	r3, r2
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	00da      	lsls	r2, r3, #3
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2200      	movs	r2, #0
 8004d56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f008 f90f 	bl	800cf82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 82d2 	beq.w	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	827b      	strh	r3, [r7, #18]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	8a7b      	ldrh	r3, [r7, #18]
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
 8004db0:	e2b0      	b.n	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d021      	beq.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	f040 8284 	bne.w	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e14:	441a      	add	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e22:	441a      	add	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d309      	bcc.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	1ad2      	subs	r2, r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	621a      	str	r2, [r3, #32]
 8004e46:	e015      	b.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e5e:	e009      	b.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2200      	movs	r2, #0
 8004e72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d155      	bne.n	8004f28 <HAL_PCD_EP_DB_Transmit+0x356>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	4413      	add	r3, r2
 8004e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	00da      	lsls	r2, r3, #3
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea8:	d916      	bls.n	8004ed8 <HAL_PCD_EP_DB_Transmit+0x306>
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e043      	b.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d112      	bne.n	8004f04 <HAL_PCD_EP_DB_Transmit+0x332>
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e02d      	b.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_PCD_EP_DB_Transmit+0x348>
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	3301      	adds	r3, #1
 8004f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	e01b      	b.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d117      	bne.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	643b      	str	r3, [r7, #64]	; 0x40
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	4413      	add	r3, r2
 8004f46:	643b      	str	r3, [r7, #64]	; 0x40
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	00da      	lsls	r2, r3, #3
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f50:	4413      	add	r3, r2
 8004f52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6959      	ldr	r1, [r3, #20]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	891a      	ldrh	r2, [r3, #8]
 8004f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f005 ff89 	bl	800ae86 <USB_WritePMA>
 8004f74:	e1ce      	b.n	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d307      	bcc.n	8004fba <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	619a      	str	r2, [r3, #24]
 8004fb8:	e002      	b.n	8004fc0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 80c4 	bne.w	8005152 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d126      	bne.n	8005020 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe6:	4413      	add	r3, r2
 8004fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	00da      	lsls	r2, r3, #3
 8004ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005004:	b29a      	uxth	r2, r3
 8005006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005018:	b29a      	uxth	r2, r3
 800501a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e01a      	b.n	8005056 <HAL_PCD_EP_DB_Transmit+0x484>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d116      	bne.n	8005056 <HAL_PCD_EP_DB_Transmit+0x484>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	673b      	str	r3, [r7, #112]	; 0x70
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800503c:	4413      	add	r3, r2
 800503e:	673b      	str	r3, [r7, #112]	; 0x70
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	00da      	lsls	r2, r3, #3
 8005046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005048:	4413      	add	r3, r2
 800504a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800504e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	2200      	movs	r2, #0
 8005054:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d12f      	bne.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800507c:	4413      	add	r3, r2
 800507e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	00da      	lsls	r2, r3, #3
 8005088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800508c:	4413      	add	r3, r2
 800508e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e017      	b.n	80050f4 <HAL_PCD_EP_DB_Transmit+0x522>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d113      	bne.n	80050f4 <HAL_PCD_EP_DB_Transmit+0x522>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050da:	4413      	add	r3, r2
 80050dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	00da      	lsls	r2, r3, #3
 80050e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80050ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050f0:	2200      	movs	r2, #0
 80050f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f007 ff41 	bl	800cf82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 8104 	bne.w	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
 8005150:	e0e0      	b.n	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d121      	bne.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800518c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f040 80b4 	bne.w	8005314 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051b4:	441a      	add	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051c2:	441a      	add	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d309      	bcc.n	80051e8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	1ad2      	subs	r2, r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	621a      	str	r2, [r3, #32]
 80051e6:	e015      	b.n	8005214 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80051f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051fe:	e009      	b.n	8005214 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2200      	movs	r2, #0
 800520a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	663b      	str	r3, [r7, #96]	; 0x60
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d155      	bne.n	80052ce <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	65bb      	str	r3, [r7, #88]	; 0x58
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005236:	4413      	add	r3, r2
 8005238:	65bb      	str	r3, [r7, #88]	; 0x58
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	00da      	lsls	r2, r3, #3
 8005240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005242:	4413      	add	r3, r2
 8005244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005248:	657b      	str	r3, [r7, #84]	; 0x54
 800524a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524c:	2b3e      	cmp	r3, #62	; 0x3e
 800524e:	d916      	bls.n	800527e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	677b      	str	r3, [r7, #116]	; 0x74
 8005256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <HAL_PCD_EP_DB_Transmit+0x694>
 8005260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005262:	3b01      	subs	r3, #1
 8005264:	677b      	str	r3, [r7, #116]	; 0x74
 8005266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005268:	b29b      	uxth	r3, r3
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29a      	uxth	r2, r3
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e040      	b.n	8005300 <HAL_PCD_EP_DB_Transmit+0x72e>
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d112      	bne.n	80052aa <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528e:	b29a      	uxth	r2, r3
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e02a      	b.n	8005300 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ac:	085b      	lsrs	r3, r3, #1
 80052ae:	677b      	str	r3, [r7, #116]	; 0x74
 80052b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80052ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052bc:	3301      	adds	r3, #1
 80052be:	677b      	str	r3, [r7, #116]	; 0x74
 80052c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e018      	b.n	8005300 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d114      	bne.n	8005300 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e4:	4413      	add	r3, r2
 80052e6:	663b      	str	r3, [r7, #96]	; 0x60
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	00da      	lsls	r2, r3, #3
 80052ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6959      	ldr	r1, [r3, #20]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	895a      	ldrh	r2, [r3, #10]
 800530c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	f005 fdb9 	bl	800ae86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532e:	823b      	strh	r3, [r7, #16]
 8005330:	8a3b      	ldrh	r3, [r7, #16]
 8005332:	f083 0310 	eor.w	r3, r3, #16
 8005336:	823b      	strh	r3, [r7, #16]
 8005338:	8a3b      	ldrh	r3, [r7, #16]
 800533a:	f083 0320 	eor.w	r3, r3, #32
 800533e:	823b      	strh	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	8a3b      	ldrh	r3, [r7, #16]
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3788      	adds	r7, #136	; 0x88
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800536e:	b480      	push	{r7}
 8005370:	b087      	sub	sp, #28
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	817b      	strh	r3, [r7, #10]
 800537c:	4613      	mov	r3, r2
 800537e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538c:	897b      	ldrh	r3, [r7, #10]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	3304      	adds	r3, #4
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e00a      	b.n	80053bc <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053a6:	897a      	ldrh	r2, [r7, #10]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	3304      	adds	r3, #4
 80053ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	80da      	strh	r2, [r3, #6]
 80053d0:	e00b      	b.n	80053ea <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2201      	movs	r2, #1
 80053d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800541c:	b29b      	uxth	r3, r3
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005430:	b29b      	uxth	r3, r3
 8005432:	f043 0302 	orr.w	r3, r3, #2
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <HAL_PWREx_GetVoltageRange+0x18>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40007000 	.word	0x40007000

08005480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548e:	d130      	bne.n	80054f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005490:	4b23      	ldr	r3, [pc, #140]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800549c:	d038      	beq.n	8005510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054a6:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2232      	movs	r2, #50	; 0x32
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0c9b      	lsrs	r3, r3, #18
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c4:	e002      	b.n	80054cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054cc:	4b14      	ldr	r3, [pc, #80]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d102      	bne.n	80054e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f2      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d110      	bne.n	8005510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00f      	b.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fe:	d007      	beq.n	8005510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005508:	4a05      	ldr	r2, [pc, #20]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800550a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800550e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40007000 	.word	0x40007000
 8005524:	20000000 	.word	0x20000000
 8005528:	431bde83 	.word	0x431bde83

0800552c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a04      	ldr	r2, [pc, #16]	; (8005548 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800553a:	6053      	str	r3, [r2, #4]
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40007000 	.word	0x40007000

0800554c <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005552:	4b45      	ldr	r3, [pc, #276]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a44      	ldr	r2, [pc, #272]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800555e:	f7fc fd91 	bl	8002084 <HAL_GetTick>
 8005562:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005566:	f7fc fd8d 	bl	8002084 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e073      	b.n	8005660 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005578:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8005584:	4b38      	ldr	r3, [pc, #224]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558c:	4a36      	ldr	r2, [pc, #216]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 800558e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8005594:	4b34      	ldr	r3, [pc, #208]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005596:	2200      	movs	r2, #0
 8005598:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800559a:	4b34      	ldr	r3, [pc, #208]	; (800566c <HAL_RCC_DeInit+0x120>)
 800559c:	4a34      	ldr	r2, [pc, #208]	; (8005670 <HAL_RCC_DeInit+0x124>)
 800559e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80055a0:	4b34      	ldr	r3, [pc, #208]	; (8005674 <HAL_RCC_DeInit+0x128>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fc fd1d 	bl	8001fe4 <HAL_InitTick>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e055      	b.n	8005660 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80055b4:	f7fc fd66 	bl	8002084 <HAL_GetTick>
 80055b8:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055bc:	f7fc fd62 	bl	8002084 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e046      	b.n	8005660 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80055d2:	4b25      	ldr	r3, [pc, #148]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4921      	ldr	r1, [pc, #132]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <HAL_RCC_DeInit+0x12c>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80055ea:	f7fc fd4b 	bl	8002084 <HAL_GetTick>
 80055ee:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fc fd47 	bl	8002084 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e02d      	b.n	8005660 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005604:	4b18      	ldr	r3, [pc, #96]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f0      	bne.n	80055f2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8005610:	4b15      	ldr	r3, [pc, #84]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4a13      	ldr	r2, [pc, #76]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 800561c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005620:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005624:	2200      	movs	r2, #0
 8005626:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8005628:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 800562e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005632:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 800563a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005642:	2200      	movs	r2, #0
 8005644:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005654:	4a04      	ldr	r2, [pc, #16]	; (8005668 <HAL_RCC_DeInit+0x11c>)
 8005656:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800565a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40021000 	.word	0x40021000
 800566c:	20000000 	.word	0x20000000
 8005670:	003d0900 	.word	0x003d0900
 8005674:	20000004 	.word	0x20000004
 8005678:	fafef4ff 	.word	0xfafef4ff

0800567c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d102      	bne.n	8005690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f000 bc10 	b.w	8005eb0 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005690:	4b96      	ldr	r3, [pc, #600]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800569a:	4b94      	ldr	r3, [pc, #592]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80e4 	beq.w	800587a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <HAL_RCC_OscConfig+0x4c>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b0c      	cmp	r3, #12
 80056bc:	f040 808b 	bne.w	80057d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	f040 8087 	bne.w	80057d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056c8:	4b88      	ldr	r3, [pc, #544]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_RCC_OscConfig+0x64>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e3e7      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCC_OscConfig+0x7e>
 80056f0:	4b7e      	ldr	r3, [pc, #504]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f8:	e005      	b.n	8005706 <HAL_RCC_OscConfig+0x8a>
 80056fa:	4b7c      	ldr	r3, [pc, #496]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005706:	4293      	cmp	r3, r2
 8005708:	d223      	bcs.n	8005752 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fd7a 	bl	8006208 <RCC_SetFlashLatencyFromMSIRange>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e3c8      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800571e:	4b73      	ldr	r3, [pc, #460]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a72      	ldr	r2, [pc, #456]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b70      	ldr	r3, [pc, #448]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	496d      	ldr	r1, [pc, #436]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800573c:	4b6b      	ldr	r3, [pc, #428]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	4968      	ldr	r1, [pc, #416]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800574c:	4313      	orrs	r3, r2
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	e025      	b.n	800579e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005752:	4b66      	ldr	r3, [pc, #408]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a65      	ldr	r2, [pc, #404]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005758:	f043 0308 	orr.w	r3, r3, #8
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b63      	ldr	r3, [pc, #396]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	4960      	ldr	r1, [pc, #384]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005770:	4b5e      	ldr	r3, [pc, #376]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	495b      	ldr	r1, [pc, #364]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fd3a 	bl	8006208 <RCC_SetFlashLatencyFromMSIRange>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e388      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800579e:	f000 fc6f 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4b51      	ldr	r3, [pc, #324]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	4950      	ldr	r1, [pc, #320]	; (80058f0 <HAL_RCC_OscConfig+0x274>)
 80057b0:	5ccb      	ldrb	r3, [r1, r3]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <HAL_RCC_OscConfig+0x278>)
 80057bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057be:	4b4e      	ldr	r3, [pc, #312]	; (80058f8 <HAL_RCC_OscConfig+0x27c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc fc0e 	bl	8001fe4 <HAL_InitTick>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d052      	beq.n	8005878 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	e36c      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d032      	beq.n	8005844 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057de:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a42      	ldr	r2, [pc, #264]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057ea:	f7fc fc4b 	bl	8002084 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057f2:	f7fc fc47 	bl	8002084 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e355      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005810:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a35      	ldr	r2, [pc, #212]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005816:	f043 0308 	orr.w	r3, r3, #8
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b33      	ldr	r3, [pc, #204]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4930      	ldr	r1, [pc, #192]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800582e:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	492b      	ldr	r1, [pc, #172]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
 8005842:	e01a      	b.n	800587a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005844:	4b29      	ldr	r3, [pc, #164]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005850:	f7fc fc18 	bl	8002084 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005858:	f7fc fc14 	bl	8002084 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e322      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800586a:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x1dc>
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d073      	beq.n	800596e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d005      	beq.n	8005898 <HAL_RCC_OscConfig+0x21c>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d10e      	bne.n	80058b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d10b      	bne.n	80058b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d063      	beq.n	800596c <HAL_RCC_OscConfig+0x2f0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d15f      	bne.n	800596c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e2ff      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d106      	bne.n	80058c8 <HAL_RCC_OscConfig+0x24c>
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e025      	b.n	8005914 <HAL_RCC_OscConfig+0x298>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d0:	d114      	bne.n	80058fc <HAL_RCC_OscConfig+0x280>
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80058d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	4b03      	ldr	r3, [pc, #12]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a02      	ldr	r2, [pc, #8]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e013      	b.n	8005914 <HAL_RCC_OscConfig+0x298>
 80058ec:	40021000 	.word	0x40021000
 80058f0:	0800d954 	.word	0x0800d954
 80058f4:	20000000 	.word	0x20000000
 80058f8:	20000004 	.word	0x20000004
 80058fc:	4ba0      	ldr	r3, [pc, #640]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a9f      	ldr	r2, [pc, #636]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	4b9d      	ldr	r3, [pc, #628]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a9c      	ldr	r2, [pc, #624]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 800590e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fc fbb2 	bl	8002084 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005924:	f7fc fbae 	bl	8002084 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e2bc      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005936:	4b92      	ldr	r3, [pc, #584]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x2a8>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fc fb9e 	bl	8002084 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800594c:	f7fc fb9a 	bl	8002084 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b64      	cmp	r3, #100	; 0x64
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e2a8      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595e:	4b88      	ldr	r3, [pc, #544]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x2d0>
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d060      	beq.n	8005a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d005      	beq.n	800598c <HAL_RCC_OscConfig+0x310>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b0c      	cmp	r3, #12
 8005984:	d119      	bne.n	80059ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d116      	bne.n	80059ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800598c:	4b7c      	ldr	r3, [pc, #496]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_OscConfig+0x328>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e285      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a4:	4b76      	ldr	r3, [pc, #472]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	4973      	ldr	r1, [pc, #460]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b8:	e040      	b.n	8005a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c2:	4b6f      	ldr	r3, [pc, #444]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6e      	ldr	r2, [pc, #440]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fc fb59 	bl	8002084 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d6:	f7fc fb55 	bl	8002084 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e263      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e8:	4b65      	ldr	r3, [pc, #404]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f4:	4b62      	ldr	r3, [pc, #392]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	061b      	lsls	r3, r3, #24
 8005a02:	495f      	ldr	r1, [pc, #380]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	e018      	b.n	8005a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0a:	4b5d      	ldr	r3, [pc, #372]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a5c      	ldr	r2, [pc, #368]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fc fb35 	bl	8002084 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1e:	f7fc fb31 	bl	8002084 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e23f      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a30:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f0      	bne.n	8005a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d03c      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01c      	beq.n	8005a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a50:	4b4b      	ldr	r3, [pc, #300]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a56:	4a4a      	ldr	r2, [pc, #296]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a60:	f7fc fb10 	bl	8002084 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a68:	f7fc fb0c 	bl	8002084 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e21a      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a7a:	4b41      	ldr	r3, [pc, #260]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0ef      	beq.n	8005a68 <HAL_RCC_OscConfig+0x3ec>
 8005a88:	e01b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8a:	4b3d      	ldr	r3, [pc, #244]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a90:	4a3b      	ldr	r2, [pc, #236]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fc faf3 	bl	8002084 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa2:	f7fc faef 	bl	8002084 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e1fd      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ab4:	4b32      	ldr	r3, [pc, #200]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ef      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80a6 	beq.w	8005c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ad4:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae0:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aea:	6593      	str	r3, [r2, #88]	; 0x58
 8005aec:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af8:	2301      	movs	r3, #1
 8005afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005afc:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <HAL_RCC_OscConfig+0x508>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d118      	bne.n	8005b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <HAL_RCC_OscConfig+0x508>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <HAL_RCC_OscConfig+0x508>)
 8005b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b14:	f7fc fab6 	bl	8002084 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1c:	f7fc fab2 	bl	8002084 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e1c0      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <HAL_RCC_OscConfig+0x508>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d108      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4d8>
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b52:	e029      	b.n	8005ba8 <HAL_RCC_OscConfig+0x52c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d115      	bne.n	8005b88 <HAL_RCC_OscConfig+0x50c>
 8005b5c:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <HAL_RCC_OscConfig+0x504>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b7c:	e014      	b.n	8005ba8 <HAL_RCC_OscConfig+0x52c>
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40007000 	.word	0x40007000
 8005b88:	4b9a      	ldr	r3, [pc, #616]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	4a99      	ldr	r2, [pc, #612]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b98:	4b96      	ldr	r3, [pc, #600]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9e:	4a95      	ldr	r2, [pc, #596]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005ba0:	f023 0304 	bic.w	r3, r3, #4
 8005ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d016      	beq.n	8005bde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb0:	f7fc fa68 	bl	8002084 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb6:	e00a      	b.n	8005bce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb8:	f7fc fa64 	bl	8002084 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e170      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bce:	4b89      	ldr	r3, [pc, #548]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ed      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x53c>
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bde:	f7fc fa51 	bl	8002084 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fc fa4d 	bl	8002084 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e159      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bfc:	4b7d      	ldr	r3, [pc, #500]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1ed      	bne.n	8005be6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c0a:	7ffb      	ldrb	r3, [r7, #31]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c10:	4b78      	ldr	r3, [pc, #480]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	4a77      	ldr	r2, [pc, #476]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d03c      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01c      	beq.n	8005c6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c30:	4b70      	ldr	r3, [pc, #448]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c36:	4a6f      	ldr	r2, [pc, #444]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fc fa20 	bl	8002084 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c48:	f7fc fa1c 	bl	8002084 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e12a      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c5a:	4b66      	ldr	r3, [pc, #408]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0ef      	beq.n	8005c48 <HAL_RCC_OscConfig+0x5cc>
 8005c68:	e01b      	b.n	8005ca2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c6a:	4b62      	ldr	r3, [pc, #392]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c70:	4a60      	ldr	r2, [pc, #384]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7a:	f7fc fa03 	bl	8002084 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c82:	f7fc f9ff 	bl	8002084 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e10d      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c94:	4b57      	ldr	r3, [pc, #348]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ef      	bne.n	8005c82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8101 	beq.w	8005eae <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f040 80c9 	bne.w	8005e48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005cb6:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 0203 	and.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d12c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d123      	bne.n	8005d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d11b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d113      	bne.n	8005d24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d109      	bne.n	8005d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d06b      	beq.n	8005dfc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d062      	beq.n	8005df0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d2a:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0ba      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d3a:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2d      	ldr	r2, [pc, #180]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d46:	f7fc f99d 	bl	8002084 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4e:	f7fc f999 	bl	8002084 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e0a7      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d60:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f0      	bne.n	8005d4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d6c:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <HAL_RCC_OscConfig+0x77c>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d7c:	3a01      	subs	r2, #1
 8005d7e:	0112      	lsls	r2, r2, #4
 8005d80:	4311      	orrs	r1, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d86:	0212      	lsls	r2, r2, #8
 8005d88:	4311      	orrs	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d8e:	0852      	lsrs	r2, r2, #1
 8005d90:	3a01      	subs	r2, #1
 8005d92:	0552      	lsls	r2, r2, #21
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d9a:	0852      	lsrs	r2, r2, #1
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	0652      	lsls	r2, r2, #25
 8005da0:	4311      	orrs	r1, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005da6:	06d2      	lsls	r2, r2, #27
 8005da8:	430a      	orrs	r2, r1
 8005daa:	4912      	ldr	r1, [pc, #72]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a0f      	ldr	r2, [pc, #60]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dc8:	f7fc f95c 	bl	8002084 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fc f958 	bl	8002084 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e066      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de2:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <HAL_RCC_OscConfig+0x778>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dee:	e05e      	b.n	8005eae <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e05d      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
 8005df4:	40021000 	.word	0x40021000
 8005df8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfc:	4b2e      	ldr	r3, [pc, #184]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d152      	bne.n	8005eae <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e20:	f7fc f930 	bl	8002084 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fc f92c 	bl	8002084 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e03a      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3a:	4b1f      	ldr	r3, [pc, #124]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x7ac>
 8005e46:	e032      	b.n	8005eae <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d02d      	beq.n	8005eaa <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4e:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e58:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e5a:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d105      	bne.n	8005e72 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e6c:	f023 0303 	bic.w	r3, r3, #3
 8005e70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	4a10      	ldr	r2, [pc, #64]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fc f8ff 	bl	8002084 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8a:	f7fc f8fb 	bl	8002084 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e009      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_RCC_OscConfig+0x83c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f0      	bne.n	8005e8a <HAL_RCC_OscConfig+0x80e>
 8005ea8:	e001      	b.n	8005eae <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40021000 	.word	0x40021000

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0c8      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b66      	ldr	r3, [pc, #408]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d910      	bls.n	8005f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b63      	ldr	r3, [pc, #396]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f023 0207 	bic.w	r2, r3, #7
 8005ee6:	4961      	ldr	r1, [pc, #388]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eee:	4b5f      	ldr	r3, [pc, #380]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0b0      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d04c      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f14:	4b56      	ldr	r3, [pc, #344]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d121      	bne.n	8005f64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e09e      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d107      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f2c:	4b50      	ldr	r3, [pc, #320]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d115      	bne.n	8005f64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e092      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f44:	4b4a      	ldr	r3, [pc, #296]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e086      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f54:	4b46      	ldr	r3, [pc, #280]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e07e      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f64:	4b42      	ldr	r3, [pc, #264]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 0203 	bic.w	r2, r3, #3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	493f      	ldr	r1, [pc, #252]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f76:	f7fc f885 	bl	8002084 <HAL_GetTick>
 8005f7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f7e:	f7fc f881 	bl	8002084 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e066      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f94:	4b36      	ldr	r3, [pc, #216]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 020c 	and.w	r2, r3, #12
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d1eb      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb2:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	492c      	ldr	r1, [pc, #176]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc4:	4b29      	ldr	r3, [pc, #164]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d210      	bcs.n	8005ff4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd2:	4b26      	ldr	r3, [pc, #152]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f023 0207 	bic.w	r2, r3, #7
 8005fda:	4924      	ldr	r1, [pc, #144]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <HAL_RCC_ClockConfig+0x1b0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e036      	b.n	8006062 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006000:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4918      	ldr	r1, [pc, #96]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4910      	ldr	r1, [pc, #64]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 800602e:	4313      	orrs	r3, r2
 8006030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006032:	f000 f825 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8006036:	4602      	mov	r2, r0
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_RCC_ClockConfig+0x1b4>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	490c      	ldr	r1, [pc, #48]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8006044:	5ccb      	ldrb	r3, [r1, r3]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_RCC_ClockConfig+0x1c0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fb ffc4 	bl	8001fe4 <HAL_InitTick>
 800605c:	4603      	mov	r3, r0
 800605e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006060:	7afb      	ldrb	r3, [r7, #11]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40022000 	.word	0x40022000
 8006070:	40021000 	.word	0x40021000
 8006074:	0800d954 	.word	0x0800d954
 8006078:	20000000 	.word	0x20000000
 800607c:	20000004 	.word	0x20000004

08006080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	b089      	sub	sp, #36	; 0x24
 8006084:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	2300      	movs	r3, #0
 800608c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608e:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006098:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0x34>
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d121      	bne.n	80060f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11e      	bne.n	80060f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060b4:	4b34      	ldr	r3, [pc, #208]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060c0:	4b31      	ldr	r3, [pc, #196]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 80060c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	e005      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060d0:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060dc:	4a2b      	ldr	r2, [pc, #172]	; (800618c <HAL_RCC_GetSysClockFreq+0x10c>)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10d      	bne.n	8006108 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060f0:	e00a      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d102      	bne.n	80060fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060f8:	4b25      	ldr	r3, [pc, #148]	; (8006190 <HAL_RCC_GetSysClockFreq+0x110>)
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e004      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b08      	cmp	r3, #8
 8006102:	d101      	bne.n	8006108 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006104:	4b23      	ldr	r3, [pc, #140]	; (8006194 <HAL_RCC_GetSysClockFreq+0x114>)
 8006106:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d134      	bne.n	8006178 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800610e:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d003      	beq.n	8006126 <HAL_RCC_GetSysClockFreq+0xa6>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b03      	cmp	r3, #3
 8006122:	d003      	beq.n	800612c <HAL_RCC_GetSysClockFreq+0xac>
 8006124:	e005      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006126:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <HAL_RCC_GetSysClockFreq+0x110>)
 8006128:	617b      	str	r3, [r7, #20]
      break;
 800612a:	e005      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <HAL_RCC_GetSysClockFreq+0x114>)
 800612e:	617b      	str	r3, [r7, #20]
      break;
 8006130:	e002      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	617b      	str	r3, [r7, #20]
      break;
 8006136:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	3301      	adds	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	fb03 f202 	mul.w	r2, r3, r2
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_RCC_GetSysClockFreq+0x108>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	0e5b      	lsrs	r3, r3, #25
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	3301      	adds	r3, #1
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006178:	69bb      	ldr	r3, [r7, #24]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3724      	adds	r7, #36	; 0x24
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	0800d96c 	.word	0x0800d96c
 8006190:	00f42400 	.word	0x00f42400
 8006194:	007a1200 	.word	0x007a1200

08006198 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800619c:	4b03      	ldr	r3, [pc, #12]	; (80061ac <HAL_RCC_GetHCLKFreq+0x14>)
 800619e:	681b      	ldr	r3, [r3, #0]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000000 	.word	0x20000000

080061b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061b4:	f7ff fff0 	bl	8006198 <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4904      	ldr	r1, [pc, #16]	; (80061d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40021000 	.word	0x40021000
 80061d8:	0800d964 	.word	0x0800d964

080061dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061e0:	f7ff ffda 	bl	8006198 <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	0adb      	lsrs	r3, r3, #11
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4904      	ldr	r1, [pc, #16]	; (8006204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40021000 	.word	0x40021000
 8006204:	0800d964 	.word	0x0800d964

08006208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006214:	4b2a      	ldr	r3, [pc, #168]	; (80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006220:	f7ff f920 	bl	8005464 <HAL_PWREx_GetVoltageRange>
 8006224:	6178      	str	r0, [r7, #20]
 8006226:	e014      	b.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622c:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006232:	6593      	str	r3, [r2, #88]	; 0x58
 8006234:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006240:	f7ff f910 	bl	8005464 <HAL_PWREx_GetVoltageRange>
 8006244:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006246:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800624c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006250:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006258:	d10b      	bne.n	8006272 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b80      	cmp	r3, #128	; 0x80
 800625e:	d919      	bls.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2ba0      	cmp	r3, #160	; 0xa0
 8006264:	d902      	bls.n	800626c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006266:	2302      	movs	r3, #2
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e013      	b.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800626c:	2301      	movs	r3, #1
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	e010      	b.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b80      	cmp	r3, #128	; 0x80
 8006276:	d902      	bls.n	800627e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006278:	2303      	movs	r3, #3
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	e00a      	b.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d102      	bne.n	800628a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006284:	2302      	movs	r3, #2
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	e004      	b.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b70      	cmp	r3, #112	; 0x70
 800628e:	d101      	bne.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006290:	2301      	movs	r3, #1
 8006292:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f023 0207 	bic.w	r2, r3, #7
 800629c:	4909      	ldr	r1, [pc, #36]	; (80062c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d001      	beq.n	80062b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40022000 	.word	0x40022000

080062c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d0:	2300      	movs	r3, #0
 80062d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d4:	2300      	movs	r3, #0
 80062d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d031      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062ec:	d01a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80062ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062f2:	d814      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062fc:	d10f      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80062fe:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4a5c      	ldr	r2, [pc, #368]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006308:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800630a:	e00c      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fa44 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	74fb      	strb	r3, [r7, #19]
      break;
 8006322:	e000      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006326:	7cfb      	ldrb	r3, [r7, #19]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800632c:	4b51      	ldr	r3, [pc, #324]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	494e      	ldr	r1, [pc, #312]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006342:	e001      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	7cfb      	ldrb	r3, [r7, #19]
 8006346:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 809e 	beq.w	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006356:	2300      	movs	r3, #0
 8006358:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800635a:	4b46      	ldr	r3, [pc, #280]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800636a:	2300      	movs	r3, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006370:	4b40      	ldr	r3, [pc, #256]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006374:	4a3f      	ldr	r2, [pc, #252]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637a:	6593      	str	r3, [r2, #88]	; 0x58
 800637c:	4b3d      	ldr	r3, [pc, #244]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006388:	2301      	movs	r3, #1
 800638a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800638c:	4b3a      	ldr	r3, [pc, #232]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a39      	ldr	r2, [pc, #228]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006398:	f7fb fe74 	bl	8002084 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800639e:	e009      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a0:	f7fb fe70 	bl	8002084 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d902      	bls.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	74fb      	strb	r3, [r7, #19]
        break;
 80063b2:	e005      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063b4:	4b30      	ldr	r3, [pc, #192]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ef      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d15a      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063c6:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01e      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d019      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006404:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800640e:	4a19      	ldr	r2, [pc, #100]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d016      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006420:	f7fb fe30 	bl	8002084 <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006426:	e00b      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006428:	f7fb fe2c 	bl	8002084 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	; 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d902      	bls.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	74fb      	strb	r3, [r7, #19]
            break;
 800643e:	e006      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0ec      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800644e:	7cfb      	ldrb	r3, [r7, #19]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006462:	4904      	ldr	r1, [pc, #16]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800646a:	e009      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800646c:	7cfb      	ldrb	r3, [r7, #19]
 800646e:	74bb      	strb	r3, [r7, #18]
 8006470:	e006      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
 8006478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	7cfb      	ldrb	r3, [r7, #19]
 800647e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006480:	7c7b      	ldrb	r3, [r7, #17]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006486:	4b9e      	ldr	r3, [pc, #632]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648a:	4a9d      	ldr	r2, [pc, #628]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800648c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800649e:	4b98      	ldr	r3, [pc, #608]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f023 0203 	bic.w	r2, r3, #3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4994      	ldr	r1, [pc, #592]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064c0:	4b8f      	ldr	r3, [pc, #572]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f023 020c 	bic.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	498c      	ldr	r1, [pc, #560]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064e2:	4b87      	ldr	r3, [pc, #540]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	4983      	ldr	r1, [pc, #524]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006504:	4b7e      	ldr	r3, [pc, #504]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	497b      	ldr	r1, [pc, #492]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006526:	4b76      	ldr	r3, [pc, #472]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	4972      	ldr	r1, [pc, #456]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006548:	4b6d      	ldr	r3, [pc, #436]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	496a      	ldr	r1, [pc, #424]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800656a:	4b65      	ldr	r3, [pc, #404]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006578:	4961      	ldr	r1, [pc, #388]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800658c:	4b5c      	ldr	r3, [pc, #368]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	4959      	ldr	r1, [pc, #356]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ae:	4b54      	ldr	r3, [pc, #336]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	4950      	ldr	r1, [pc, #320]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065d0:	4b4b      	ldr	r3, [pc, #300]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	4948      	ldr	r1, [pc, #288]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065f2:	4b43      	ldr	r3, [pc, #268]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f8:	f023 0203 	bic.w	r2, r3, #3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	493f      	ldr	r1, [pc, #252]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d028      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006614:	4b3a      	ldr	r3, [pc, #232]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006622:	4937      	ldr	r1, [pc, #220]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006632:	d106      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006634:	4b32      	ldr	r3, [pc, #200]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4a31      	ldr	r2, [pc, #196]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800663a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663e:	60d3      	str	r3, [r2, #12]
 8006640:	e011      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800664a:	d10c      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f8a4 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800665c:	7cfb      	ldrb	r3, [r7, #19]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d028      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006672:	4b23      	ldr	r3, [pc, #140]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006680:	491f      	ldr	r1, [pc, #124]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d106      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006692:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	4a1a      	ldr	r2, [pc, #104]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669c:	60d3      	str	r3, [r2, #12]
 800669e:	e011      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3304      	adds	r3, #4
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f875 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ba:	7cfb      	ldrb	r3, [r7, #19]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d02b      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	4908      	ldr	r1, [pc, #32]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ee:	d109      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a02      	ldr	r2, [pc, #8]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066fa:	60d3      	str	r3, [r2, #12]
 80066fc:	e014      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800670c:	d10c      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3304      	adds	r3, #4
 8006712:	2101      	movs	r1, #1
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f843 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8006724:	7cfb      	ldrb	r3, [r7, #19]
 8006726:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01c      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006734:	4b19      	ldr	r3, [pc, #100]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006742:	4916      	ldr	r1, [pc, #88]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006752:	d10c      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f820 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006764:	7cfb      	ldrb	r3, [r7, #19]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800676a:	7cfb      	ldrb	r3, [r7, #19]
 800676c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800677a:	4b08      	ldr	r3, [pc, #32]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	4904      	ldr	r1, [pc, #16]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006790:	7cbb      	ldrb	r3, [r7, #18]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000

080067a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ae:	4b74      	ldr	r3, [pc, #464]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d018      	beq.n	80067ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067ba:	4b71      	ldr	r3, [pc, #452]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0203 	and.w	r2, r3, #3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d10d      	bne.n	80067e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
       ||
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067d2:	4b6b      	ldr	r3, [pc, #428]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	091b      	lsrs	r3, r3, #4
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
       ||
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d047      	beq.n	8006876 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
 80067ea:	e044      	b.n	8006876 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d018      	beq.n	8006826 <RCCEx_PLLSAI1_Config+0x86>
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d825      	bhi.n	8006844 <RCCEx_PLLSAI1_Config+0xa4>
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d002      	beq.n	8006802 <RCCEx_PLLSAI1_Config+0x62>
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d009      	beq.n	8006814 <RCCEx_PLLSAI1_Config+0x74>
 8006800:	e020      	b.n	8006844 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006802:	4b5f      	ldr	r3, [pc, #380]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11d      	bne.n	800684a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006812:	e01a      	b.n	800684a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006814:	4b5a      	ldr	r3, [pc, #360]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d116      	bne.n	800684e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006824:	e013      	b.n	800684e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006826:	4b56      	ldr	r3, [pc, #344]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10f      	bne.n	8006852 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006832:	4b53      	ldr	r3, [pc, #332]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006842:	e006      	b.n	8006852 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]
      break;
 8006848:	e004      	b.n	8006854 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006852:	bf00      	nop
    }

    if(status == HAL_OK)
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10d      	bne.n	8006876 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800685a:	4b49      	ldr	r3, [pc, #292]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6819      	ldr	r1, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	3b01      	subs	r3, #1
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	430b      	orrs	r3, r1
 8006870:	4943      	ldr	r1, [pc, #268]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006872:	4313      	orrs	r3, r2
 8006874:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d17c      	bne.n	8006976 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800687c:	4b40      	ldr	r3, [pc, #256]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a3f      	ldr	r2, [pc, #252]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006888:	f7fb fbfc 	bl	8002084 <HAL_GetTick>
 800688c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800688e:	e009      	b.n	80068a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006890:	f7fb fbf8 	bl	8002084 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d902      	bls.n	80068a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	73fb      	strb	r3, [r7, #15]
        break;
 80068a2:	e005      	b.n	80068b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068a4:	4b36      	ldr	r3, [pc, #216]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1ef      	bne.n	8006890 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d15f      	bne.n	8006976 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d110      	bne.n	80068de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068bc:	4b30      	ldr	r3, [pc, #192]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80068c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6892      	ldr	r2, [r2, #8]
 80068cc:	0211      	lsls	r1, r2, #8
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68d2      	ldr	r2, [r2, #12]
 80068d2:	06d2      	lsls	r2, r2, #27
 80068d4:	430a      	orrs	r2, r1
 80068d6:	492a      	ldr	r1, [pc, #168]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	610b      	str	r3, [r1, #16]
 80068dc:	e027      	b.n	800692e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d112      	bne.n	800690a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068e4:	4b26      	ldr	r3, [pc, #152]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6892      	ldr	r2, [r2, #8]
 80068f4:	0211      	lsls	r1, r2, #8
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6912      	ldr	r2, [r2, #16]
 80068fa:	0852      	lsrs	r2, r2, #1
 80068fc:	3a01      	subs	r2, #1
 80068fe:	0552      	lsls	r2, r2, #21
 8006900:	430a      	orrs	r2, r1
 8006902:	491f      	ldr	r1, [pc, #124]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	610b      	str	r3, [r1, #16]
 8006908:	e011      	b.n	800692e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800690a:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6892      	ldr	r2, [r2, #8]
 800691a:	0211      	lsls	r1, r2, #8
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6952      	ldr	r2, [r2, #20]
 8006920:	0852      	lsrs	r2, r2, #1
 8006922:	3a01      	subs	r2, #1
 8006924:	0652      	lsls	r2, r2, #25
 8006926:	430a      	orrs	r2, r1
 8006928:	4915      	ldr	r1, [pc, #84]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800692a:	4313      	orrs	r3, r2
 800692c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a13      	ldr	r2, [pc, #76]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693a:	f7fb fba3 	bl	8002084 <HAL_GetTick>
 800693e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006940:	e009      	b.n	8006956 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006942:	f7fb fb9f 	bl	8002084 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d902      	bls.n	8006956 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	73fb      	strb	r3, [r7, #15]
          break;
 8006954:	e005      	b.n	8006962 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006956:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0ef      	beq.n	8006942 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	4903      	ldr	r1, [pc, #12]	; (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006972:	4313      	orrs	r3, r2
 8006974:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40021000 	.word	0x40021000

08006984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e095      	b.n	8006ac2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a6:	d009      	beq.n	80069bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	61da      	str	r2, [r3, #28]
 80069ae:	e005      	b.n	80069bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fa ff7a 	bl	80018d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069fc:	d902      	bls.n	8006a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e002      	b.n	8006a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a12:	d007      	beq.n	8006a24 <HAL_SPI_Init+0xa0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a1c:	d002      	beq.n	8006a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	ea42 0103 	orr.w	r1, r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	f003 0204 	and.w	r2, r3, #4
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006aa0:	ea42 0103 	orr.w	r1, r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01a      	b.n	8006b12 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fa ff4d 	bl	8001994 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_SPI_Transmit+0x22>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e158      	b.n	8006dee <HAL_SPI_Transmit+0x2d4>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b44:	f7fb fa9e 	bl	8002084 <HAL_GetTick>
 8006b48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b5e:	e13d      	b.n	8006ddc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_SPI_Transmit+0x52>
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b70:	e134      	b.n	8006ddc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2203      	movs	r2, #3
 8006b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bbc:	d10f      	bne.n	8006bde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d007      	beq.n	8006bfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c04:	d94b      	bls.n	8006c9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_Transmit+0xfa>
 8006c0e:	8afb      	ldrh	r3, [r7, #22]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d13e      	bne.n	8006c92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	1c9a      	adds	r2, r3, #2
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c38:	e02b      	b.n	8006c92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d112      	bne.n	8006c6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	881a      	ldrh	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c6c:	e011      	b.n	8006c92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c6e:	f7fb fa09 	bl	8002084 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d803      	bhi.n	8006c86 <HAL_SPI_Transmit+0x16c>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d102      	bne.n	8006c8c <HAL_SPI_Transmit+0x172>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c90:	e0a4      	b.n	8006ddc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1ce      	bne.n	8006c3a <HAL_SPI_Transmit+0x120>
 8006c9c:	e07c      	b.n	8006d98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_SPI_Transmit+0x192>
 8006ca6:	8afb      	ldrh	r3, [r7, #22]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d170      	bne.n	8006d8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d912      	bls.n	8006cdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b02      	subs	r3, #2
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cda:	e058      	b.n	8006d8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d02:	e044      	b.n	8006d8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d12b      	bne.n	8006d6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d912      	bls.n	8006d42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	881a      	ldrh	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	1c9a      	adds	r2, r3, #2
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b02      	subs	r3, #2
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d40:	e025      	b.n	8006d8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d68:	e011      	b.n	8006d8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d6a:	f7fb f98b 	bl	8002084 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d803      	bhi.n	8006d82 <HAL_SPI_Transmit+0x268>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d80:	d102      	bne.n	8006d88 <HAL_SPI_Transmit+0x26e>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d8c:	e026      	b.n	8006ddc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1b5      	bne.n	8006d04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f949 	bl	8007034 <SPI_EndRxTxTransaction>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e000      	b.n	8006ddc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006dda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dec:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e08:	f7fb f93c 	bl	8002084 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e18:	f7fb f934 	bl	8002084 <HAL_GetTick>
 8006e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e1e:	4b39      	ldr	r3, [pc, #228]	; (8006f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	015b      	lsls	r3, r3, #5
 8006e24:	0d1b      	lsrs	r3, r3, #20
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e2e:	e054      	b.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d050      	beq.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e38:	f7fb f924 	bl	8002084 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d902      	bls.n	8006e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d13d      	bne.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e66:	d111      	bne.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	d004      	beq.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7a:	d107      	bne.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e94:	d10f      	bne.n	8006eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e017      	b.n	8006efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	bf0c      	ite	eq
 8006eea:	2301      	moveq	r3, #1
 8006eec:	2300      	movne	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d19b      	bne.n	8006e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000000 	.word	0x20000000

08006f08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f1a:	f7fb f8b3 	bl	8002084 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	1a9b      	subs	r3, r3, r2
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	4413      	add	r3, r2
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f2a:	f7fb f8ab 	bl	8002084 <HAL_GetTick>
 8006f2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f38:	4b3d      	ldr	r3, [pc, #244]	; (8007030 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	00da      	lsls	r2, r3, #3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	0d1b      	lsrs	r3, r3, #20
 8006f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f50:	e060      	b.n	8007014 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f58:	d107      	bne.n	8006f6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d050      	beq.n	8007014 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f72:	f7fb f887 	bl	8002084 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d902      	bls.n	8006f88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d13d      	bne.n	8007004 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa0:	d111      	bne.n	8006fc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006faa:	d004      	beq.n	8006fb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb4:	d107      	bne.n	8006fc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fce:	d10f      	bne.n	8006ff0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e010      	b.n	8007026 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3b01      	subs	r3, #1
 8007012:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	4013      	ands	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d196      	bne.n	8006f52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000000 	.word	0x20000000

08007034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ff5b 	bl	8006f08 <SPI_WaitFifoStateUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e027      	b.n	80070b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fec0 	bl	8006df8 <SPI_WaitFlagStateUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e014      	b.n	80070b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ff34 	bl	8006f08 <SPI_WaitFifoStateUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e000      	b.n	80070b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e040      	b.n	8007154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fa fc7a 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fd30 	bl	8007b64 <UART_SetConfig>
 8007104:	4603      	mov	r3, r0
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e022      	b.n	8007154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 ffaa 	bl	8008070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800712a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f831 	bl	80081b4 <UART_CheckIdleState>
 8007152:	4603      	mov	r3, r0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e02b      	b.n	80071c6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2224      	movs	r2, #36	; 0x24
 8007172:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7fa fd91 	bl	8001cc4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b08a      	sub	sp, #40	; 0x28
 80071d2:	af02      	add	r7, sp, #8
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	f040 8082 	bne.w	80072ec <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_UART_Transmit+0x26>
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e07a      	b.n	80072ee <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_UART_Transmit+0x38>
 8007202:	2302      	movs	r3, #2
 8007204:	e073      	b.n	80072ee <HAL_UART_Transmit+0x120>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2221      	movs	r2, #33	; 0x21
 800721a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721c:	f7fa ff32 	bl	8002084 <HAL_GetTick>
 8007220:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	88fa      	ldrh	r2, [r7, #6]
 800722e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723a:	d108      	bne.n	800724e <HAL_UART_Transmit+0x80>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e003      	b.n	8007256 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800725e:	e02d      	b.n	80072bc <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 ffeb 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e039      	b.n	80072ee <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800728c:	b292      	uxth	r2, r2
 800728e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	3302      	adds	r3, #2
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e008      	b.n	80072aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	b292      	uxth	r2, r2
 80072a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1cb      	bne.n	8007260 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2140      	movs	r1, #64	; 0x40
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 ffb7 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e005      	b.n	80072ee <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2220      	movs	r2, #32
 80072e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b09d      	sub	sp, #116	; 0x74
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007302:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007308:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_UART_DMAPause+0x22>
 8007314:	2302      	movs	r3, #2
 8007316:	e083      	b.n	8007420 <HAL_UART_DMAPause+0x12a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d11c      	bne.n	8007368 <HAL_UART_DMAPause+0x72>
 800732e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007330:	2b21      	cmp	r3, #33	; 0x21
 8007332:	d119      	bne.n	8007368 <HAL_UART_DMAPause+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734a:	667b      	str	r3, [r7, #100]	; 0x64
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007354:	657a      	str	r2, [r7, #84]	; 0x54
 8007356:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800735a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <HAL_UART_DMAPause+0x3e>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d14f      	bne.n	8007416 <HAL_UART_DMAPause+0x120>
 8007376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007378:	2b22      	cmp	r3, #34	; 0x22
 800737a:	d14c      	bne.n	8007416 <HAL_UART_DMAPause+0x120>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007390:	663b      	str	r3, [r7, #96]	; 0x60
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739a:	643b      	str	r3, [r7, #64]	; 0x40
 800739c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e6      	bne.n	800737c <HAL_UART_DMAPause+0x86>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e5      	bne.n	80073ae <HAL_UART_DMAPause+0xb8>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007402:	61ba      	str	r2, [r7, #24]
 8007404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	613b      	str	r3, [r7, #16]
   return(result);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <HAL_UART_DMAPause+0xec>
  }

  __HAL_UNLOCK(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3774      	adds	r7, #116	; 0x74
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b09b      	sub	sp, #108	; 0x6c
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_UART_DMAResume+0x16>
 800743e:	2302      	movs	r3, #2
 8007440:	e07f      	b.n	8007542 <HAL_UART_DMAResume+0x116>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744e:	2b21      	cmp	r3, #33	; 0x21
 8007450:	d119      	bne.n	8007486 <HAL_UART_DMAResume+0x5a>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	667b      	str	r3, [r7, #100]	; 0x64
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007472:	657a      	str	r2, [r7, #84]	; 0x54
 8007474:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <HAL_UART_DMAResume+0x26>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748a:	2b22      	cmp	r3, #34	; 0x22
 800748c:	d154      	bne.n	8007538 <HAL_UART_DMAResume+0x10c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d018      	beq.n	80074d0 <HAL_UART_DMAResume+0xa4>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b2:	663b      	str	r3, [r7, #96]	; 0x60
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074bc:	643b      	str	r3, [r7, #64]	; 0x40
 80074be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e5      	bne.n	80074d0 <HAL_UART_DMAResume+0xa4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	60bb      	str	r3, [r7, #8]
   return(result);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751a:	65bb      	str	r3, [r7, #88]	; 0x58
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007524:	61ba      	str	r2, [r7, #24]
 8007526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6979      	ldr	r1, [r7, #20]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	613b      	str	r3, [r7, #16]
   return(result);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e5      	bne.n	8007504 <HAL_UART_DMAResume+0xd8>
  }

  __HAL_UNLOCK(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	376c      	adds	r7, #108	; 0x6c
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b0ba      	sub	sp, #232	; 0xe8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007576:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800757a:	f640 030f 	movw	r3, #2063	; 0x80f
 800757e:	4013      	ands	r3, r2
 8007580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007588:	2b00      	cmp	r3, #0
 800758a:	d115      	bne.n	80075b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800758c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 82a6 	beq.w	8007afa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
      }
      return;
 80075b6:	e2a0      	b.n	8007afa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80075b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8117 	beq.w	80077f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075d2:	4b85      	ldr	r3, [pc, #532]	; (80077e8 <HAL_UART_IRQHandler+0x298>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 810a 	beq.w	80077f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d011      	beq.n	800760c <HAL_UART_IRQHandler+0xbc>
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2201      	movs	r2, #1
 80075fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007602:	f043 0201 	orr.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d011      	beq.n	800763c <HAL_UART_IRQHandler+0xec>
 8007618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2202      	movs	r2, #2
 800762a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007632:	f043 0204 	orr.w	r2, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d011      	beq.n	800766c <HAL_UART_IRQHandler+0x11c>
 8007648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2204      	movs	r2, #4
 800765a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007662:	f043 0202 	orr.w	r2, r3, #2
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d017      	beq.n	80076a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007688:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2208      	movs	r2, #8
 8007696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769e:	f043 0208 	orr.w	r2, r3, #8
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d012      	beq.n	80076da <HAL_UART_IRQHandler+0x18a>
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00c      	beq.n	80076da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 820c 	beq.w	8007afe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00d      	beq.n	800770e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d005      	beq.n	8007732 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800772a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800772e:	2b00      	cmp	r3, #0
 8007730:	d04f      	beq.n	80077d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 ff18 	bl	8008568 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d141      	bne.n	80077ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800775c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800777e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800778a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1d9      	bne.n	8007746 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	2b00      	cmp	r3, #0
 8007798:	d013      	beq.n	80077c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	4a13      	ldr	r2, [pc, #76]	; (80077ec <HAL_UART_IRQHandler+0x29c>)
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fb fa54 	bl	8002c54 <HAL_DMA_Abort_IT>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d017      	beq.n	80077e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e00f      	b.n	80077e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9c4 	bl	8007b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	e00b      	b.n	80077e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9c0 	bl	8007b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	e007      	b.n	80077e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f9bc 	bl	8007b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80077e0:	e18d      	b.n	8007afe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e2:	bf00      	nop
    return;
 80077e4:	e18b      	b.n	8007afe <HAL_UART_IRQHandler+0x5ae>
 80077e6:	bf00      	nop
 80077e8:	04000120 	.word	0x04000120
 80077ec:	08008807 	.word	0x08008807

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	f040 8146 	bne.w	8007a86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 813f 	beq.w	8007a86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8138 	beq.w	8007a86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2210      	movs	r2, #16
 800781c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b40      	cmp	r3, #64	; 0x40
 800782a:	f040 80b4 	bne.w	8007996 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800783a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 815f 	beq.w	8007b02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800784a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800784e:	429a      	cmp	r2, r3
 8007850:	f080 8157 	bcs.w	8007b02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800785a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 8085 	bne.w	800797a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800788c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800789a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800789e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1da      	bne.n	8007870 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e1      	bne.n	80078ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800791a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800791c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e3      	bne.n	80078f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800794a:	f023 0310 	bic.w	r3, r3, #16
 800794e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800795c:	65bb      	str	r3, [r7, #88]	; 0x58
 800795e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800796a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e4      	bne.n	800793a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	4618      	mov	r0, r3
 8007976:	f7fb f92f 	bl	8002bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007986:	b29b      	uxth	r3, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7f9 f8c4 	bl	8000b1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007994:	e0b5      	b.n	8007b02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80a7 	beq.w	8007b06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80079b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80a2 	beq.w	8007b06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
 80079e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e4      	bne.n	80079c2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	623b      	str	r3, [r7, #32]
   return(result);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	f023 0301 	bic.w	r3, r3, #1
 8007a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a1c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e3      	bne.n	80079f8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0310 	bic.w	r3, r3, #16
 8007a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a64:	61fb      	str	r3, [r7, #28]
 8007a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	617b      	str	r3, [r7, #20]
   return(result);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e4      	bne.n	8007a42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7f9 f84c 	bl	8000b1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a84:	e03f      	b.n	8007b06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x560>
 8007a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007aa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 feec 	bl	8008886 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aae:	e02d      	b.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01c      	beq.n	8007b0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
    }
    return;
 8007ad8:	e017      	b.n	8007b0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d012      	beq.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00c      	beq.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fe9d 	bl	8008832 <UART_EndTransmit_IT>
    return;
 8007af8:	e008      	b.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007afa:	bf00      	nop
 8007afc:	e006      	b.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007afe:	bf00      	nop
 8007b00:	e004      	b.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b02:	bf00      	nop
 8007b04:	e002      	b.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b06:	bf00      	nop
 8007b08:	e000      	b.n	8007b0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b0c:	37e8      	adds	r7, #232	; 0xe8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop

08007b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b68:	b08a      	sub	sp, #40	; 0x28
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4ba5      	ldr	r3, [pc, #660]	; (8007e28 <UART_SetConfig+0x2c4>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a9a      	ldr	r2, [pc, #616]	; (8007e2c <UART_SetConfig+0x2c8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	430a      	orrs	r2, r1
 8007be2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a91      	ldr	r2, [pc, #580]	; (8007e30 <UART_SetConfig+0x2cc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d126      	bne.n	8007c3c <UART_SetConfig+0xd8>
 8007bee:	4b91      	ldr	r3, [pc, #580]	; (8007e34 <UART_SetConfig+0x2d0>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d81b      	bhi.n	8007c34 <UART_SetConfig+0xd0>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <UART_SetConfig+0xa0>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c15 	.word	0x08007c15
 8007c08:	08007c25 	.word	0x08007c25
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c2d 	.word	0x08007c2d
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c1a:	e0d6      	b.n	8007dca <UART_SetConfig+0x266>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c22:	e0d2      	b.n	8007dca <UART_SetConfig+0x266>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c2a:	e0ce      	b.n	8007dca <UART_SetConfig+0x266>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c32:	e0ca      	b.n	8007dca <UART_SetConfig+0x266>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c3a:	e0c6      	b.n	8007dca <UART_SetConfig+0x266>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a7d      	ldr	r2, [pc, #500]	; (8007e38 <UART_SetConfig+0x2d4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d138      	bne.n	8007cb8 <UART_SetConfig+0x154>
 8007c46:	4b7b      	ldr	r3, [pc, #492]	; (8007e34 <UART_SetConfig+0x2d0>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	f003 030c 	and.w	r3, r3, #12
 8007c50:	2b0c      	cmp	r3, #12
 8007c52:	d82d      	bhi.n	8007cb0 <UART_SetConfig+0x14c>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <UART_SetConfig+0xf8>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c91 	.word	0x08007c91
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007cb1 	.word	0x08007cb1
 8007c68:	08007cb1 	.word	0x08007cb1
 8007c6c:	08007ca1 	.word	0x08007ca1
 8007c70:	08007cb1 	.word	0x08007cb1
 8007c74:	08007cb1 	.word	0x08007cb1
 8007c78:	08007cb1 	.word	0x08007cb1
 8007c7c:	08007c99 	.word	0x08007c99
 8007c80:	08007cb1 	.word	0x08007cb1
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	08007cb1 	.word	0x08007cb1
 8007c8c:	08007ca9 	.word	0x08007ca9
 8007c90:	2300      	movs	r3, #0
 8007c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c96:	e098      	b.n	8007dca <UART_SetConfig+0x266>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c9e:	e094      	b.n	8007dca <UART_SetConfig+0x266>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca6:	e090      	b.n	8007dca <UART_SetConfig+0x266>
 8007ca8:	2308      	movs	r3, #8
 8007caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cae:	e08c      	b.n	8007dca <UART_SetConfig+0x266>
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb6:	e088      	b.n	8007dca <UART_SetConfig+0x266>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a5f      	ldr	r2, [pc, #380]	; (8007e3c <UART_SetConfig+0x2d8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d125      	bne.n	8007d0e <UART_SetConfig+0x1aa>
 8007cc2:	4b5c      	ldr	r3, [pc, #368]	; (8007e34 <UART_SetConfig+0x2d0>)
 8007cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d016      	beq.n	8007cfe <UART_SetConfig+0x19a>
 8007cd0:	2b30      	cmp	r3, #48	; 0x30
 8007cd2:	d818      	bhi.n	8007d06 <UART_SetConfig+0x1a2>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d00a      	beq.n	8007cee <UART_SetConfig+0x18a>
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d814      	bhi.n	8007d06 <UART_SetConfig+0x1a2>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <UART_SetConfig+0x182>
 8007ce0:	2b10      	cmp	r3, #16
 8007ce2:	d008      	beq.n	8007cf6 <UART_SetConfig+0x192>
 8007ce4:	e00f      	b.n	8007d06 <UART_SetConfig+0x1a2>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cec:	e06d      	b.n	8007dca <UART_SetConfig+0x266>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf4:	e069      	b.n	8007dca <UART_SetConfig+0x266>
 8007cf6:	2304      	movs	r3, #4
 8007cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfc:	e065      	b.n	8007dca <UART_SetConfig+0x266>
 8007cfe:	2308      	movs	r3, #8
 8007d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d04:	e061      	b.n	8007dca <UART_SetConfig+0x266>
 8007d06:	2310      	movs	r3, #16
 8007d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0c:	e05d      	b.n	8007dca <UART_SetConfig+0x266>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a4b      	ldr	r2, [pc, #300]	; (8007e40 <UART_SetConfig+0x2dc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d125      	bne.n	8007d64 <UART_SetConfig+0x200>
 8007d18:	4b46      	ldr	r3, [pc, #280]	; (8007e34 <UART_SetConfig+0x2d0>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d22:	2bc0      	cmp	r3, #192	; 0xc0
 8007d24:	d016      	beq.n	8007d54 <UART_SetConfig+0x1f0>
 8007d26:	2bc0      	cmp	r3, #192	; 0xc0
 8007d28:	d818      	bhi.n	8007d5c <UART_SetConfig+0x1f8>
 8007d2a:	2b80      	cmp	r3, #128	; 0x80
 8007d2c:	d00a      	beq.n	8007d44 <UART_SetConfig+0x1e0>
 8007d2e:	2b80      	cmp	r3, #128	; 0x80
 8007d30:	d814      	bhi.n	8007d5c <UART_SetConfig+0x1f8>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <UART_SetConfig+0x1d8>
 8007d36:	2b40      	cmp	r3, #64	; 0x40
 8007d38:	d008      	beq.n	8007d4c <UART_SetConfig+0x1e8>
 8007d3a:	e00f      	b.n	8007d5c <UART_SetConfig+0x1f8>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d42:	e042      	b.n	8007dca <UART_SetConfig+0x266>
 8007d44:	2302      	movs	r3, #2
 8007d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4a:	e03e      	b.n	8007dca <UART_SetConfig+0x266>
 8007d4c:	2304      	movs	r3, #4
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d52:	e03a      	b.n	8007dca <UART_SetConfig+0x266>
 8007d54:	2308      	movs	r3, #8
 8007d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5a:	e036      	b.n	8007dca <UART_SetConfig+0x266>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d62:	e032      	b.n	8007dca <UART_SetConfig+0x266>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a30      	ldr	r2, [pc, #192]	; (8007e2c <UART_SetConfig+0x2c8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d12a      	bne.n	8007dc4 <UART_SetConfig+0x260>
 8007d6e:	4b31      	ldr	r3, [pc, #196]	; (8007e34 <UART_SetConfig+0x2d0>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d7c:	d01a      	beq.n	8007db4 <UART_SetConfig+0x250>
 8007d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d82:	d81b      	bhi.n	8007dbc <UART_SetConfig+0x258>
 8007d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d88:	d00c      	beq.n	8007da4 <UART_SetConfig+0x240>
 8007d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8e:	d815      	bhi.n	8007dbc <UART_SetConfig+0x258>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <UART_SetConfig+0x238>
 8007d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d98:	d008      	beq.n	8007dac <UART_SetConfig+0x248>
 8007d9a:	e00f      	b.n	8007dbc <UART_SetConfig+0x258>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da2:	e012      	b.n	8007dca <UART_SetConfig+0x266>
 8007da4:	2302      	movs	r3, #2
 8007da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007daa:	e00e      	b.n	8007dca <UART_SetConfig+0x266>
 8007dac:	2304      	movs	r3, #4
 8007dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db2:	e00a      	b.n	8007dca <UART_SetConfig+0x266>
 8007db4:	2308      	movs	r3, #8
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dba:	e006      	b.n	8007dca <UART_SetConfig+0x266>
 8007dbc:	2310      	movs	r3, #16
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e002      	b.n	8007dca <UART_SetConfig+0x266>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <UART_SetConfig+0x2c8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	f040 808b 	bne.w	8007eec <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dda:	2b08      	cmp	r3, #8
 8007ddc:	d834      	bhi.n	8007e48 <UART_SetConfig+0x2e4>
 8007dde:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <UART_SetConfig+0x280>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e49 	.word	0x08007e49
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e17 	.word	0x08007e17
 8007df8:	08007e49 	.word	0x08007e49
 8007dfc:	08007e49 	.word	0x08007e49
 8007e00:	08007e49 	.word	0x08007e49
 8007e04:	08007e1f 	.word	0x08007e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e08:	f7fe f9d2 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 8007e0c:	61f8      	str	r0, [r7, #28]
        break;
 8007e0e:	e021      	b.n	8007e54 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <UART_SetConfig+0x2e0>)
 8007e12:	61fb      	str	r3, [r7, #28]
        break;
 8007e14:	e01e      	b.n	8007e54 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e16:	f7fe f933 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007e1a:	61f8      	str	r0, [r7, #28]
        break;
 8007e1c:	e01a      	b.n	8007e54 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e22:	61fb      	str	r3, [r7, #28]
        break;
 8007e24:	e016      	b.n	8007e54 <UART_SetConfig+0x2f0>
 8007e26:	bf00      	nop
 8007e28:	efff69f3 	.word	0xefff69f3
 8007e2c:	40008000 	.word	0x40008000
 8007e30:	40013800 	.word	0x40013800
 8007e34:	40021000 	.word	0x40021000
 8007e38:	40004400 	.word	0x40004400
 8007e3c:	40004800 	.word	0x40004800
 8007e40:	40004c00 	.word	0x40004c00
 8007e44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80fa 	beq.w	8008050 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d305      	bcc.n	8007e78 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d903      	bls.n	8007e80 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e7e:	e0e7      	b.n	8008050 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2200      	movs	r2, #0
 8007e84:	461c      	mov	r4, r3
 8007e86:	4615      	mov	r5, r2
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	022b      	lsls	r3, r5, #8
 8007e92:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e96:	0222      	lsls	r2, r4, #8
 8007e98:	68f9      	ldr	r1, [r7, #12]
 8007e9a:	6849      	ldr	r1, [r1, #4]
 8007e9c:	0849      	lsrs	r1, r1, #1
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	4688      	mov	r8, r1
 8007ea2:	4681      	mov	r9, r0
 8007ea4:	eb12 0a08 	adds.w	sl, r2, r8
 8007ea8:	eb43 0b09 	adc.w	fp, r3, r9
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eba:	4650      	mov	r0, sl
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	f7f8 f989 	bl	80001d4 <__aeabi_uldivmod>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed0:	d308      	bcc.n	8007ee4 <UART_SetConfig+0x380>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed8:	d204      	bcs.n	8007ee4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	e0b5      	b.n	8008050 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007eea:	e0b1      	b.n	8008050 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef4:	d15d      	bne.n	8007fb2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8007ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d827      	bhi.n	8007f4e <UART_SetConfig+0x3ea>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <UART_SetConfig+0x3a0>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f4f 	.word	0x08007f4f
 8007f14:	08007f3f 	.word	0x08007f3f
 8007f18:	08007f4f 	.word	0x08007f4f
 8007f1c:	08007f4f 	.word	0x08007f4f
 8007f20:	08007f4f 	.word	0x08007f4f
 8007f24:	08007f47 	.word	0x08007f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f28:	f7fe f942 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 8007f2c:	61f8      	str	r0, [r7, #28]
        break;
 8007f2e:	e014      	b.n	8007f5a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f30:	f7fe f954 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 8007f34:	61f8      	str	r0, [r7, #28]
        break;
 8007f36:	e010      	b.n	8007f5a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f38:	4b4c      	ldr	r3, [pc, #304]	; (800806c <UART_SetConfig+0x508>)
 8007f3a:	61fb      	str	r3, [r7, #28]
        break;
 8007f3c:	e00d      	b.n	8007f5a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f3e:	f7fe f89f 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007f42:	61f8      	str	r0, [r7, #28]
        break;
 8007f44:	e009      	b.n	8007f5a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f4a:	61fb      	str	r3, [r7, #28]
        break;
 8007f4c:	e005      	b.n	8007f5a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d077      	beq.n	8008050 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	005a      	lsls	r2, r3, #1
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	441a      	add	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b0f      	cmp	r3, #15
 8007f7a:	d916      	bls.n	8007faa <UART_SetConfig+0x446>
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f82:	d212      	bcs.n	8007faa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f023 030f 	bic.w	r3, r3, #15
 8007f8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	8afb      	ldrh	r3, [r7, #22]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	8afa      	ldrh	r2, [r7, #22]
 8007fa6:	60da      	str	r2, [r3, #12]
 8007fa8:	e052      	b.n	8008050 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fb0:	e04e      	b.n	8008050 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d827      	bhi.n	800800a <UART_SetConfig+0x4a6>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x45c>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	08007ffb 	.word	0x08007ffb
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
 8007fe0:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fe f8e4 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 8007fe8:	61f8      	str	r0, [r7, #28]
        break;
 8007fea:	e014      	b.n	8008016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fec:	f7fe f8f6 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 8007ff0:	61f8      	str	r0, [r7, #28]
        break;
 8007ff2:	e010      	b.n	8008016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <UART_SetConfig+0x508>)
 8007ff6:	61fb      	str	r3, [r7, #28]
        break;
 8007ff8:	e00d      	b.n	8008016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fe f841 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8007ffe:	61f8      	str	r0, [r7, #28]
        break;
 8008000:	e009      	b.n	8008016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	61fb      	str	r3, [r7, #28]
        break;
 8008008:	e005      	b.n	8008016 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008014:	bf00      	nop
    }

    if (pclk != 0U)
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d019      	beq.n	8008050 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	085a      	lsrs	r2, r3, #1
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	2b0f      	cmp	r3, #15
 8008034:	d909      	bls.n	800804a <UART_SetConfig+0x4e6>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803c:	d205      	bcs.n	800804a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60da      	str	r2, [r3, #12]
 8008048:	e002      	b.n	8008050 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800805c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008060:	4618      	mov	r0, r3
 8008062:	3728      	adds	r7, #40	; 0x28
 8008064:	46bd      	mov	sp, r7
 8008066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806a:	bf00      	nop
 800806c:	00f42400 	.word	0x00f42400

08008070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01a      	beq.n	8008186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800816e:	d10a      	bne.n	8008186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081c4:	f7f9 ff5e 	bl	8002084 <HAL_GetTick>
 80081c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d10e      	bne.n	80081f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f82d 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e023      	b.n	800823e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b04      	cmp	r3, #4
 8008202:	d10e      	bne.n	8008222 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f817 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e00d      	b.n	800823e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2220      	movs	r2, #32
 800822c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b09c      	sub	sp, #112	; 0x70
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008256:	e0a5      	b.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	f000 80a1 	beq.w	80083a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008262:	f7f9 ff0f 	bl	8002084 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800826e:	429a      	cmp	r2, r3
 8008270:	d302      	bcc.n	8008278 <UART_WaitOnFlagUntilTimeout+0x32>
 8008272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008274:	2b00      	cmp	r3, #0
 8008276:	d13e      	bne.n	80082f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800828c:	667b      	str	r3, [r7, #100]	; 0x64
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008298:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800829c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e6      	bne.n	8008278 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	663b      	str	r3, [r7, #96]	; 0x60
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80082cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e067      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d04f      	beq.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008312:	d147      	bne.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
 800833e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e6      	bne.n	800831e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	613b      	str	r3, [r7, #16]
   return(result);
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	66bb      	str	r3, [r7, #104]	; 0x68
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008370:	623a      	str	r2, [r7, #32]
 8008372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	69f9      	ldr	r1, [r7, #28]
 8008376:	6a3a      	ldr	r2, [r7, #32]
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	61bb      	str	r3, [r7, #24]
   return(result);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e5      	bne.n	8008350 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2220      	movs	r2, #32
 800838e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e010      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	69da      	ldr	r2, [r3, #28]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4013      	ands	r3, r2
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	429a      	cmp	r2, r3
 80083c0:	f43f af4a 	beq.w	8008258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3770      	adds	r7, #112	; 0x70
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b096      	sub	sp, #88	; 0x58
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2222      	movs	r2, #34	; 0x22
 80083f8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02b      	beq.n	800845a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	4a42      	ldr	r2, [pc, #264]	; (8008510 <UART_Start_Receive_DMA+0x140>)
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840e:	4a41      	ldr	r2, [pc, #260]	; (8008514 <UART_Start_Receive_DMA+0x144>)
 8008410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008416:	4a40      	ldr	r2, [pc, #256]	; (8008518 <UART_Start_Receive_DMA+0x148>)
 8008418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	2200      	movs	r2, #0
 8008420:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3324      	adds	r3, #36	; 0x24
 800842c:	4619      	mov	r1, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	461a      	mov	r2, r3
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	f7fa fb6f 	bl	8002b18 <HAL_DMA_Start_IT>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2210      	movs	r2, #16
 8008444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e055      	b.n	8008506 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d018      	beq.n	800849c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800847e:	657b      	str	r3, [r7, #84]	; 0x54
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008488:	64bb      	str	r3, [r7, #72]	; 0x48
 800848a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800848e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3308      	adds	r3, #8
 80084a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	653b      	str	r3, [r7, #80]	; 0x50
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3308      	adds	r3, #8
 80084ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084bc:	637a      	str	r2, [r7, #52]	; 0x34
 80084be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e5      	bne.n	800849c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3308      	adds	r3, #8
 80084d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	613b      	str	r3, [r7, #16]
   return(result);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084f0:	623a      	str	r2, [r7, #32]
 80084f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	6a3a      	ldr	r2, [r7, #32]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e5      	bne.n	80084d0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3758      	adds	r7, #88	; 0x58
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	0800862f 	.word	0x0800862f
 8008514:	08008753 	.word	0x08008753
 8008518:	0800878b 	.word	0x0800878b

0800851c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b089      	sub	sp, #36	; 0x24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	60bb      	str	r3, [r7, #8]
   return(result);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6979      	ldr	r1, [r7, #20]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	613b      	str	r3, [r7, #16]
   return(result);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e6      	bne.n	8008524 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800855c:	bf00      	nop
 800855e:	3724      	adds	r7, #36	; 0x24
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b095      	sub	sp, #84	; 0x54
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800858e:	643b      	str	r3, [r7, #64]	; 0x40
 8008590:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e6      	bne.n	8008570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f023 0301 	bic.w	r3, r3, #1
 80085b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3308      	adds	r3, #8
 80085c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e5      	bne.n	80085a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d118      	bne.n	8008610 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	647b      	str	r3, [r7, #68]	; 0x44
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6979      	ldr	r1, [r7, #20]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	613b      	str	r3, [r7, #16]
   return(result);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008622:	bf00      	nop
 8008624:	3754      	adds	r7, #84	; 0x54
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b09c      	sub	sp, #112	; 0x70
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d170      	bne.n	800872c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800864a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864c:	2200      	movs	r2, #0
 800864e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008666:	66bb      	str	r3, [r7, #104]	; 0x68
 8008668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008670:	65bb      	str	r3, [r7, #88]	; 0x58
 8008672:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800867e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	667b      	str	r3, [r7, #100]	; 0x64
 800869c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086a4:	647a      	str	r2, [r7, #68]	; 0x44
 80086a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e5      	bne.n	8008684 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	623b      	str	r3, [r7, #32]
   return(result);
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ce:	663b      	str	r3, [r7, #96]	; 0x60
 80086d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3308      	adds	r3, #8
 80086d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086d8:	633a      	str	r2, [r7, #48]	; 0x30
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e5      	bne.n	80086b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ee:	2220      	movs	r2, #32
 80086f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d118      	bne.n	800872c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	60fb      	str	r3, [r7, #12]
   return(result);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0310 	bic.w	r3, r3, #16
 800870e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	69b9      	ldr	r1, [r7, #24]
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	617b      	str	r3, [r7, #20]
   return(result);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e6      	bne.n	80086fa <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008730:	2b01      	cmp	r3, #1
 8008732:	d107      	bne.n	8008744 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800873a:	4619      	mov	r1, r3
 800873c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800873e:	f7f8 f9ed 	bl	8000b1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008742:	e002      	b.n	800874a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8008744:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008746:	f7ff f9ef 	bl	8007b28 <HAL_UART_RxCpltCallback>
}
 800874a:	bf00      	nop
 800874c:	3770      	adds	r7, #112	; 0x70
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008764:	2b01      	cmp	r3, #1
 8008766:	d109      	bne.n	800877c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	b29b      	uxth	r3, r3
 8008772:	4619      	mov	r1, r3
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7f8 f9d1 	bl	8000b1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800877a:	e002      	b.n	8008782 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff f9dd 	bl	8007b3c <HAL_UART_RxHalfCpltCallback>
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800879c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d109      	bne.n	80087c6 <UART_DMAError+0x3c>
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	2b21      	cmp	r3, #33	; 0x21
 80087b6:	d106      	bne.n	80087c6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80087c0:	6978      	ldr	r0, [r7, #20]
 80087c2:	f7ff feab 	bl	800851c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	d109      	bne.n	80087e8 <UART_DMAError+0x5e>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b22      	cmp	r3, #34	; 0x22
 80087d8:	d106      	bne.n	80087e8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f7ff fec0 	bl	8008568 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ee:	f043 0210 	orr.w	r2, r3, #16
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087f8:	6978      	ldr	r0, [r7, #20]
 80087fa:	f7ff f9a9 	bl	8007b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fe:	bf00      	nop
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff f993 	bl	8007b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b088      	sub	sp, #32
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	60bb      	str	r3, [r7, #8]
   return(result);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884e:	61fb      	str	r3, [r7, #28]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6979      	ldr	r1, [r7, #20]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f94b 	bl	8007b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800887e:	bf00      	nop
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b08c      	sub	sp, #48	; 0x30
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4613      	mov	r3, r2
 80088a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d14a      	bne.n	8008946 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e043      	b.n	8008948 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e03c      	b.n	8008948 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	461a      	mov	r2, r3
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fd74 	bl	80083d0 <UART_Start_Receive_DMA>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80088ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d124      	bne.n	8008940 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d11d      	bne.n	800893a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2210      	movs	r2, #16
 8008904:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	617b      	str	r3, [r7, #20]
   return(result);
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f043 0310 	orr.w	r3, r3, #16
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
 8008926:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6a39      	ldr	r1, [r7, #32]
 800892a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	61fb      	str	r3, [r7, #28]
   return(result);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8008938:	e002      	b.n	8008940 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008944:	e000      	b.n	8008948 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8008946:	2302      	movs	r3, #2
  }
}
 8008948:	4618      	mov	r0, r3
 800894a:	3730      	adds	r7, #48	; 0x30
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008950:	b084      	sub	sp, #16
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	f107 0014 	add.w	r0, r7, #20
 800895e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	b004      	add	sp, #16
 8008970:	4770      	bx	lr

08008972 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008972:	b480      	push	{r7}
 8008974:	b085      	sub	sp, #20
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008982:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80089ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	43db      	mvns	r3, r3
 80089bc:	b29b      	uxth	r3, r3
 80089be:	4013      	ands	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80089f0:	b084      	sub	sp, #16
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	f107 0014 	add.w	r0, r7, #20
 80089fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	b004      	add	sp, #16
 8008a30:	4770      	bx	lr
	...

08008a34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b09d      	sub	sp, #116	; 0x74
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	78db      	ldrb	r3, [r3, #3]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d81f      	bhi.n	8008aa6 <USB_ActivateEndpoint+0x72>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USB_ActivateEndpoint+0x38>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008a7d 	.word	0x08008a7d
 8008a70:	08008a99 	.word	0x08008a99
 8008a74:	08008aaf 	.word	0x08008aaf
 8008a78:	08008a8b 	.word	0x08008a8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008a88:	e012      	b.n	8008ab0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008a92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008a96:	e00b      	b.n	8008ab0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008aa0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008aa4:	e004      	b.n	8008ab0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008aac:	e000      	b.n	8008ab0 <USB_ActivateEndpoint+0x7c>
      break;
 8008aae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	441a      	add	r2, r3
 8008aba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	b21a      	sxth	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	b21b      	sxth	r3, r3
 8008af2:	4313      	orrs	r3, r2
 8008af4:	b21b      	sxth	r3, r3
 8008af6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	441a      	add	r2, r3
 8008b04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	7b1b      	ldrb	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f040 8149 	bne.w	8008db8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8084 	beq.w	8008c38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	4413      	add	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	00da      	lsls	r2, r3, #3
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	88db      	ldrh	r3, [r3, #6]
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	827b      	strh	r3, [r7, #18]
 8008b72:	8a7b      	ldrh	r3, [r7, #18]
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01b      	beq.n	8008bb4 <USB_ActivateEndpoint+0x180>
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b92:	823b      	strh	r3, [r7, #16]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	8a3b      	ldrh	r3, [r7, #16]
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	78db      	ldrb	r3, [r3, #3]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d020      	beq.n	8008bfe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd2:	81bb      	strh	r3, [r7, #12]
 8008bd4:	89bb      	ldrh	r3, [r7, #12]
 8008bd6:	f083 0320 	eor.w	r3, r3, #32
 8008bda:	81bb      	strh	r3, [r7, #12]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	89bb      	ldrh	r3, [r7, #12]
 8008be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	8013      	strh	r3, [r2, #0]
 8008bfc:	e2a6      	b.n	800914c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c14:	81fb      	strh	r3, [r7, #14]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	441a      	add	r2, r3
 8008c20:	89fb      	ldrh	r3, [r7, #14]
 8008c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	8013      	strh	r3, [r2, #0]
 8008c36:	e289      	b.n	800914c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	4413      	add	r3, r2
 8008c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	00da      	lsls	r2, r3, #3
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	4413      	add	r3, r2
 8008c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	88db      	ldrh	r3, [r3, #6]
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	4413      	add	r3, r2
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	00da      	lsls	r2, r3, #3
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	4413      	add	r3, r2
 8008c8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	2b3e      	cmp	r3, #62	; 0x3e
 8008c96:	d918      	bls.n	8008cca <USB_ActivateEndpoint+0x296>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	095b      	lsrs	r3, r3, #5
 8008c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d102      	bne.n	8008cb2 <USB_ActivateEndpoint+0x27e>
 8008cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	029b      	lsls	r3, r3, #10
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	e029      	b.n	8008d1e <USB_ActivateEndpoint+0x2ea>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d112      	bne.n	8008cf8 <USB_ActivateEndpoint+0x2c4>
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	801a      	strh	r2, [r3, #0]
 8008cf6:	e012      	b.n	8008d1e <USB_ActivateEndpoint+0x2ea>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	085b      	lsrs	r3, r3, #1
 8008cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <USB_ActivateEndpoint+0x2de>
 8008d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d0e:	3301      	adds	r3, #1
 8008d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	029b      	lsls	r3, r3, #10
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01b      	beq.n	8008d6e <USB_ActivateEndpoint+0x33a>
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4c:	843b      	strh	r3, [r7, #32]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	8c3b      	ldrh	r3, [r7, #32]
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d84:	83fb      	strh	r3, [r7, #30]
 8008d86:	8bfb      	ldrh	r3, [r7, #30]
 8008d88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d8c:	83fb      	strh	r3, [r7, #30]
 8008d8e:	8bfb      	ldrh	r3, [r7, #30]
 8008d90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d94:	83fb      	strh	r3, [r7, #30]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	441a      	add	r2, r3
 8008da0:	8bfb      	ldrh	r3, [r7, #30]
 8008da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	8013      	strh	r3, [r2, #0]
 8008db6:	e1c9      	b.n	800914c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	78db      	ldrb	r3, [r3, #3]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d11e      	bne.n	8008dfe <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	441a      	add	r2, r3
 8008de4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	8013      	strh	r3, [r2, #0]
 8008dfc:	e01d      	b.n	8008e3a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	441a      	add	r2, r3
 8008e22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e4a:	4413      	add	r3, r2
 8008e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	00da      	lsls	r2, r3, #3
 8008e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	891b      	ldrh	r3, [r3, #8]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e6c:	801a      	strh	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	657b      	str	r3, [r7, #84]	; 0x54
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e7e:	4413      	add	r3, r2
 8008e80:	657b      	str	r3, [r7, #84]	; 0x54
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	00da      	lsls	r2, r3, #3
 8008e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e90:	653b      	str	r3, [r7, #80]	; 0x50
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	895b      	ldrh	r3, [r3, #10]
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f040 8093 	bne.w	8008fd2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008ebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01b      	beq.n	8008f00 <USB_ActivateEndpoint+0x4cc>
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ede:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	441a      	add	r2, r3
 8008eea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008f0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01b      	beq.n	8008f50 <USB_ActivateEndpoint+0x51c>
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	441a      	add	r2, r3
 8008f3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	873b      	strh	r3, [r7, #56]	; 0x38
 8008f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f6e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008f70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008f72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f76:	873b      	strh	r3, [r7, #56]	; 0x38
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	441a      	add	r2, r3
 8008f82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fae:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	8013      	strh	r3, [r2, #0]
 8008fd0:	e0bc      	b.n	800914c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01d      	beq.n	800902a <USB_ActivateEndpoint+0x5f6>
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009004:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	441a      	add	r2, r3
 8009012:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800901e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009026:	b29b      	uxth	r3, r3
 8009028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800903a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009042:	2b00      	cmp	r3, #0
 8009044:	d01d      	beq.n	8009082 <USB_ActivateEndpoint+0x64e>
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	b29b      	uxth	r3, r3
 8009054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	441a      	add	r2, r3
 800906a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800906e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800907a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	78db      	ldrb	r3, [r3, #3]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d024      	beq.n	80090d4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800909c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80090a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80090a8:	f083 0320 	eor.w	r3, r3, #32
 80090ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	441a      	add	r2, r3
 80090ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80090be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	8013      	strh	r3, [r2, #0]
 80090d2:	e01d      	b.n	8009110 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	441a      	add	r2, r3
 80090f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80090fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800910c:	b29b      	uxth	r3, r3
 800910e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29b      	uxth	r3, r3
 800911e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009126:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	441a      	add	r2, r3
 8009134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800913c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009148:	b29b      	uxth	r3, r3
 800914a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800914c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009150:	4618      	mov	r0, r3
 8009152:	3774      	adds	r7, #116	; 0x74
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800915c:	b480      	push	{r7}
 800915e:	b08d      	sub	sp, #52	; 0x34
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	7b1b      	ldrb	r3, [r3, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f040 808e 	bne.w	800928c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d044      	beq.n	8009202 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	81bb      	strh	r3, [r7, #12]
 8009186:	89bb      	ldrh	r3, [r7, #12]
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01b      	beq.n	80091c8 <USB_DeactivateEndpoint+0x6c>
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a6:	817b      	strh	r3, [r7, #10]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	441a      	add	r2, r3
 80091b2:	897b      	ldrh	r3, [r7, #10]
 80091b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091de:	813b      	strh	r3, [r7, #8]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	441a      	add	r2, r3
 80091ea:	893b      	ldrh	r3, [r7, #8]
 80091ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	8013      	strh	r3, [r2, #0]
 8009200:	e192      	b.n	8009528 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	827b      	strh	r3, [r7, #18]
 8009210:	8a7b      	ldrh	r3, [r7, #18]
 8009212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d01b      	beq.n	8009252 <USB_DeactivateEndpoint+0xf6>
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800922c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009230:	823b      	strh	r3, [r7, #16]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	441a      	add	r2, r3
 800923c:	8a3b      	ldrh	r3, [r7, #16]
 800923e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800924a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924e:	b29b      	uxth	r3, r3
 8009250:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009268:	81fb      	strh	r3, [r7, #14]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	441a      	add	r2, r3
 8009274:	89fb      	ldrh	r3, [r7, #14]
 8009276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800927a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800927e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009286:	b29b      	uxth	r3, r3
 8009288:	8013      	strh	r3, [r2, #0]
 800928a:	e14d      	b.n	8009528 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 80a5 	bne.w	80093e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	843b      	strh	r3, [r7, #32]
 80092a4:	8c3b      	ldrh	r3, [r7, #32]
 80092a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01b      	beq.n	80092e6 <USB_DeactivateEndpoint+0x18a>
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c4:	83fb      	strh	r3, [r7, #30]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	441a      	add	r2, r3
 80092d0:	8bfb      	ldrh	r3, [r7, #30]
 80092d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	83bb      	strh	r3, [r7, #28]
 80092f4:	8bbb      	ldrh	r3, [r7, #28]
 80092f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01b      	beq.n	8009336 <USB_DeactivateEndpoint+0x1da>
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009314:	837b      	strh	r3, [r7, #26]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	441a      	add	r2, r3
 8009320:	8b7b      	ldrh	r3, [r7, #26]
 8009322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800932a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800932e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009332:	b29b      	uxth	r3, r3
 8009334:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934c:	833b      	strh	r3, [r7, #24]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	441a      	add	r2, r3
 8009358:	8b3b      	ldrh	r3, [r7, #24]
 800935a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800935e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009366:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800936a:	b29b      	uxth	r3, r3
 800936c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009384:	82fb      	strh	r3, [r7, #22]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	441a      	add	r2, r3
 8009390:	8afb      	ldrh	r3, [r7, #22]
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800939a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800939e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093bc:	82bb      	strh	r3, [r7, #20]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	441a      	add	r2, r3
 80093c8:	8abb      	ldrh	r3, [r7, #20]
 80093ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093da:	b29b      	uxth	r3, r3
 80093dc:	8013      	strh	r3, [r2, #0]
 80093de:	e0a3      	b.n	8009528 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80093ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01b      	beq.n	8009430 <USB_DeactivateEndpoint+0x2d4>
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	441a      	add	r2, r3
 800941a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800941c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942c:	b29b      	uxth	r3, r3
 800942e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800943e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01b      	beq.n	8009480 <USB_DeactivateEndpoint+0x324>
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	441a      	add	r2, r3
 800946a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800946c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800947c:	b29b      	uxth	r3, r3
 800947e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009496:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	441a      	add	r2, r3
 80094a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	441a      	add	r2, r3
 80094da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009506:	847b      	strh	r3, [r7, #34]	; 0x22
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	441a      	add	r2, r3
 8009512:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800951c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009524:	b29b      	uxth	r3, r3
 8009526:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3734      	adds	r7, #52	; 0x34
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b0c2      	sub	sp, #264	; 0x108
 800953a:	af00      	add	r7, sp, #0
 800953c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009544:	6018      	str	r0, [r3, #0]
 8009546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b01      	cmp	r3, #1
 800955e:	f040 867b 	bne.w	800a258 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699a      	ldr	r2, [r3, #24]
 800956e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	429a      	cmp	r2, r3
 800957c:	d908      	bls.n	8009590 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800957e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800958e:	e007      	b.n	80095a0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80095a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	7b1b      	ldrb	r3, [r3, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d13a      	bne.n	8009626 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80095b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6959      	ldr	r1, [r3, #20]
 80095bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	88da      	ldrh	r2, [r3, #6]
 80095c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80095d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80095d6:	6800      	ldr	r0, [r0, #0]
 80095d8:	f001 fc55 	bl	800ae86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	613b      	str	r3, [r7, #16]
 80095e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	461a      	mov	r2, r3
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	4413      	add	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
 8009600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	00da      	lsls	r2, r3, #3
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	4413      	add	r3, r2
 8009612:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	801a      	strh	r2, [r3, #0]
 8009622:	f000 bde3 	b.w	800a1ec <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	78db      	ldrb	r3, [r3, #3]
 8009632:	2b02      	cmp	r3, #2
 8009634:	f040 843a 	bne.w	8009eac <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6a1a      	ldr	r2, [r3, #32]
 8009644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	429a      	cmp	r2, r3
 8009652:	f240 83b7 	bls.w	8009dc4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	441a      	add	r2, r3
 800969a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800969e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80096aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80096b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6a1a      	ldr	r2, [r3, #32]
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	1ad2      	subs	r2, r2, r3
 80096c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 81b3 	beq.w	8009a5e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	633b      	str	r3, [r7, #48]	; 0x30
 8009704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d16d      	bne.n	80097f0 <USB_EPStartXfer+0x2ba>
 8009714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800972e:	b29b      	uxth	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	4413      	add	r3, r2
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	00da      	lsls	r2, r3, #3
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	4413      	add	r3, r2
 800974a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009754:	2b3e      	cmp	r3, #62	; 0x3e
 8009756:	d91c      	bls.n	8009792 <USB_EPStartXfer+0x25c>
 8009758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975c:	095b      	lsrs	r3, r3, #5
 800975e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009766:	f003 031f 	and.w	r3, r3, #31
 800976a:	2b00      	cmp	r3, #0
 800976c:	d104      	bne.n	8009778 <USB_EPStartXfer+0x242>
 800976e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009772:	3b01      	subs	r3, #1
 8009774:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009778:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800977c:	b29b      	uxth	r3, r3
 800977e:	029b      	lsls	r3, r3, #10
 8009780:	b29b      	uxth	r3, r3
 8009782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978a:	b29a      	uxth	r2, r3
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	e053      	b.n	800983a <USB_EPStartXfer+0x304>
 8009792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009796:	2b00      	cmp	r3, #0
 8009798:	d112      	bne.n	80097c0 <USB_EPStartXfer+0x28a>
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	e03c      	b.n	800983a <USB_EPStartXfer+0x304>
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d004      	beq.n	80097e0 <USB_EPStartXfer+0x2aa>
 80097d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097da:	3301      	adds	r3, #1
 80097dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	029b      	lsls	r3, r3, #10
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	e024      	b.n	800983a <USB_EPStartXfer+0x304>
 80097f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	785b      	ldrb	r3, [r3, #1]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d11c      	bne.n	800983a <USB_EPStartXfer+0x304>
 8009800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980e:	b29b      	uxth	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	4413      	add	r3, r2
 8009816:	633b      	str	r3, [r7, #48]	; 0x30
 8009818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	00da      	lsls	r2, r3, #3
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	4413      	add	r3, r2
 800982a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009834:	b29a      	uxth	r2, r3
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	895b      	ldrh	r3, [r3, #10]
 8009846:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800984a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6959      	ldr	r1, [r3, #20]
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985a:	b29b      	uxth	r3, r3
 800985c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009860:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009864:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009868:	6800      	ldr	r0, [r0, #0]
 800986a:	f001 fb0c 	bl	800ae86 <USB_WritePMA>
            ep->xfer_buff += len;
 800986e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987e:	441a      	add	r2, r3
 8009880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800988c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6a1a      	ldr	r2, [r3, #32]
 8009898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d90f      	bls.n	80098c8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80098a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6a1a      	ldr	r2, [r3, #32]
 80098b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	621a      	str	r2, [r3, #32]
 80098c6:	e00e      	b.n	80098e6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80098c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80098d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2200      	movs	r2, #0
 80098e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d16d      	bne.n	80099d2 <USB_EPStartXfer+0x49c>
 80098f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	61bb      	str	r3, [r7, #24]
 8009902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	4413      	add	r3, r2
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	00da      	lsls	r2, r3, #3
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	4413      	add	r3, r2
 800992c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009936:	2b3e      	cmp	r3, #62	; 0x3e
 8009938:	d91c      	bls.n	8009974 <USB_EPStartXfer+0x43e>
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009948:	f003 031f 	and.w	r3, r3, #31
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <USB_EPStartXfer+0x424>
 8009950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009954:	3b01      	subs	r3, #1
 8009956:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800995a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800995e:	b29b      	uxth	r3, r3
 8009960:	029b      	lsls	r3, r3, #10
 8009962:	b29b      	uxth	r3, r3
 8009964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800996c:	b29a      	uxth	r2, r3
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	801a      	strh	r2, [r3, #0]
 8009972:	e059      	b.n	8009a28 <USB_EPStartXfer+0x4f2>
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009978:	2b00      	cmp	r3, #0
 800997a:	d112      	bne.n	80099a2 <USB_EPStartXfer+0x46c>
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	b29b      	uxth	r3, r3
 8009982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009986:	b29a      	uxth	r2, r3
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999a:	b29a      	uxth	r2, r3
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	e042      	b.n	8009a28 <USB_EPStartXfer+0x4f2>
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <USB_EPStartXfer+0x48c>
 80099b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099bc:	3301      	adds	r3, #1
 80099be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	029b      	lsls	r3, r3, #10
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	e02a      	b.n	8009a28 <USB_EPStartXfer+0x4f2>
 80099d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d122      	bne.n	8009a28 <USB_EPStartXfer+0x4f2>
 80099e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	623b      	str	r3, [r7, #32]
 80099ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	461a      	mov	r2, r3
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	4413      	add	r3, r2
 8009a04:	623b      	str	r3, [r7, #32]
 8009a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	00da      	lsls	r2, r3, #3
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	4413      	add	r3, r2
 8009a18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	891b      	ldrh	r3, [r3, #8]
 8009a34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6959      	ldr	r1, [r3, #20]
 8009a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a4e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a52:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a56:	6800      	ldr	r0, [r0, #0]
 8009a58:	f001 fa15 	bl	800ae86 <USB_WritePMA>
 8009a5c:	e3c6      	b.n	800a1ec <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	785b      	ldrb	r3, [r3, #1]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d16d      	bne.n	8009b4a <USB_EPStartXfer+0x614>
 8009a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8e:	4413      	add	r3, r2
 8009a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	00da      	lsls	r2, r3, #3
 8009aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8009aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aae:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab0:	d91c      	bls.n	8009aec <USB_EPStartXfer+0x5b6>
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac0:	f003 031f 	and.w	r3, r3, #31
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <USB_EPStartXfer+0x59c>
 8009ac8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009acc:	3b01      	subs	r3, #1
 8009ace:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	029b      	lsls	r3, r3, #10
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae8:	801a      	strh	r2, [r3, #0]
 8009aea:	e059      	b.n	8009ba0 <USB_EPStartXfer+0x66a>
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d112      	bne.n	8009b1a <USB_EPStartXfer+0x5e4>
 8009af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b02:	801a      	strh	r2, [r3, #0]
 8009b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e042      	b.n	8009ba0 <USB_EPStartXfer+0x66a>
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1e:	085b      	lsrs	r3, r3, #1
 8009b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <USB_EPStartXfer+0x604>
 8009b30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b34:	3301      	adds	r3, #1
 8009b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b46:	801a      	strh	r2, [r3, #0]
 8009b48:	e02a      	b.n	8009ba0 <USB_EPStartXfer+0x66a>
 8009b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d122      	bne.n	8009ba0 <USB_EPStartXfer+0x66a>
 8009b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	653b      	str	r3, [r7, #80]	; 0x50
 8009b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b7a:	4413      	add	r3, r2
 8009b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8009b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	00da      	lsls	r2, r3, #3
 8009b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b8e:	4413      	add	r3, r2
 8009b90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	891b      	ldrh	r3, [r3, #8]
 8009bac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6959      	ldr	r1, [r3, #20]
 8009bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009bc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009bca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bce:	6800      	ldr	r0, [r0, #0]
 8009bd0:	f001 f959 	bl	800ae86 <USB_WritePMA>
            ep->xfer_buff += len;
 8009bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	695a      	ldr	r2, [r3, #20]
 8009be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be4:	441a      	add	r2, r3
 8009be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6a1a      	ldr	r2, [r3, #32]
 8009bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d90f      	bls.n	8009c2e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6a1a      	ldr	r2, [r3, #32]
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	621a      	str	r2, [r3, #32]
 8009c2c:	e00e      	b.n	8009c4c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	643b      	str	r3, [r7, #64]	; 0x40
 8009c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d16d      	bne.n	8009d44 <USB_EPStartXfer+0x80e>
 8009c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	461a      	mov	r2, r3
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	4413      	add	r3, r2
 8009c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	00da      	lsls	r2, r3, #3
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8009caa:	d91c      	bls.n	8009ce6 <USB_EPStartXfer+0x7b0>
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb0:	095b      	lsrs	r3, r3, #5
 8009cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cba:	f003 031f 	and.w	r3, r3, #31
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d104      	bne.n	8009ccc <USB_EPStartXfer+0x796>
 8009cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	029b      	lsls	r3, r3, #10
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	801a      	strh	r2, [r3, #0]
 8009ce4:	e053      	b.n	8009d8e <USB_EPStartXfer+0x858>
 8009ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d112      	bne.n	8009d14 <USB_EPStartXfer+0x7de>
 8009cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	e03c      	b.n	8009d8e <USB_EPStartXfer+0x858>
 8009d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d18:	085b      	lsrs	r3, r3, #1
 8009d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <USB_EPStartXfer+0x7fe>
 8009d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	e024      	b.n	8009d8e <USB_EPStartXfer+0x858>
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d11c      	bne.n	8009d8e <USB_EPStartXfer+0x858>
 8009d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	461a      	mov	r2, r3
 8009d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d68:	4413      	add	r3, r2
 8009d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	00da      	lsls	r2, r3, #3
 8009d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	895b      	ldrh	r3, [r3, #10]
 8009d9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6959      	ldr	r1, [r3, #20]
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009db4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009db8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f001 f862 	bl	800ae86 <USB_WritePMA>
 8009dc2:	e213      	b.n	800a1ec <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	441a      	add	r2, r3
 8009e18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e50:	4413      	add	r3, r2
 8009e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	00da      	lsls	r2, r3, #3
 8009e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e64:	4413      	add	r3, r2
 8009e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	891b      	ldrh	r3, [r3, #8]
 8009e82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6959      	ldr	r1, [r3, #20]
 8009e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ea0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ea4:	6800      	ldr	r0, [r0, #0]
 8009ea6:	f000 ffee 	bl	800ae86 <USB_WritePMA>
 8009eaa:	e19f      	b.n	800a1ec <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a1a      	ldr	r2, [r3, #32]
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ebc:	1ad2      	subs	r2, r2, r3
 8009ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 80bc 	beq.w	800a06a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	673b      	str	r3, [r7, #112]	; 0x70
 8009efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	785b      	ldrb	r3, [r3, #1]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d16d      	bne.n	8009fea <USB_EPStartXfer+0xab4>
 8009f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f2e:	4413      	add	r3, r2
 8009f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	00da      	lsls	r2, r3, #3
 8009f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f42:	4413      	add	r3, r2
 8009f44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f48:	667b      	str	r3, [r7, #100]	; 0x64
 8009f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f50:	d91c      	bls.n	8009f8c <USB_EPStartXfer+0xa56>
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f60:	f003 031f 	and.w	r3, r3, #31
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <USB_EPStartXfer+0xa3c>
 8009f68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	029b      	lsls	r3, r3, #10
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e053      	b.n	800a034 <USB_EPStartXfer+0xafe>
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d112      	bne.n	8009fba <USB_EPStartXfer+0xa84>
 8009f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fa2:	801a      	strh	r2, [r3, #0]
 8009fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb6:	801a      	strh	r2, [r3, #0]
 8009fb8:	e03c      	b.n	800a034 <USB_EPStartXfer+0xafe>
 8009fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbe:	085b      	lsrs	r3, r3, #1
 8009fc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d004      	beq.n	8009fda <USB_EPStartXfer+0xaa4>
 8009fd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	029b      	lsls	r3, r3, #10
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fe6:	801a      	strh	r2, [r3, #0]
 8009fe8:	e024      	b.n	800a034 <USB_EPStartXfer+0xafe>
 8009fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d11c      	bne.n	800a034 <USB_EPStartXfer+0xafe>
 8009ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a008:	b29b      	uxth	r3, r3
 800a00a:	461a      	mov	r2, r3
 800a00c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a00e:	4413      	add	r3, r2
 800a010:	673b      	str	r3, [r7, #112]	; 0x70
 800a012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	00da      	lsls	r2, r3, #3
 800a020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a022:	4413      	add	r3, r2
 800a024:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02e:	b29a      	uxth	r2, r3
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	895b      	ldrh	r3, [r3, #10]
 800a040:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6959      	ldr	r1, [r3, #20]
 800a050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a054:	b29b      	uxth	r3, r3
 800a056:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a05a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a05e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a062:	6800      	ldr	r0, [r0, #0]
 800a064:	f000 ff0f 	bl	800ae86 <USB_WritePMA>
 800a068:	e0c0      	b.n	800a1ec <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	785b      	ldrb	r3, [r3, #1]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d16d      	bne.n	800a156 <USB_EPStartXfer+0xc20>
 800a07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a07e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a094:	b29b      	uxth	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a09a:	4413      	add	r3, r2
 800a09c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	00da      	lsls	r2, r3, #3
 800a0ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a0bc:	d91c      	bls.n	800a0f8 <USB_EPStartXfer+0xbc2>
 800a0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0cc:	f003 031f 	and.w	r3, r3, #31
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <USB_EPStartXfer+0xba8>
 800a0d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	029b      	lsls	r3, r3, #10
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0f4:	801a      	strh	r2, [r3, #0]
 800a0f6:	e05f      	b.n	800a1b8 <USB_EPStartXfer+0xc82>
 800a0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d112      	bne.n	800a126 <USB_EPStartXfer+0xbf0>
 800a100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a10e:	801a      	strh	r2, [r3, #0]
 800a110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a11e:	b29a      	uxth	r2, r3
 800a120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a122:	801a      	strh	r2, [r3, #0]
 800a124:	e048      	b.n	800a1b8 <USB_EPStartXfer+0xc82>
 800a126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <USB_EPStartXfer+0xc10>
 800a13c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a140:	3301      	adds	r3, #1
 800a142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	029b      	lsls	r3, r3, #10
 800a14e:	b29a      	uxth	r2, r3
 800a150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a152:	801a      	strh	r2, [r3, #0]
 800a154:	e030      	b.n	800a1b8 <USB_EPStartXfer+0xc82>
 800a156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a15a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	785b      	ldrb	r3, [r3, #1]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d128      	bne.n	800a1b8 <USB_EPStartXfer+0xc82>
 800a166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a182:	b29b      	uxth	r3, r3
 800a184:	461a      	mov	r2, r3
 800a186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a18a:	4413      	add	r3, r2
 800a18c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	00da      	lsls	r2, r3, #3
 800a19e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	891b      	ldrh	r3, [r3, #8]
 800a1c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6959      	ldr	r1, [r3, #20]
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a1de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a1e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a1e6:	6800      	ldr	r0, [r0, #0]
 800a1e8:	f000 fe4d 	bl	800ae86 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a20e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a212:	817b      	strh	r3, [r7, #10]
 800a214:	897b      	ldrh	r3, [r7, #10]
 800a216:	f083 0310 	eor.w	r3, r3, #16
 800a21a:	817b      	strh	r3, [r7, #10]
 800a21c:	897b      	ldrh	r3, [r7, #10]
 800a21e:	f083 0320 	eor.w	r3, r3, #32
 800a222:	817b      	strh	r3, [r7, #10]
 800a224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	441a      	add	r2, r3
 800a23e:	897b      	ldrh	r3, [r7, #10]
 800a240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a250:	b29b      	uxth	r3, r3
 800a252:	8013      	strh	r3, [r2, #0]
 800a254:	f000 bc9f 	b.w	800ab96 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	7b1b      	ldrb	r3, [r3, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f040 80ae 	bne.w	800a3c6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699a      	ldr	r2, [r3, #24]
 800a276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	429a      	cmp	r2, r3
 800a284:	d917      	bls.n	800a2b6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	699a      	ldr	r2, [r3, #24]
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	619a      	str	r2, [r3, #24]
 800a2b4:	e00e      	b.n	800a2d4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	00da      	lsls	r2, r3, #3
 800a30c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a310:	4413      	add	r3, r2
 800a312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31e:	2b3e      	cmp	r3, #62	; 0x3e
 800a320:	d91d      	bls.n	800a35e <USB_EPStartXfer+0xe28>
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a326:	095b      	lsrs	r3, r3, #5
 800a328:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a330:	f003 031f 	and.w	r3, r3, #31
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <USB_EPStartXfer+0xe0c>
 800a338:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a33c:	3b01      	subs	r3, #1
 800a33e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a346:	b29b      	uxth	r3, r3
 800a348:	029b      	lsls	r3, r3, #10
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a354:	b29a      	uxth	r2, r3
 800a356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a35a:	801a      	strh	r2, [r3, #0]
 800a35c:	e3e1      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a362:	2b00      	cmp	r3, #0
 800a364:	d116      	bne.n	800a394 <USB_EPStartXfer+0xe5e>
 800a366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a372:	b29a      	uxth	r2, r3
 800a374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a378:	801a      	strh	r2, [r3, #0]
 800a37a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a390:	801a      	strh	r2, [r3, #0]
 800a392:	e3c6      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a398:	085b      	lsrs	r3, r3, #1
 800a39a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <USB_EPStartXfer+0xe7e>
 800a3aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	029b      	lsls	r3, r3, #10
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3c2:	801a      	strh	r2, [r3, #0]
 800a3c4:	e3ad      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	78db      	ldrb	r3, [r3, #3]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	f040 8200 	bne.w	800a7d8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 8091 	bne.w	800a50c <USB_EPStartXfer+0xfd6>
 800a3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a406:	b29b      	uxth	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a40e:	4413      	add	r3, r2
 800a410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	00da      	lsls	r2, r3, #3
 800a422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a426:	4413      	add	r3, r2
 800a428:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a42c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b3e      	cmp	r3, #62	; 0x3e
 800a43e:	d925      	bls.n	800a48c <USB_EPStartXfer+0xf56>
 800a440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	095b      	lsrs	r3, r3, #5
 800a44e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 031f 	and.w	r3, r3, #31
 800a462:	2b00      	cmp	r3, #0
 800a464:	d104      	bne.n	800a470 <USB_EPStartXfer+0xf3a>
 800a466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a46a:	3b01      	subs	r3, #1
 800a46c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a474:	b29b      	uxth	r3, r3
 800a476:	029b      	lsls	r3, r3, #10
 800a478:	b29b      	uxth	r3, r3
 800a47a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a47e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a482:	b29a      	uxth	r2, r3
 800a484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	e074      	b.n	800a576 <USB_EPStartXfer+0x1040>
 800a48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d116      	bne.n	800a4ca <USB_EPStartXfer+0xf94>
 800a49c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ae:	801a      	strh	r2, [r3, #0]
 800a4b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	e055      	b.n	800a576 <USB_EPStartXfer+0x1040>
 800a4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <USB_EPStartXfer+0xfc4>
 800a4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	029b      	lsls	r3, r3, #10
 800a502:	b29a      	uxth	r2, r3
 800a504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a508:	801a      	strh	r2, [r3, #0]
 800a50a:	e034      	b.n	800a576 <USB_EPStartXfer+0x1040>
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d12c      	bne.n	800a576 <USB_EPStartXfer+0x1040>
 800a51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a540:	4413      	add	r3, r2
 800a542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	00da      	lsls	r2, r3, #3
 800a554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a558:	4413      	add	r3, r2
 800a55a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a55e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	b29a      	uxth	r2, r3
 800a570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a574:	801a      	strh	r2, [r3, #0]
 800a576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f040 8091 	bne.w	800a6b8 <USB_EPStartXfer+0x1182>
 800a596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	00da      	lsls	r2, r3, #3
 800a5ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a5ea:	d925      	bls.n	800a638 <USB_EPStartXfer+0x1102>
 800a5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	095b      	lsrs	r3, r3, #5
 800a5fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	f003 031f 	and.w	r3, r3, #31
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d104      	bne.n	800a61c <USB_EPStartXfer+0x10e6>
 800a612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a616:	3b01      	subs	r3, #1
 800a618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a620:	b29b      	uxth	r3, r3
 800a622:	029b      	lsls	r3, r3, #10
 800a624:	b29b      	uxth	r3, r3
 800a626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a62a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a62e:	b29a      	uxth	r2, r3
 800a630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a634:	801a      	strh	r2, [r3, #0]
 800a636:	e06d      	b.n	800a714 <USB_EPStartXfer+0x11de>
 800a638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d116      	bne.n	800a676 <USB_EPStartXfer+0x1140>
 800a648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a654:	b29a      	uxth	r2, r3
 800a656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a65a:	801a      	strh	r2, [r3, #0]
 800a65c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	b29b      	uxth	r3, r3
 800a664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	e04e      	b.n	800a714 <USB_EPStartXfer+0x11de>
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	085b      	lsrs	r3, r3, #1
 800a684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <USB_EPStartXfer+0x1170>
 800a69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	029b      	lsls	r3, r3, #10
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	e02d      	b.n	800a714 <USB_EPStartXfer+0x11de>
 800a6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d125      	bne.n	800a714 <USB_EPStartXfer+0x11de>
 800a6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	461a      	mov	r2, r3
 800a6da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6de:	4413      	add	r3, r2
 800a6e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	00da      	lsls	r2, r3, #3
 800a6f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a712:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 81fe 	beq.w	800ab22 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a72a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a746:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a74a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <USB_EPStartXfer+0x1228>
 800a752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10d      	bne.n	800a77a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a75e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a766:	2b00      	cmp	r3, #0
 800a768:	f040 81db 	bne.w	800ab22 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a76c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 81d4 	bne.w	800ab22 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a79c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7a0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	441a      	add	r2, r3
 800a7be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a7c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	8013      	strh	r3, [r2, #0]
 800a7d6:	e1a4      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	78db      	ldrb	r3, [r3, #3]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	f040 819a 	bne.w	800ab1e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699a      	ldr	r2, [r3, #24]
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	429a      	cmp	r2, r3
 800a804:	d917      	bls.n	800a836 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a826:	1ad2      	subs	r2, r2, r3
 800a828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	619a      	str	r2, [r3, #24]
 800a834:	e00e      	b.n	800a854 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2200      	movs	r2, #0
 800a852:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d178      	bne.n	800a956 <USB_EPStartXfer+0x1420>
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a880:	b29b      	uxth	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a888:	4413      	add	r3, r2
 800a88a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	00da      	lsls	r2, r3, #3
 800a89c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a8b0:	d91d      	bls.n	800a8ee <USB_EPStartXfer+0x13b8>
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	095b      	lsrs	r3, r3, #5
 800a8b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c0:	f003 031f 	and.w	r3, r3, #31
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d104      	bne.n	800a8d2 <USB_EPStartXfer+0x139c>
 800a8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a8d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	029b      	lsls	r3, r3, #10
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8ea:	801a      	strh	r2, [r3, #0]
 800a8ec:	e064      	b.n	800a9b8 <USB_EPStartXfer+0x1482>
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d116      	bne.n	800a924 <USB_EPStartXfer+0x13ee>
 800a8f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a902:	b29a      	uxth	r2, r3
 800a904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	b29b      	uxth	r3, r3
 800a912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a920:	801a      	strh	r2, [r3, #0]
 800a922:	e049      	b.n	800a9b8 <USB_EPStartXfer+0x1482>
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a928:	085b      	lsrs	r3, r3, #1
 800a92a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <USB_EPStartXfer+0x140e>
 800a93a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a93e:	3301      	adds	r3, #1
 800a940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a948:	b29b      	uxth	r3, r3
 800a94a:	029b      	lsls	r3, r3, #10
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a952:	801a      	strh	r2, [r3, #0]
 800a954:	e030      	b.n	800a9b8 <USB_EPStartXfer+0x1482>
 800a956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	785b      	ldrb	r3, [r3, #1]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d128      	bne.n	800a9b8 <USB_EPStartXfer+0x1482>
 800a966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a96a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a982:	b29b      	uxth	r3, r3
 800a984:	461a      	mov	r2, r3
 800a986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a98a:	4413      	add	r3, r2
 800a98c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	00da      	lsls	r2, r3, #3
 800a99e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9b6:	801a      	strh	r2, [r3, #0]
 800a9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d178      	bne.n	800aac8 <USB_EPStartXfer+0x1592>
 800a9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aa00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	00da      	lsls	r2, r3, #3
 800aa0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa12:	4413      	add	r3, r2
 800aa14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	2b3e      	cmp	r3, #62	; 0x3e
 800aa22:	d91d      	bls.n	800aa60 <USB_EPStartXfer+0x152a>
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa28:	095b      	lsrs	r3, r3, #5
 800aa2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa32:	f003 031f 	and.w	r3, r3, #31
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d104      	bne.n	800aa44 <USB_EPStartXfer+0x150e>
 800aa3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e060      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d116      	bne.n	800aa96 <USB_EPStartXfer+0x1560>
 800aa68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa7a:	801a      	strh	r2, [r3, #0]
 800aa7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	e045      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
 800aa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <USB_EPStartXfer+0x1580>
 800aaac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aab0:	3301      	adds	r3, #1
 800aab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	029b      	lsls	r3, r3, #10
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aac4:	801a      	strh	r2, [r3, #0]
 800aac6:	e02c      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
 800aac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d124      	bne.n	800ab22 <USB_EPStartXfer+0x15ec>
 800aad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aadc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aaee:	4413      	add	r3, r2
 800aaf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	00da      	lsls	r2, r3, #3
 800ab02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab06:	4413      	add	r3, r2
 800ab08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab1a:	801a      	strh	r2, [r3, #0]
 800ab1c:	e001      	b.n	800ab22 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e03a      	b.n	800ab98 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab48:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	441a      	add	r2, r3
 800ab7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b085      	sub	sp, #20
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	785b      	ldrb	r3, [r3, #1]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d020      	beq.n	800abf6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abca:	81bb      	strh	r3, [r7, #12]
 800abcc:	89bb      	ldrh	r3, [r7, #12]
 800abce:	f083 0310 	eor.w	r3, r3, #16
 800abd2:	81bb      	strh	r3, [r7, #12]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	441a      	add	r2, r3
 800abde:	89bb      	ldrh	r3, [r7, #12]
 800abe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	8013      	strh	r3, [r2, #0]
 800abf4:	e01f      	b.n	800ac36 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0c:	81fb      	strh	r3, [r7, #14]
 800ac0e:	89fb      	ldrh	r3, [r7, #14]
 800ac10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac14:	81fb      	strh	r3, [r7, #14]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	441a      	add	r2, r3
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	7b1b      	ldrb	r3, [r3, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 809d 	bne.w	800ad92 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	785b      	ldrb	r3, [r3, #1]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d04c      	beq.n	800acfa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	823b      	strh	r3, [r7, #16]
 800ac6e:	8a3b      	ldrh	r3, [r7, #16]
 800ac70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01b      	beq.n	800acb0 <USB_EPClearStall+0x6c>
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8e:	81fb      	strh	r3, [r7, #14]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	441a      	add	r2, r3
 800ac9a:	89fb      	ldrh	r3, [r7, #14]
 800ac9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aca8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acac:	b29b      	uxth	r3, r3
 800acae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	78db      	ldrb	r3, [r3, #3]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d06c      	beq.n	800ad92 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acce:	81bb      	strh	r3, [r7, #12]
 800acd0:	89bb      	ldrh	r3, [r7, #12]
 800acd2:	f083 0320 	eor.w	r3, r3, #32
 800acd6:	81bb      	strh	r3, [r7, #12]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	441a      	add	r2, r3
 800ace2:	89bb      	ldrh	r3, [r7, #12]
 800ace4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	8013      	strh	r3, [r2, #0]
 800acf8:	e04b      	b.n	800ad92 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	82fb      	strh	r3, [r7, #22]
 800ad08:	8afb      	ldrh	r3, [r7, #22]
 800ad0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d01b      	beq.n	800ad4a <USB_EPClearStall+0x106>
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad28:	82bb      	strh	r3, [r7, #20]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	441a      	add	r2, r3
 800ad34:	8abb      	ldrh	r3, [r7, #20]
 800ad36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad60:	827b      	strh	r3, [r7, #18]
 800ad62:	8a7b      	ldrh	r3, [r7, #18]
 800ad64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad68:	827b      	strh	r3, [r7, #18]
 800ad6a:	8a7b      	ldrh	r3, [r7, #18]
 800ad6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad70:	827b      	strh	r3, [r7, #18]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	441a      	add	r2, r3
 800ad7c:	8a7b      	ldrh	r3, [r7, #18]
 800ad7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	371c      	adds	r7, #28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2203      	movs	r2, #3
 800adbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	460b      	mov	r3, r1
 800add8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d103      	bne.n	800ade8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2280      	movs	r2, #128	; 0x80
 800ade4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b085      	sub	sp, #20
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ae60:	68fb      	ldr	r3, [r7, #12]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b08d      	sub	sp, #52	; 0x34
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	4611      	mov	r1, r2
 800ae92:	461a      	mov	r2, r3
 800ae94:	460b      	mov	r3, r1
 800ae96:	80fb      	strh	r3, [r7, #6]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ae9c:	88bb      	ldrh	r3, [r7, #4]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	085b      	lsrs	r3, r3, #1
 800aea2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aeac:	88fa      	ldrh	r2, [r7, #6]
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeb6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aebc:	e01b      	b.n	800aef6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	3301      	adds	r3, #1
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	461a      	mov	r2, r3
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	b29a      	uxth	r2, r3
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	3302      	adds	r3, #2
 800aee8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	3301      	adds	r3, #1
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	3b01      	subs	r3, #1
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e0      	bne.n	800aebe <USB_WritePMA+0x38>
  }
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	3734      	adds	r7, #52	; 0x34
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b08b      	sub	sp, #44	; 0x2c
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	4611      	mov	r1, r2
 800af16:	461a      	mov	r2, r3
 800af18:	460b      	mov	r3, r1
 800af1a:	80fb      	strh	r3, [r7, #6]
 800af1c:	4613      	mov	r3, r2
 800af1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800af20:	88bb      	ldrh	r3, [r7, #4]
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	b29b      	uxth	r3, r3
 800af26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af30:	88fa      	ldrh	r2, [r7, #6]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	4413      	add	r3, r2
 800af36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af3a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
 800af40:	e018      	b.n	800af74 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	3302      	adds	r3, #2
 800af4e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	b2da      	uxtb	r2, r3
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	3301      	adds	r3, #1
 800af5c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	0a1b      	lsrs	r3, r3, #8
 800af62:	b2da      	uxtb	r2, r3
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	3301      	adds	r3, #1
 800af6c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	3b01      	subs	r3, #1
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e3      	bne.n	800af42 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800af7a:	88bb      	ldrh	r3, [r7, #4]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	b29b      	uxth	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d007      	beq.n	800af96 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	b2da      	uxtb	r2, r3
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	701a      	strb	r2, [r3, #0]
  }
}
 800af96:	bf00      	nop
 800af98:	372c      	adds	r7, #44	; 0x2c
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	460b      	mov	r3, r1
 800afac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800afae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800afb2:	f002 fb23 	bl	800d5fc <USBD_static_malloc>
 800afb6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d105      	bne.n	800afca <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800afc6:	2302      	movs	r3, #2
 800afc8:	e066      	b.n	800b098 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	7c1b      	ldrb	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d119      	bne.n	800b00e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800afda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afde:	2202      	movs	r2, #2
 800afe0:	2181      	movs	r1, #129	; 0x81
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f002 f942 	bl	800d26c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aff2:	2202      	movs	r2, #2
 800aff4:	2101      	movs	r1, #1
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f002 f938 	bl	800d26c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2210      	movs	r2, #16
 800b008:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b00c:	e016      	b.n	800b03c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	2202      	movs	r2, #2
 800b012:	2181      	movs	r1, #129	; 0x81
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f002 f929 	bl	800d26c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b020:	2340      	movs	r3, #64	; 0x40
 800b022:	2202      	movs	r2, #2
 800b024:	2101      	movs	r1, #1
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f002 f920 	bl	800d26c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2210      	movs	r2, #16
 800b038:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b03c:	2308      	movs	r3, #8
 800b03e:	2203      	movs	r2, #3
 800b040:	2182      	movs	r1, #130	; 0x82
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f002 f912 	bl	800d26c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7c1b      	ldrb	r3, [r3, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d109      	bne.n	800b086 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b07c:	2101      	movs	r1, #1
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f002 fa70 	bl	800d564 <USBD_LL_PrepareReceive>
 800b084:	e007      	b.n	800b096 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	2101      	movs	r1, #1
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f002 fa67 	bl	800d564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b0ac:	2181      	movs	r1, #129	; 0x81
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f002 f91a 	bl	800d2e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f002 f913 	bl	800d2e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b0ca:	2182      	movs	r1, #130	; 0x82
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f002 f90b 	bl	800d2e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00e      	beq.n	800b10a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f002 fa8b 	bl	800d618 <USBD_static_free>
    pdev->pClassData = NULL;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b124:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b138:	2303      	movs	r3, #3
 800b13a:	e0af      	b.n	800b29c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b144:	2b00      	cmp	r3, #0
 800b146:	d03f      	beq.n	800b1c8 <USBD_CDC_Setup+0xb4>
 800b148:	2b20      	cmp	r3, #32
 800b14a:	f040 809f 	bne.w	800b28c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	88db      	ldrh	r3, [r3, #6]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d02e      	beq.n	800b1b4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	b25b      	sxtb	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	da16      	bge.n	800b18e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b16c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	88d2      	ldrh	r2, [r2, #6]
 800b172:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	88db      	ldrh	r3, [r3, #6]
 800b178:	2b07      	cmp	r3, #7
 800b17a:	bf28      	it	cs
 800b17c:	2307      	movcs	r3, #7
 800b17e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	89fa      	ldrh	r2, [r7, #14]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 fad9 	bl	800c73e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b18c:	e085      	b.n	800b29a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	785a      	ldrb	r2, [r3, #1]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	88db      	ldrh	r3, [r3, #6]
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b1a4:	6939      	ldr	r1, [r7, #16]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 faf2 	bl	800c796 <USBD_CtlPrepareRx>
      break;
 800b1b2:	e072      	b.n	800b29a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	7850      	ldrb	r0, [r2, #1]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	4798      	blx	r3
      break;
 800b1c6:	e068      	b.n	800b29a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	2b0b      	cmp	r3, #11
 800b1ce:	d852      	bhi.n	800b276 <USBD_CDC_Setup+0x162>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <USBD_CDC_Setup+0xc4>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b209 	.word	0x0800b209
 800b1dc:	0800b285 	.word	0x0800b285
 800b1e0:	0800b277 	.word	0x0800b277
 800b1e4:	0800b277 	.word	0x0800b277
 800b1e8:	0800b277 	.word	0x0800b277
 800b1ec:	0800b277 	.word	0x0800b277
 800b1f0:	0800b277 	.word	0x0800b277
 800b1f4:	0800b277 	.word	0x0800b277
 800b1f8:	0800b277 	.word	0x0800b277
 800b1fc:	0800b277 	.word	0x0800b277
 800b200:	0800b233 	.word	0x0800b233
 800b204:	0800b25d 	.word	0x0800b25d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b03      	cmp	r3, #3
 800b212:	d107      	bne.n	800b224 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b214:	f107 030a 	add.w	r3, r7, #10
 800b218:	2202      	movs	r2, #2
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f001 fa8e 	bl	800c73e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b222:	e032      	b.n	800b28a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f001 fa18 	bl	800c65c <USBD_CtlError>
            ret = USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	75fb      	strb	r3, [r7, #23]
          break;
 800b230:	e02b      	b.n	800b28a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d107      	bne.n	800b24e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b23e:	f107 030d 	add.w	r3, r7, #13
 800b242:	2201      	movs	r2, #1
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 fa79 	bl	800c73e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b24c:	e01d      	b.n	800b28a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 fa03 	bl	800c65c <USBD_CtlError>
            ret = USBD_FAIL;
 800b256:	2303      	movs	r3, #3
 800b258:	75fb      	strb	r3, [r7, #23]
          break;
 800b25a:	e016      	b.n	800b28a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b03      	cmp	r3, #3
 800b266:	d00f      	beq.n	800b288 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 f9f6 	bl	800c65c <USBD_CtlError>
            ret = USBD_FAIL;
 800b270:	2303      	movs	r3, #3
 800b272:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b274:	e008      	b.n	800b288 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 f9ef 	bl	800c65c <USBD_CtlError>
          ret = USBD_FAIL;
 800b27e:	2303      	movs	r3, #3
 800b280:	75fb      	strb	r3, [r7, #23]
          break;
 800b282:	e002      	b.n	800b28a <USBD_CDC_Setup+0x176>
          break;
 800b284:	bf00      	nop
 800b286:	e008      	b.n	800b29a <USBD_CDC_Setup+0x186>
          break;
 800b288:	bf00      	nop
      }
      break;
 800b28a:	e006      	b.n	800b29a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 f9e4 	bl	800c65c <USBD_CtlError>
      ret = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	75fb      	strb	r3, [r7, #23]
      break;
 800b298:	bf00      	nop
  }

  return (uint8_t)ret;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e04f      	b.n	800b366 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b2ce:	78fa      	ldrb	r2, [r7, #3]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	440b      	add	r3, r1
 800b2dc:	3318      	adds	r3, #24
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d029      	beq.n	800b338 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b2e4:	78fa      	ldrb	r2, [r7, #3]
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	440b      	add	r3, r1
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	78f9      	ldrb	r1, [r7, #3]
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	440b      	add	r3, r1
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	4403      	add	r3, r0
 800b304:	333c      	adds	r3, #60	; 0x3c
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	fbb2 f1f3 	udiv	r1, r2, r3
 800b30c:	fb01 f303 	mul.w	r3, r1, r3
 800b310:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b312:	2b00      	cmp	r3, #0
 800b314:	d110      	bne.n	800b338 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b316:	78fa      	ldrb	r2, [r7, #3]
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	3318      	adds	r3, #24
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b32a:	78f9      	ldrb	r1, [r7, #3]
 800b32c:	2300      	movs	r3, #0
 800b32e:	2200      	movs	r2, #0
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f002 f8df 	bl	800d4f4 <USBD_LL_Transmit>
 800b336:	e015      	b.n	800b364 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b360:	78fa      	ldrb	r2, [r7, #3]
 800b362:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	460b      	mov	r3, r1
 800b378:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b380:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e015      	b.n	800b3bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f002 f91d 	bl	800d5d4 <USBD_LL_GetRxDataSize>
 800b39a:	4602      	mov	r2, r0
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e01b      	b.n	800b416 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d015      	beq.n	800b414 <USBD_CDC_EP0_RxReady+0x50>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b3ee:	2bff      	cmp	r3, #255	; 0xff
 800b3f0:	d010      	beq.n	800b414 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b400:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b408:	b292      	uxth	r2, r2
 800b40a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	22ff      	movs	r2, #255	; 0xff
 800b410:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2243      	movs	r2, #67	; 0x43
 800b42c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b42e:	4b03      	ldr	r3, [pc, #12]	; (800b43c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	200000b4 	.word	0x200000b4

0800b440 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2243      	movs	r2, #67	; 0x43
 800b44c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b44e:	4b03      	ldr	r3, [pc, #12]	; (800b45c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	20000070 	.word	0x20000070

0800b460 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2243      	movs	r2, #67	; 0x43
 800b46c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b46e:	4b03      	ldr	r3, [pc, #12]	; (800b47c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	200000f8 	.word	0x200000f8

0800b480 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	220a      	movs	r2, #10
 800b48c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b48e:	4b03      	ldr	r3, [pc, #12]	; (800b49c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	2000002c 	.word	0x2000002c

0800b4a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e004      	b.n	800b4be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b087      	sub	sp, #28
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e008      	b.n	800b4fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b516:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b51e:	2303      	movs	r3, #3
 800b520:	e004      	b.n	800b52c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b546:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	e01a      	b.n	800b590 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b560:	2b00      	cmp	r3, #0
 800b562:	d114      	bne.n	800b58e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2201      	movs	r2, #1
 800b568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b582:	2181      	movs	r1, #129	; 0x81
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f001 ffb5 	bl	800d4f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e016      	b.n	800b5e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	7c1b      	ldrb	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d109      	bne.n	800b5d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 ffca 	bl	800d564 <USBD_LL_PrepareReceive>
 800b5d0:	e007      	b.n	800b5e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5d8:	2340      	movs	r3, #64	; 0x40
 800b5da:	2101      	movs	r1, #1
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f001 ffc1 	bl	800d564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e01f      	b.n	800b644 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	79fa      	ldrb	r2, [r7, #7]
 800b636:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f001 fd1f 	bl	800d07c <USBD_LL_Init>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b642:	7dfb      	ldrb	r3, [r7, #23]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f001 fdd7 	bl	800d208 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d011      	beq.n	800b690 <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	6852      	ldr	r2, [r2, #4]
 800b678:	b2d2      	uxtb	r2, r2
 800b67a:	4611      	mov	r1, r2
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	4798      	blx	r3
    pdev->pClass = NULL;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 fd4d 	bl	800d140 <USBD_LL_DeInit>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]

  return ret;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e016      	b.n	800b6fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	f107 020e 	add.w	r2, r7, #14
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b082      	sub	sp, #8
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 fd4a 	bl	800d1a4 <USBD_LL_Start>
 800b710:	4603      	mov	r3, r0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b73c:	2303      	movs	r3, #3
 800b73e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	78fa      	ldrb	r2, [r7, #3]
 800b754:	4611      	mov	r1, r2
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	4798      	blx	r3
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	460b      	mov	r3, r1
 800b772:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d007      	beq.n	800b78e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	4798      	blx	r3
  }

  return USBD_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 ff1c 	bl	800c5e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7cc:	f003 031f 	and.w	r3, r3, #31
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d01a      	beq.n	800b80a <USBD_LL_SetupStage+0x72>
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d822      	bhi.n	800b81e <USBD_LL_SetupStage+0x86>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <USBD_LL_SetupStage+0x4a>
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d00a      	beq.n	800b7f6 <USBD_LL_SetupStage+0x5e>
 800b7e0:	e01d      	b.n	800b81e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f9ee 	bl	800bbcc <USBD_StdDevReq>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f4:	e020      	b.n	800b838 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa52 	bl	800bca8 <USBD_StdItfReq>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]
      break;
 800b808:	e016      	b.n	800b838 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fa91 	bl	800bd3a <USBD_StdEPReq>
 800b818:	4603      	mov	r3, r0
 800b81a:	73fb      	strb	r3, [r7, #15]
      break;
 800b81c:	e00c      	b.n	800b838 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 fd91 	bl	800d354 <USBD_LL_StallEP>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
      break;
 800b836:	bf00      	nop
  }

  return ret;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	460b      	mov	r3, r1
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b850:	7afb      	ldrb	r3, [r7, #11]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d138      	bne.n	800b8c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b85c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b864:	2b03      	cmp	r3, #3
 800b866:	d14a      	bne.n	800b8fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	429a      	cmp	r2, r3
 800b872:	d913      	bls.n	800b89c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	1ad2      	subs	r2, r2, r3
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	68da      	ldr	r2, [r3, #12]
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	4293      	cmp	r3, r2
 800b88c:	bf28      	it	cs
 800b88e:	4613      	movcs	r3, r2
 800b890:	461a      	mov	r2, r3
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 ff9b 	bl	800c7d0 <USBD_CtlContinueRx>
 800b89a:	e030      	b.n	800b8fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	d10b      	bne.n	800b8c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d005      	beq.n	800b8c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 ff96 	bl	800c7f2 <USBD_CtlSendStatus>
 800b8c6:	e01a      	b.n	800b8fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d114      	bne.n	800b8fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00e      	beq.n	800b8fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	7afa      	ldrb	r2, [r7, #11]
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	4798      	blx	r3
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	e000      	b.n	800b900 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	460b      	mov	r3, r1
 800b912:	607a      	str	r2, [r7, #4]
 800b914:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b916:	7afb      	ldrb	r3, [r7, #11]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d16b      	bne.n	800b9f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3314      	adds	r3, #20
 800b920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d156      	bne.n	800b9da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	689a      	ldr	r2, [r3, #8]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	429a      	cmp	r2, r3
 800b936:	d914      	bls.n	800b962 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f000 ff10 	bl	800c774 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b954:	2300      	movs	r3, #0
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f001 fe02 	bl	800d564 <USBD_LL_PrepareReceive>
 800b960:	e03b      	b.n	800b9da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	68da      	ldr	r2, [r3, #12]
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d11c      	bne.n	800b9a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b976:	429a      	cmp	r2, r3
 800b978:	d316      	bcc.n	800b9a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b984:	429a      	cmp	r2, r3
 800b986:	d20f      	bcs.n	800b9a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 fef1 	bl	800c774 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b99a:	2300      	movs	r3, #0
 800b99c:	2200      	movs	r2, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f001 fddf 	bl	800d564 <USBD_LL_PrepareReceive>
 800b9a6:	e018      	b.n	800b9da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d10b      	bne.n	800b9cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d005      	beq.n	800b9cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9cc:	2180      	movs	r1, #128	; 0x80
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f001 fcc0 	bl	800d354 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 ff1f 	bl	800c818 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d122      	bne.n	800ba2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fe98 	bl	800b71a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9f2:	e01a      	b.n	800ba2a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d114      	bne.n	800ba2a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00e      	beq.n	800ba2a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	7afa      	ldrb	r2, [r7, #11]
 800ba16:	4611      	mov	r1, r2
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	4798      	blx	r3
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	e000      	b.n	800ba2c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e02f      	b.n	800bac8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00f      	beq.n	800ba92 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d009      	beq.n	800ba92 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	6852      	ldr	r2, [r2, #4]
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba92:	2340      	movs	r3, #64	; 0x40
 800ba94:	2200      	movs	r2, #0
 800ba96:	2100      	movs	r1, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f001 fbe7 	bl	800d26c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2240      	movs	r2, #64	; 0x40
 800baaa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baae:	2340      	movs	r3, #64	; 0x40
 800bab0:	2200      	movs	r2, #0
 800bab2:	2180      	movs	r1, #128	; 0x80
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 fbd9 	bl	800d26c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2240      	movs	r2, #64	; 0x40
 800bac4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	78fa      	ldrb	r2, [r7, #3]
 800bae0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2204      	movs	r2, #4
 800bb0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d106      	bne.n	800bb3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e012      	b.n	800bb88 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d10b      	bne.n	800bb86 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	3301      	adds	r3, #1
 800bba6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bbae:	8a3b      	ldrh	r3, [r7, #16]
 800bbb0:	021b      	lsls	r3, r3, #8
 800bbb2:	b21a      	sxth	r2, r3
 800bbb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	b21b      	sxth	r3, r3
 800bbbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bbbe:	89fb      	ldrh	r3, [r7, #14]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	371c      	adds	r7, #28
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbe2:	2b40      	cmp	r3, #64	; 0x40
 800bbe4:	d005      	beq.n	800bbf2 <USBD_StdDevReq+0x26>
 800bbe6:	2b40      	cmp	r3, #64	; 0x40
 800bbe8:	d853      	bhi.n	800bc92 <USBD_StdDevReq+0xc6>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <USBD_StdDevReq+0x3a>
 800bbee:	2b20      	cmp	r3, #32
 800bbf0:	d14f      	bne.n	800bc92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	6839      	ldr	r1, [r7, #0]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]
      break;
 800bc04:	e04a      	b.n	800bc9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	2b09      	cmp	r3, #9
 800bc0c:	d83b      	bhi.n	800bc86 <USBD_StdDevReq+0xba>
 800bc0e:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <USBD_StdDevReq+0x48>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc69 	.word	0x0800bc69
 800bc18:	0800bc7d 	.word	0x0800bc7d
 800bc1c:	0800bc87 	.word	0x0800bc87
 800bc20:	0800bc73 	.word	0x0800bc73
 800bc24:	0800bc87 	.word	0x0800bc87
 800bc28:	0800bc47 	.word	0x0800bc47
 800bc2c:	0800bc3d 	.word	0x0800bc3d
 800bc30:	0800bc87 	.word	0x0800bc87
 800bc34:	0800bc5f 	.word	0x0800bc5f
 800bc38:	0800bc51 	.word	0x0800bc51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f9de 	bl	800c000 <USBD_GetDescriptor>
          break;
 800bc44:	e024      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fb43 	bl	800c2d4 <USBD_SetAddress>
          break;
 800bc4e:	e01f      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fb82 	bl	800c35c <USBD_SetConfig>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]
          break;
 800bc5c:	e018      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fc21 	bl	800c4a8 <USBD_GetConfig>
          break;
 800bc66:	e013      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fc52 	bl	800c514 <USBD_GetStatus>
          break;
 800bc70:	e00e      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fc81 	bl	800c57c <USBD_SetFeature>
          break;
 800bc7a:	e009      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fc90 	bl	800c5a4 <USBD_ClrFeature>
          break;
 800bc84:	e004      	b.n	800bc90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fce7 	bl	800c65c <USBD_CtlError>
          break;
 800bc8e:	bf00      	nop
      }
      break;
 800bc90:	e004      	b.n	800bc9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fce1 	bl	800c65c <USBD_CtlError>
      break;
 800bc9a:	bf00      	nop
  }

  return ret;
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop

0800bca8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcbe:	2b40      	cmp	r3, #64	; 0x40
 800bcc0:	d005      	beq.n	800bcce <USBD_StdItfReq+0x26>
 800bcc2:	2b40      	cmp	r3, #64	; 0x40
 800bcc4:	d82f      	bhi.n	800bd26 <USBD_StdItfReq+0x7e>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <USBD_StdItfReq+0x26>
 800bcca:	2b20      	cmp	r3, #32
 800bccc:	d12b      	bne.n	800bd26 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d81d      	bhi.n	800bd18 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	889b      	ldrh	r3, [r3, #4]
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d813      	bhi.n	800bd0e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	4798      	blx	r3
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	88db      	ldrh	r3, [r3, #6]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d110      	bne.n	800bd22 <USBD_StdItfReq+0x7a>
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10d      	bne.n	800bd22 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fd73 	bl	800c7f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd0c:	e009      	b.n	800bd22 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fca3 	bl	800c65c <USBD_CtlError>
          break;
 800bd16:	e004      	b.n	800bd22 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fc9e 	bl	800c65c <USBD_CtlError>
          break;
 800bd20:	e000      	b.n	800bd24 <USBD_StdItfReq+0x7c>
          break;
 800bd22:	bf00      	nop
      }
      break;
 800bd24:	e004      	b.n	800bd30 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fc97 	bl	800c65c <USBD_CtlError>
      break;
 800bd2e:	bf00      	nop
  }

  return ret;
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	889b      	ldrh	r3, [r3, #4]
 800bd4c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd56:	2b40      	cmp	r3, #64	; 0x40
 800bd58:	d007      	beq.n	800bd6a <USBD_StdEPReq+0x30>
 800bd5a:	2b40      	cmp	r3, #64	; 0x40
 800bd5c:	f200 8145 	bhi.w	800bfea <USBD_StdEPReq+0x2b0>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00c      	beq.n	800bd7e <USBD_StdEPReq+0x44>
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	f040 8140 	bne.w	800bfea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	4798      	blx	r3
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd7c:	e13a      	b.n	800bff4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	785b      	ldrb	r3, [r3, #1]
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d007      	beq.n	800bd96 <USBD_StdEPReq+0x5c>
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	f300 8129 	bgt.w	800bfde <USBD_StdEPReq+0x2a4>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d07f      	beq.n	800be90 <USBD_StdEPReq+0x156>
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d03c      	beq.n	800be0e <USBD_StdEPReq+0xd4>
 800bd94:	e123      	b.n	800bfde <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d002      	beq.n	800bda8 <USBD_StdEPReq+0x6e>
 800bda2:	2b03      	cmp	r3, #3
 800bda4:	d016      	beq.n	800bdd4 <USBD_StdEPReq+0x9a>
 800bda6:	e02c      	b.n	800be02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00d      	beq.n	800bdca <USBD_StdEPReq+0x90>
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b80      	cmp	r3, #128	; 0x80
 800bdb2:	d00a      	beq.n	800bdca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdb4:	7bbb      	ldrb	r3, [r7, #14]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 facb 	bl	800d354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdbe:	2180      	movs	r1, #128	; 0x80
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 fac7 	bl	800d354 <USBD_LL_StallEP>
 800bdc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdc8:	e020      	b.n	800be0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fc45 	bl	800c65c <USBD_CtlError>
              break;
 800bdd2:	e01b      	b.n	800be0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	885b      	ldrh	r3, [r3, #2]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10e      	bne.n	800bdfa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00b      	beq.n	800bdfa <USBD_StdEPReq+0xc0>
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	2b80      	cmp	r3, #128	; 0x80
 800bde6:	d008      	beq.n	800bdfa <USBD_StdEPReq+0xc0>
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	88db      	ldrh	r3, [r3, #6]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d104      	bne.n	800bdfa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdf0:	7bbb      	ldrb	r3, [r7, #14]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 faad 	bl	800d354 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fcf9 	bl	800c7f2 <USBD_CtlSendStatus>

              break;
 800be00:	e004      	b.n	800be0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fc29 	bl	800c65c <USBD_CtlError>
              break;
 800be0a:	bf00      	nop
          }
          break;
 800be0c:	e0ec      	b.n	800bfe8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b02      	cmp	r3, #2
 800be18:	d002      	beq.n	800be20 <USBD_StdEPReq+0xe6>
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d016      	beq.n	800be4c <USBD_StdEPReq+0x112>
 800be1e:	e030      	b.n	800be82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be20:	7bbb      	ldrb	r3, [r7, #14]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00d      	beq.n	800be42 <USBD_StdEPReq+0x108>
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	2b80      	cmp	r3, #128	; 0x80
 800be2a:	d00a      	beq.n	800be42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 fa8f 	bl	800d354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be36:	2180      	movs	r1, #128	; 0x80
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 fa8b 	bl	800d354 <USBD_LL_StallEP>
 800be3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be40:	e025      	b.n	800be8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fc09 	bl	800c65c <USBD_CtlError>
              break;
 800be4a:	e020      	b.n	800be8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	885b      	ldrh	r3, [r3, #2]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d11b      	bne.n	800be8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be54:	7bbb      	ldrb	r3, [r7, #14]
 800be56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d004      	beq.n	800be68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 faac 	bl	800d3c0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fcc2 	bl	800c7f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	4798      	blx	r3
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800be80:	e004      	b.n	800be8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fbe9 	bl	800c65c <USBD_CtlError>
              break;
 800be8a:	e000      	b.n	800be8e <USBD_StdEPReq+0x154>
              break;
 800be8c:	bf00      	nop
          }
          break;
 800be8e:	e0ab      	b.n	800bfe8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d002      	beq.n	800bea2 <USBD_StdEPReq+0x168>
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d032      	beq.n	800bf06 <USBD_StdEPReq+0x1cc>
 800bea0:	e097      	b.n	800bfd2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d007      	beq.n	800beb8 <USBD_StdEPReq+0x17e>
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
 800beaa:	2b80      	cmp	r3, #128	; 0x80
 800beac:	d004      	beq.n	800beb8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fbd3 	bl	800c65c <USBD_CtlError>
                break;
 800beb6:	e091      	b.n	800bfdc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	da0b      	bge.n	800bed8 <USBD_StdEPReq+0x19e>
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	3310      	adds	r3, #16
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	4413      	add	r3, r2
 800bed4:	3304      	adds	r3, #4
 800bed6:	e00b      	b.n	800bef0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bed8:	7bbb      	ldrb	r3, [r7, #14]
 800beda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	3304      	adds	r3, #4
 800bef0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2200      	movs	r2, #0
 800bef6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2202      	movs	r2, #2
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fc1d 	bl	800c73e <USBD_CtlSendData>
              break;
 800bf04:	e06a      	b.n	800bfdc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da11      	bge.n	800bf32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf0e:	7bbb      	ldrb	r3, [r7, #14]
 800bf10:	f003 020f 	and.w	r2, r3, #15
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	440b      	add	r3, r1
 800bf20:	3324      	adds	r3, #36	; 0x24
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d117      	bne.n	800bf58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fb96 	bl	800c65c <USBD_CtlError>
                  break;
 800bf30:	e054      	b.n	800bfdc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	f003 020f 	and.w	r2, r3, #15
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	440b      	add	r3, r1
 800bf44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d104      	bne.n	800bf58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fb83 	bl	800c65c <USBD_CtlError>
                  break;
 800bf56:	e041      	b.n	800bfdc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	da0b      	bge.n	800bf78 <USBD_StdEPReq+0x23e>
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	3310      	adds	r3, #16
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	4413      	add	r3, r2
 800bf74:	3304      	adds	r3, #4
 800bf76:	e00b      	b.n	800bf90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3304      	adds	r3, #4
 800bf90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <USBD_StdEPReq+0x264>
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	2b80      	cmp	r3, #128	; 0x80
 800bf9c:	d103      	bne.n	800bfa6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	e00e      	b.n	800bfc4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f001 fa3e 	bl	800d42c <USBD_LL_IsStallEP>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	e002      	b.n	800bfc4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fbb7 	bl	800c73e <USBD_CtlSendData>
              break;
 800bfd0:	e004      	b.n	800bfdc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 fb41 	bl	800c65c <USBD_CtlError>
              break;
 800bfda:	bf00      	nop
          }
          break;
 800bfdc:	e004      	b.n	800bfe8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fb3b 	bl	800c65c <USBD_CtlError>
          break;
 800bfe6:	bf00      	nop
      }
      break;
 800bfe8:	e004      	b.n	800bff4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fb35 	bl	800c65c <USBD_CtlError>
      break;
 800bff2:	bf00      	nop
  }

  return ret;
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c00a:	2300      	movs	r3, #0
 800c00c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	885b      	ldrh	r3, [r3, #2]
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	2b06      	cmp	r3, #6
 800c022:	f200 8128 	bhi.w	800c276 <USBD_GetDescriptor+0x276>
 800c026:	a201      	add	r2, pc, #4	; (adr r2, 800c02c <USBD_GetDescriptor+0x2c>)
 800c028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02c:	0800c049 	.word	0x0800c049
 800c030:	0800c061 	.word	0x0800c061
 800c034:	0800c0a1 	.word	0x0800c0a1
 800c038:	0800c277 	.word	0x0800c277
 800c03c:	0800c277 	.word	0x0800c277
 800c040:	0800c217 	.word	0x0800c217
 800c044:	0800c243 	.word	0x0800c243
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	7c12      	ldrb	r2, [r2, #16]
 800c054:	f107 0108 	add.w	r1, r7, #8
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
 800c05c:	60f8      	str	r0, [r7, #12]
      break;
 800c05e:	e112      	b.n	800c286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	7c1b      	ldrb	r3, [r3, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10d      	bne.n	800c084 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c070:	f107 0208 	add.w	r2, r7, #8
 800c074:	4610      	mov	r0, r2
 800c076:	4798      	blx	r3
 800c078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3301      	adds	r3, #1
 800c07e:	2202      	movs	r2, #2
 800c080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c082:	e100      	b.n	800c286 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	f107 0208 	add.w	r2, r7, #8
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	2202      	movs	r2, #2
 800c09c:	701a      	strb	r2, [r3, #0]
      break;
 800c09e:	e0f2      	b.n	800c286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	885b      	ldrh	r3, [r3, #2]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	f200 80ac 	bhi.w	800c204 <USBD_GetDescriptor+0x204>
 800c0ac:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <USBD_GetDescriptor+0xb4>)
 800c0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b2:	bf00      	nop
 800c0b4:	0800c0cd 	.word	0x0800c0cd
 800c0b8:	0800c101 	.word	0x0800c101
 800c0bc:	0800c135 	.word	0x0800c135
 800c0c0:	0800c169 	.word	0x0800c169
 800c0c4:	0800c19d 	.word	0x0800c19d
 800c0c8:	0800c1d1 	.word	0x0800c1d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	7c12      	ldrb	r2, [r2, #16]
 800c0e4:	f107 0108 	add.w	r1, r7, #8
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	4798      	blx	r3
 800c0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ee:	e091      	b.n	800c214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fab2 	bl	800c65c <USBD_CtlError>
            err++;
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0fe:	e089      	b.n	800c214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00b      	beq.n	800c124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	7c12      	ldrb	r2, [r2, #16]
 800c118:	f107 0108 	add.w	r1, r7, #8
 800c11c:	4610      	mov	r0, r2
 800c11e:	4798      	blx	r3
 800c120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c122:	e077      	b.n	800c214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa98 	bl	800c65c <USBD_CtlError>
            err++;
 800c12c:	7afb      	ldrb	r3, [r7, #11]
 800c12e:	3301      	adds	r3, #1
 800c130:	72fb      	strb	r3, [r7, #11]
          break;
 800c132:	e06f      	b.n	800c214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00b      	beq.n	800c158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7c12      	ldrb	r2, [r2, #16]
 800c14c:	f107 0108 	add.w	r1, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c156:	e05d      	b.n	800c214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa7e 	bl	800c65c <USBD_CtlError>
            err++;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	3301      	adds	r3, #1
 800c164:	72fb      	strb	r3, [r7, #11]
          break;
 800c166:	e055      	b.n	800c214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	7c12      	ldrb	r2, [r2, #16]
 800c180:	f107 0108 	add.w	r1, r7, #8
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
 800c188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c18a:	e043      	b.n	800c214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa64 	bl	800c65c <USBD_CtlError>
            err++;
 800c194:	7afb      	ldrb	r3, [r7, #11]
 800c196:	3301      	adds	r3, #1
 800c198:	72fb      	strb	r3, [r7, #11]
          break;
 800c19a:	e03b      	b.n	800c214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00b      	beq.n	800c1c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	7c12      	ldrb	r2, [r2, #16]
 800c1b4:	f107 0108 	add.w	r1, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1be:	e029      	b.n	800c214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fa4a 	bl	800c65c <USBD_CtlError>
            err++;
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ce:	e021      	b.n	800c214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00b      	beq.n	800c1f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7c12      	ldrb	r2, [r2, #16]
 800c1e8:	f107 0108 	add.w	r1, r7, #8
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	4798      	blx	r3
 800c1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1f2:	e00f      	b.n	800c214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fa30 	bl	800c65c <USBD_CtlError>
            err++;
 800c1fc:	7afb      	ldrb	r3, [r7, #11]
 800c1fe:	3301      	adds	r3, #1
 800c200:	72fb      	strb	r3, [r7, #11]
          break;
 800c202:	e007      	b.n	800c214 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa28 	bl	800c65c <USBD_CtlError>
          err++;
 800c20c:	7afb      	ldrb	r3, [r7, #11]
 800c20e:	3301      	adds	r3, #1
 800c210:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c212:	bf00      	nop
      }
      break;
 800c214:	e037      	b.n	800c286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7c1b      	ldrb	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d109      	bne.n	800c232 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c226:	f107 0208 	add.w	r2, r7, #8
 800c22a:	4610      	mov	r0, r2
 800c22c:	4798      	blx	r3
 800c22e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c230:	e029      	b.n	800c286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fa11 	bl	800c65c <USBD_CtlError>
        err++;
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	3301      	adds	r3, #1
 800c23e:	72fb      	strb	r3, [r7, #11]
      break;
 800c240:	e021      	b.n	800c286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	7c1b      	ldrb	r3, [r3, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10d      	bne.n	800c266 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c252:	f107 0208 	add.w	r2, r7, #8
 800c256:	4610      	mov	r0, r2
 800c258:	4798      	blx	r3
 800c25a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	3301      	adds	r3, #1
 800c260:	2207      	movs	r2, #7
 800c262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c264:	e00f      	b.n	800c286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f9f7 	bl	800c65c <USBD_CtlError>
        err++;
 800c26e:	7afb      	ldrb	r3, [r7, #11]
 800c270:	3301      	adds	r3, #1
 800c272:	72fb      	strb	r3, [r7, #11]
      break;
 800c274:	e007      	b.n	800c286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f9ef 	bl	800c65c <USBD_CtlError>
      err++;
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	3301      	adds	r3, #1
 800c282:	72fb      	strb	r3, [r7, #11]
      break;
 800c284:	bf00      	nop
  }

  if (err != 0U)
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d11e      	bne.n	800c2ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	88db      	ldrh	r3, [r3, #6]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d016      	beq.n	800c2c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c294:	893b      	ldrh	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00e      	beq.n	800c2b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	88da      	ldrh	r2, [r3, #6]
 800c29e:	893b      	ldrh	r3, [r7, #8]
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	bf28      	it	cs
 800c2a4:	4613      	movcs	r3, r2
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2aa:	893b      	ldrh	r3, [r7, #8]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	68f9      	ldr	r1, [r7, #12]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fa44 	bl	800c73e <USBD_CtlSendData>
 800c2b6:	e009      	b.n	800c2cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f9ce 	bl	800c65c <USBD_CtlError>
 800c2c0:	e004      	b.n	800c2cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fa95 	bl	800c7f2 <USBD_CtlSendStatus>
 800c2c8:	e000      	b.n	800c2cc <USBD_GetDescriptor+0x2cc>
    return;
 800c2ca:	bf00      	nop
  }
}
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop

0800c2d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	889b      	ldrh	r3, [r3, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d131      	bne.n	800c34a <USBD_SetAddress+0x76>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	88db      	ldrh	r3, [r3, #6]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d12d      	bne.n	800c34a <USBD_SetAddress+0x76>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	885b      	ldrh	r3, [r3, #2]
 800c2f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f4:	d829      	bhi.n	800c34a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d104      	bne.n	800c318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f9a3 	bl	800c65c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c316:	e01d      	b.n	800c354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7bfa      	ldrb	r2, [r7, #15]
 800c31c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 f8af 	bl	800d488 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa61 	bl	800c7f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2202      	movs	r2, #2
 800c33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33e:	e009      	b.n	800c354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c348:	e004      	b.n	800c354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f985 	bl	800c65c <USBD_CtlError>
  }
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	885b      	ldrh	r3, [r3, #2]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b4c      	ldr	r3, [pc, #304]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c374:	4b4b      	ldr	r3, [pc, #300]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d905      	bls.n	800c388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f96c 	bl	800c65c <USBD_CtlError>
    return USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e088      	b.n	800c49a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d002      	beq.n	800c39a <USBD_SetConfig+0x3e>
 800c394:	2b03      	cmp	r3, #3
 800c396:	d025      	beq.n	800c3e4 <USBD_SetConfig+0x88>
 800c398:	e071      	b.n	800c47e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c39a:	4b42      	ldr	r3, [pc, #264]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01c      	beq.n	800c3dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c3a2:	4b40      	ldr	r3, [pc, #256]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3ac:	4b3d      	ldr	r3, [pc, #244]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff f9bc 	bl	800b730 <USBD_SetClassConfig>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d004      	beq.n	800c3cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f949 	bl	800c65c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3ca:	e065      	b.n	800c498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fa10 	bl	800c7f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c3da:	e05d      	b.n	800c498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fa08 	bl	800c7f2 <USBD_CtlSendStatus>
      break;
 800c3e2:	e059      	b.n	800c498 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c3e4:	4b2f      	ldr	r3, [pc, #188]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d112      	bne.n	800c412 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c3f4:	4b2b      	ldr	r3, [pc, #172]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3fe:	4b29      	ldr	r3, [pc, #164]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff f9af 	bl	800b768 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f9f1 	bl	800c7f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c410:	e042      	b.n	800c498 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c412:	4b24      	ldr	r3, [pc, #144]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d02a      	beq.n	800c476 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff f99d 	bl	800b768 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c42e:	4b1d      	ldr	r3, [pc, #116]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c438:	4b1a      	ldr	r3, [pc, #104]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff f976 	bl	800b730 <USBD_SetClassConfig>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00f      	beq.n	800c46e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f903 	bl	800c65c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff f982 	bl	800b768 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c46c:	e014      	b.n	800c498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f9bf 	bl	800c7f2 <USBD_CtlSendStatus>
      break;
 800c474:	e010      	b.n	800c498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f9bb 	bl	800c7f2 <USBD_CtlSendStatus>
      break;
 800c47c:	e00c      	b.n	800c498 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f8eb 	bl	800c65c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <USBD_SetConfig+0x148>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff f96b 	bl	800b768 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c492:	2303      	movs	r3, #3
 800c494:	73fb      	strb	r3, [r7, #15]
      break;
 800c496:	bf00      	nop
  }

  return ret;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000550 	.word	0x20000550

0800c4a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	88db      	ldrh	r3, [r3, #6]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d004      	beq.n	800c4c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f8cd 	bl	800c65c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c4c2:	e023      	b.n	800c50c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	dc02      	bgt.n	800c4d6 <USBD_GetConfig+0x2e>
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dc03      	bgt.n	800c4dc <USBD_GetConfig+0x34>
 800c4d4:	e015      	b.n	800c502 <USBD_GetConfig+0x5a>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d00b      	beq.n	800c4f2 <USBD_GetConfig+0x4a>
 800c4da:	e012      	b.n	800c502 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f927 	bl	800c73e <USBD_CtlSendData>
        break;
 800c4f0:	e00c      	b.n	800c50c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f91f 	bl	800c73e <USBD_CtlSendData>
        break;
 800c500:	e004      	b.n	800c50c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f8a9 	bl	800c65c <USBD_CtlError>
        break;
 800c50a:	bf00      	nop
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c524:	b2db      	uxtb	r3, r3
 800c526:	3b01      	subs	r3, #1
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d81e      	bhi.n	800c56a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	88db      	ldrh	r3, [r3, #6]
 800c530:	2b02      	cmp	r3, #2
 800c532:	d004      	beq.n	800c53e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f890 	bl	800c65c <USBD_CtlError>
        break;
 800c53c:	e01a      	b.n	800c574 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d005      	beq.n	800c55a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	f043 0202 	orr.w	r2, r3, #2
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	330c      	adds	r3, #12
 800c55e:	2202      	movs	r2, #2
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f8eb 	bl	800c73e <USBD_CtlSendData>
      break;
 800c568:	e004      	b.n	800c574 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f875 	bl	800c65c <USBD_CtlError>
      break;
 800c572:	bf00      	nop
  }
}
 800c574:	bf00      	nop
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	885b      	ldrh	r3, [r3, #2]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d106      	bne.n	800c59c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f92b 	bl	800c7f2 <USBD_CtlSendStatus>
  }
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d80b      	bhi.n	800c5d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	885b      	ldrh	r3, [r3, #2]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d10c      	bne.n	800c5de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f910 	bl	800c7f2 <USBD_CtlSendStatus>
      }
      break;
 800c5d2:	e004      	b.n	800c5de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f840 	bl	800c65c <USBD_CtlError>
      break;
 800c5dc:	e000      	b.n	800c5e0 <USBD_ClrFeature+0x3c>
      break;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	781a      	ldrb	r2, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3301      	adds	r3, #1
 800c602:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	781a      	ldrb	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3301      	adds	r3, #1
 800c610:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff fabc 	bl	800bb90 <SWAPBYTE>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3301      	adds	r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3301      	adds	r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7ff faaf 	bl	800bb90 <SWAPBYTE>
 800c632:	4603      	mov	r3, r0
 800c634:	461a      	mov	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3301      	adds	r3, #1
 800c63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3301      	adds	r3, #1
 800c644:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f7ff faa2 	bl	800bb90 <SWAPBYTE>
 800c64c:	4603      	mov	r3, r0
 800c64e:	461a      	mov	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	80da      	strh	r2, [r3, #6]
}
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c666:	2180      	movs	r1, #128	; 0x80
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fe73 	bl	800d354 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c66e:	2100      	movs	r1, #0
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 fe6f 	bl	800d354 <USBD_LL_StallEP>
}
 800c676:	bf00      	nop
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c68a:	2300      	movs	r3, #0
 800c68c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d036      	beq.n	800c702 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c698:	6938      	ldr	r0, [r7, #16]
 800c69a:	f000 f836 	bl	800c70a <USBD_GetLen>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	7812      	ldrb	r2, [r2, #0]
 800c6b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	2203      	movs	r2, #3
 800c6c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6ce:	e013      	b.n	800c6f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	7812      	ldrb	r2, [r2, #0]
 800c6da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	613b      	str	r3, [r7, #16]
    idx++;
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e7      	bne.n	800c6d0 <USBD_GetString+0x52>
 800c700:	e000      	b.n	800c704 <USBD_GetString+0x86>
    return;
 800c702:	bf00      	nop
  }
}
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b085      	sub	sp, #20
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c71a:	e005      	b.n	800c728 <USBD_GetLen+0x1e>
  {
    len++;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	3301      	adds	r3, #1
 800c720:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	3301      	adds	r3, #1
 800c726:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1f5      	bne.n	800c71c <USBD_GetLen+0x12>
  }

  return len;
 800c730:	7bfb      	ldrb	r3, [r7, #15]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b084      	sub	sp, #16
 800c742:	af00      	add	r7, sp, #0
 800c744:	60f8      	str	r0, [r7, #12]
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2202      	movs	r2, #2
 800c74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	2100      	movs	r1, #0
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f000 fec5 	bl	800d4f4 <USBD_LL_Transmit>

  return USBD_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	2100      	movs	r1, #0
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 feb4 	bl	800d4f4 <USBD_LL_Transmit>

  return USBD_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2203      	movs	r2, #3
 800c7a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	2100      	movs	r1, #0
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 fecf 	bl	800d564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 febe 	bl	800d564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2204      	movs	r2, #4
 800c7fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c802:	2300      	movs	r3, #0
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fe73 	bl	800d4f4 <USBD_LL_Transmit>

  return USBD_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2205      	movs	r2, #5
 800c824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c828:	2300      	movs	r3, #0
 800c82a:	2200      	movs	r2, #0
 800c82c:	2100      	movs	r1, #0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fe98 	bl	800d564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit()
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
	USBD_DeInit(&hUsbDeviceFS);
 800c844:	4802      	ldr	r0, [pc, #8]	; (800c850 <MX_USB_DEVICE_DeInit+0x10>)
 800c846:	f7fe ff01 	bl	800b64c <USBD_DeInit>
}
 800c84a:	bf00      	nop
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20000554 	.word	0x20000554

0800c854 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c858:	2200      	movs	r2, #0
 800c85a:	4912      	ldr	r1, [pc, #72]	; (800c8a4 <MX_USB_DEVICE_Init+0x50>)
 800c85c:	4812      	ldr	r0, [pc, #72]	; (800c8a8 <MX_USB_DEVICE_Init+0x54>)
 800c85e:	f7fe fec5 	bl	800b5ec <USBD_Init>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c868:	f7f4 fe16 	bl	8001498 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c86c:	490f      	ldr	r1, [pc, #60]	; (800c8ac <MX_USB_DEVICE_Init+0x58>)
 800c86e:	480e      	ldr	r0, [pc, #56]	; (800c8a8 <MX_USB_DEVICE_Init+0x54>)
 800c870:	f7fe ff20 	bl	800b6b4 <USBD_RegisterClass>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c87a:	f7f4 fe0d 	bl	8001498 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c87e:	490c      	ldr	r1, [pc, #48]	; (800c8b0 <MX_USB_DEVICE_Init+0x5c>)
 800c880:	4809      	ldr	r0, [pc, #36]	; (800c8a8 <MX_USB_DEVICE_Init+0x54>)
 800c882:	f7fe fe0d 	bl	800b4a0 <USBD_CDC_RegisterInterface>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c88c:	f7f4 fe04 	bl	8001498 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c890:	4805      	ldr	r0, [pc, #20]	; (800c8a8 <MX_USB_DEVICE_Init+0x54>)
 800c892:	f7fe ff36 	bl	800b702 <USBD_Start>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c89c:	f7f4 fdfc 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c8a0:	bf00      	nop
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20000150 	.word	0x20000150
 800c8a8:	20000554 	.word	0x20000554
 800c8ac:	20000038 	.word	0x20000038
 800c8b0:	2000013c 	.word	0x2000013c

0800c8b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	size_t size = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c8ba:	2340      	movs	r3, #64	; 0x40
 800c8bc:	607b      	str	r3, [r7, #4]
	rx_buf_handle = ring_buffer_init(size);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7f4 fdfa 	bl	80014b8 <ring_buffer_init>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	4a09      	ldr	r2, [pc, #36]	; (800c8ec <CDC_Init_FS+0x38>)
 800c8c8:	6013      	str	r3, [r2, #0]
	data_rdy = false;
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <CDC_Init_FS+0x3c>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	4908      	ldr	r1, [pc, #32]	; (800c8f4 <CDC_Init_FS+0x40>)
 800c8d4:	4808      	ldr	r0, [pc, #32]	; (800c8f8 <CDC_Init_FS+0x44>)
 800c8d6:	f7fe fdf8 	bl	800b4ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8da:	4908      	ldr	r1, [pc, #32]	; (800c8fc <CDC_Init_FS+0x48>)
 800c8dc:	4806      	ldr	r0, [pc, #24]	; (800c8f8 <CDC_Init_FS+0x44>)
 800c8de:	f7fe fe12 	bl	800b506 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	20000824 	.word	0x20000824
 800c8f0:	20000828 	.word	0x20000828
 800c8f4:	200008ac 	.word	0x200008ac
 800c8f8:	20000554 	.word	0x20000554
 800c8fc:	2000082c 	.word	0x2000082c

0800c900 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	ring_buffer_SIG ret = ring_buffer_deinit(rx_buf_handle);
 800c906:	4b0b      	ldr	r3, [pc, #44]	; (800c934 <CDC_DeInit_FS+0x34>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f4 ff5a 	bl	80017c4 <ring_buffer_deinit>
 800c910:	4603      	mov	r3, r0
 800c912:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	if (ret == OK)
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <CDC_DeInit_FS+0x1e>
	{
		return (USBD_OK);
 800c91a:	2300      	movs	r3, #0
 800c91c:	e005      	b.n	800c92a <CDC_DeInit_FS+0x2a>
	}
	else if (ret == BUSY)
 800c91e:	79fb      	ldrb	r3, [r7, #7]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d101      	bne.n	800c928 <CDC_DeInit_FS+0x28>
	{
		return (USBD_BUSY);
 800c924:	2301      	movs	r3, #1
 800c926:	e000      	b.n	800c92a <CDC_DeInit_FS+0x2a>
	}
	else
	{
		return USBD_FAIL;
 800c928:	2303      	movs	r3, #3
	}
  /* USER CODE END 4 */
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	20000824 	.word	0x20000824

0800c938 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	6039      	str	r1, [r7, #0]
 800c942:	71fb      	strb	r3, [r7, #7]
 800c944:	4613      	mov	r3, r2
 800c946:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	2b23      	cmp	r3, #35	; 0x23
 800c94c:	d86a      	bhi.n	800ca24 <CDC_Control_FS+0xec>
 800c94e:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <CDC_Control_FS+0x1c>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800ca25 	.word	0x0800ca25
 800c958:	0800ca25 	.word	0x0800ca25
 800c95c:	0800ca25 	.word	0x0800ca25
 800c960:	0800ca25 	.word	0x0800ca25
 800c964:	0800ca25 	.word	0x0800ca25
 800c968:	0800ca25 	.word	0x0800ca25
 800c96c:	0800ca25 	.word	0x0800ca25
 800c970:	0800ca25 	.word	0x0800ca25
 800c974:	0800ca25 	.word	0x0800ca25
 800c978:	0800ca25 	.word	0x0800ca25
 800c97c:	0800ca25 	.word	0x0800ca25
 800c980:	0800ca25 	.word	0x0800ca25
 800c984:	0800ca25 	.word	0x0800ca25
 800c988:	0800ca25 	.word	0x0800ca25
 800c98c:	0800ca25 	.word	0x0800ca25
 800c990:	0800ca25 	.word	0x0800ca25
 800c994:	0800ca25 	.word	0x0800ca25
 800c998:	0800ca25 	.word	0x0800ca25
 800c99c:	0800ca25 	.word	0x0800ca25
 800c9a0:	0800ca25 	.word	0x0800ca25
 800c9a4:	0800ca25 	.word	0x0800ca25
 800c9a8:	0800ca25 	.word	0x0800ca25
 800c9ac:	0800ca25 	.word	0x0800ca25
 800c9b0:	0800ca25 	.word	0x0800ca25
 800c9b4:	0800ca25 	.word	0x0800ca25
 800c9b8:	0800ca25 	.word	0x0800ca25
 800c9bc:	0800ca25 	.word	0x0800ca25
 800c9c0:	0800ca25 	.word	0x0800ca25
 800c9c4:	0800ca25 	.word	0x0800ca25
 800c9c8:	0800ca25 	.word	0x0800ca25
 800c9cc:	0800ca25 	.word	0x0800ca25
 800c9d0:	0800ca25 	.word	0x0800ca25
 800c9d4:	0800ca25 	.word	0x0800ca25
 800c9d8:	0800ca25 	.word	0x0800ca25
 800c9dc:	0800c9e5 	.word	0x0800c9e5
 800c9e0:	0800ca25 	.word	0x0800ca25
    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	/*When CDC_SET_CONTROL_LINE_STATE is called, once usb is plugged pbuf[2] doesn't exist. As a result it returns 0 and resets rts*/
    	/*this is used as workaround*/
    	if (pbuf[2])
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	3302      	adds	r3, #2
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00b      	beq.n	800ca06 <CDC_Control_FS+0xce>
    	{
    		rts = (bool)(pbuf[2] & 0x02);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	f003 0302 	and.w	r3, r3, #2
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bf14      	ite	ne
 800c9fc:	2301      	movne	r3, #1
 800c9fe:	2300      	moveq	r3, #0
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <CDC_Control_FS+0x100>)
 800ca04:	701a      	strb	r2, [r3, #0]
    	}
    	if (!rts)
 800ca06:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <CDC_Control_FS+0x100>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	f083 0301 	eor.w	r3, r3, #1
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d008      	beq.n	800ca28 <CDC_Control_FS+0xf0>
    	{
    		rts_counter++;
 800ca16:	4b09      	ldr	r3, [pc, #36]	; (800ca3c <CDC_Control_FS+0x104>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <CDC_Control_FS+0x104>)
 800ca20:	701a      	strb	r2, [r3, #0]
    	}

    break;
 800ca22:	e001      	b.n	800ca28 <CDC_Control_FS+0xf0>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca24:	bf00      	nop
 800ca26:	e000      	b.n	800ca2a <CDC_Control_FS+0xf2>
    break;
 800ca28:	bf00      	nop
  }

  return (USBD_OK);
 800ca2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr
 800ca38:	20000829 	.word	0x20000829
 800ca3c:	2000082b 	.word	0x2000082b

0800ca40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t len = (uint32_t) *Len; /* Get the size of the packet*/
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]

	/*Check if there are bytes available*/
	if (len == 0)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <CDC_Receive_FS+0x1a>
	{
		return USBD_FAIL;
 800ca56:	2303      	movs	r3, #3
 800ca58:	e02a      	b.n	800cab0 <CDC_Receive_FS+0x70>
	}
	else
	{
		/*Reset the board hook*/
		if (rts_counter>=4 && len==1)
 800ca5a:	4b17      	ldr	r3, [pc, #92]	; (800cab8 <CDC_Receive_FS+0x78>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d90c      	bls.n	800ca7c <CDC_Receive_FS+0x3c>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d109      	bne.n	800ca7c <CDC_Receive_FS+0x3c>
		{
			    rts_counter = 0;
 800ca68:	4b13      	ldr	r3, [pc, #76]	; (800cab8 <CDC_Receive_FS+0x78>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	701a      	strb	r2, [r3, #0]
				board_reset_hook(Buf[0]);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 f8ae 	bl	800cbd4 <board_reset_hook>
				return USBD_FAIL;
			}
		}

	}
	return USBD_FAIL;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e019      	b.n	800cab0 <CDC_Receive_FS+0x70>
			ring_buffer_SIG ret = ring_buffer_write(rx_buf_handle, Buf, len);
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <CDC_Receive_FS+0x7c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7f4 fd97 	bl	80015b8 <ring_buffer_write>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	72fb      	strb	r3, [r7, #11]
			rts_counter = 0;
 800ca8e:	4b0a      	ldr	r3, [pc, #40]	; (800cab8 <CDC_Receive_FS+0x78>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	701a      	strb	r2, [r3, #0]
			if (ret == OK)
 800ca94:	7afb      	ldrb	r3, [r7, #11]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d104      	bne.n	800caa4 <CDC_Receive_FS+0x64>
				data_rdy = true;
 800ca9a:	4b09      	ldr	r3, [pc, #36]	; (800cac0 <CDC_Receive_FS+0x80>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	701a      	strb	r2, [r3, #0]
				return (USBD_OK);
 800caa0:	2300      	movs	r3, #0
 800caa2:	e005      	b.n	800cab0 <CDC_Receive_FS+0x70>
			else if (ret == BUSY)
 800caa4:	7afb      	ldrb	r3, [r7, #11]
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d101      	bne.n	800caae <CDC_Receive_FS+0x6e>
				return (USBD_BUSY);
 800caaa:	2301      	movs	r3, #1
 800caac:	e000      	b.n	800cab0 <CDC_Receive_FS+0x70>
				return USBD_FAIL;
 800caae:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	2000082b 	.word	0x2000082b
 800cabc:	20000824 	.word	0x20000824
 800cac0:	20000828 	.word	0x20000828

0800cac4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cad4:	4b0d      	ldr	r3, [pc, #52]	; (800cb0c <CDC_Transmit_FS+0x48>)
 800cad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cada:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e00b      	b.n	800cb02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800caea:	887b      	ldrh	r3, [r7, #2]
 800caec:	461a      	mov	r2, r3
 800caee:	6879      	ldr	r1, [r7, #4]
 800caf0:	4806      	ldr	r0, [pc, #24]	; (800cb0c <CDC_Transmit_FS+0x48>)
 800caf2:	f7fe fcea 	bl	800b4ca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800caf6:	4805      	ldr	r0, [pc, #20]	; (800cb0c <CDC_Transmit_FS+0x48>)
 800caf8:	f7fe fd1e 	bl	800b538 <USBD_CDC_TransmitPacket>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20000554 	.word	0x20000554

0800cb10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	371c      	adds	r7, #28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <CDC_Available_FS>:
  *
  *
  * @retval uint32_t: Number of bytes occupying the ring buffer.
  */
uint32_t CDC_Available_FS()
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	af00      	add	r7, sp, #0
	if (!data_rdy)
 800cb38:	4b08      	ldr	r3, [pc, #32]	; (800cb5c <CDC_Available_FS+0x28>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	f083 0301 	eor.w	r3, r3, #1
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <CDC_Available_FS+0x16>
	{
		return 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	e006      	b.n	800cb58 <CDC_Available_FS+0x24>
	}
	else
	{
		return (uint32_t)ring_buffer_available_bytes(rx_buf_handle);
 800cb4a:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <CDC_Available_FS+0x2c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7f4 fce4 	bl	800151c <ring_buffer_available_bytes>
 800cb54:	4603      	mov	r3, r0
 800cb56:	bf00      	nop
	}
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	20000828 	.word	0x20000828
 800cb60:	20000824 	.word	0x20000824

0800cb64 <CDC_Read_FS>:
  * @param  data: pointer to the user provided buffer
  * @param  size: size of the user provided buffer
  * @retval Ring_Buffer_StatusTypeDef: Result of the operation: RING_BUFFER_OK if all operations are OK else RING_BUFFER_ERROR.
  */
uint8_t CDC_Read_FS(uint8_t* data, uint32_t size)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	if (!data_rdy)
 800cb6e:	4b16      	ldr	r3, [pc, #88]	; (800cbc8 <CDC_Read_FS+0x64>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	f083 0301 	eor.w	r3, r3, #1
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <CDC_Read_FS+0x1c>
	{
		return 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e01e      	b.n	800cbbe <CDC_Read_FS+0x5a>
	}
	else
	{
		ring_buffer_SIG ret = ring_buffer_read(rx_buf_handle, data, size);
 800cb80:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <CDC_Read_FS+0x68>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7f4 fd95 	bl	80016b8 <ring_buffer_read>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73fb      	strb	r3, [r7, #15]
		if (ret == BUSY)
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d101      	bne.n	800cb9c <CDC_Read_FS+0x38>
		{
		    return USBD_BUSY;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e010      	b.n	800cbbe <CDC_Read_FS+0x5a>
		}
		else if(ret == FAIL)
 800cb9c:	7bfb      	ldrb	r3, [r7, #15]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d101      	bne.n	800cba6 <CDC_Read_FS+0x42>
		{
			return USBD_FAIL;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e00b      	b.n	800cbbe <CDC_Read_FS+0x5a>
		}
		else
		{
			if (USBD_CDC_ReceivePacket(&hUsbDeviceFS)!= USBD_OK)
 800cba6:	480a      	ldr	r0, [pc, #40]	; (800cbd0 <CDC_Read_FS+0x6c>)
 800cba8:	f7fe fcf6 	bl	800b598 <USBD_CDC_ReceivePacket>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d001      	beq.n	800cbb6 <CDC_Read_FS+0x52>
			{
				return USBD_FAIL;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e003      	b.n	800cbbe <CDC_Read_FS+0x5a>
			}
			else
			{
				data_rdy = false;
 800cbb6:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <CDC_Read_FS+0x64>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
				return USBD_OK;
 800cbbc:	2300      	movs	r3, #0
			}
		}
	}
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20000828 	.word	0x20000828
 800cbcc:	20000824 	.word	0x20000824
 800cbd0:	20000554 	.word	0x20000554

0800cbd4 <board_reset_hook>:

void board_reset_hook(uint8_t Buf)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	71fb      	strb	r3, [r7, #7]
	if (Buf == (uint8_t)RESET)
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	2b99      	cmp	r3, #153	; 0x99
 800cbe2:	d102      	bne.n	800cbea <board_reset_hook+0x16>
	{
		is_reset = true;
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <board_reset_hook+0x24>)
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	701a      	strb	r2, [r3, #0]
	}
}
 800cbea:	bf00      	nop
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	2000082a 	.word	0x2000082a

0800cbfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2212      	movs	r2, #18
 800cc0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc0e:	4b03      	ldr	r3, [pc, #12]	; (800cc1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	2000016c 	.word	0x2000016c

0800cc20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	6039      	str	r1, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2204      	movs	r2, #4
 800cc30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc32:	4b03      	ldr	r3, [pc, #12]	; (800cc40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	20000180 	.word	0x20000180

0800cc44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	6039      	str	r1, [r7, #0]
 800cc4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d105      	bne.n	800cc62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	4907      	ldr	r1, [pc, #28]	; (800cc78 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc5a:	4808      	ldr	r0, [pc, #32]	; (800cc7c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc5c:	f7ff fd0f 	bl	800c67e <USBD_GetString>
 800cc60:	e004      	b.n	800cc6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	4904      	ldr	r1, [pc, #16]	; (800cc78 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc66:	4805      	ldr	r0, [pc, #20]	; (800cc7c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc68:	f7ff fd09 	bl	800c67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	200018ac 	.word	0x200018ac
 800cc7c:	0800d90c 	.word	0x0800d90c

0800cc80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	4904      	ldr	r1, [pc, #16]	; (800cca0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc90:	4804      	ldr	r0, [pc, #16]	; (800cca4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc92:	f7ff fcf4 	bl	800c67e <USBD_GetString>
  return USBD_StrDesc;
 800cc96:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200018ac 	.word	0x200018ac
 800cca4:	0800d924 	.word	0x0800d924

0800cca8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	6039      	str	r1, [r7, #0]
 800ccb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	221a      	movs	r2, #26
 800ccb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccba:	f000 f843 	bl	800cd44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ccbe:	4b02      	ldr	r3, [pc, #8]	; (800ccc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20000184 	.word	0x20000184

0800cccc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	6039      	str	r1, [r7, #0]
 800ccd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d105      	bne.n	800ccea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	4907      	ldr	r1, [pc, #28]	; (800cd00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cce2:	4808      	ldr	r0, [pc, #32]	; (800cd04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cce4:	f7ff fccb 	bl	800c67e <USBD_GetString>
 800cce8:	e004      	b.n	800ccf4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	4904      	ldr	r1, [pc, #16]	; (800cd00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccee:	4805      	ldr	r0, [pc, #20]	; (800cd04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccf0:	f7ff fcc5 	bl	800c67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccf4:	4b02      	ldr	r3, [pc, #8]	; (800cd00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	200018ac 	.word	0x200018ac
 800cd04:	0800d938 	.word	0x0800d938

0800cd08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	6039      	str	r1, [r7, #0]
 800cd12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	4907      	ldr	r1, [pc, #28]	; (800cd3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd1e:	4808      	ldr	r0, [pc, #32]	; (800cd40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd20:	f7ff fcad 	bl	800c67e <USBD_GetString>
 800cd24:	e004      	b.n	800cd30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4904      	ldr	r1, [pc, #16]	; (800cd3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd2a:	4805      	ldr	r0, [pc, #20]	; (800cd40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd2c:	f7ff fca7 	bl	800c67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd30:	4b02      	ldr	r3, [pc, #8]	; (800cd3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200018ac 	.word	0x200018ac
 800cd40:	0800d944 	.word	0x0800d944

0800cd44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd4a:	4b0f      	ldr	r3, [pc, #60]	; (800cd88 <Get_SerialNum+0x44>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <Get_SerialNum+0x48>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd56:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <Get_SerialNum+0x4c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4413      	add	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d009      	beq.n	800cd7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd6a:	2208      	movs	r2, #8
 800cd6c:	4909      	ldr	r1, [pc, #36]	; (800cd94 <Get_SerialNum+0x50>)
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 f814 	bl	800cd9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd74:	2204      	movs	r2, #4
 800cd76:	4908      	ldr	r1, [pc, #32]	; (800cd98 <Get_SerialNum+0x54>)
 800cd78:	68b8      	ldr	r0, [r7, #8]
 800cd7a:	f000 f80f 	bl	800cd9c <IntToUnicode>
  }
}
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	1fff7590 	.word	0x1fff7590
 800cd8c:	1fff7594 	.word	0x1fff7594
 800cd90:	1fff7598 	.word	0x1fff7598
 800cd94:	20000186 	.word	0x20000186
 800cd98:	20000196 	.word	0x20000196

0800cd9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	4613      	mov	r3, r2
 800cda8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdae:	2300      	movs	r3, #0
 800cdb0:	75fb      	strb	r3, [r7, #23]
 800cdb2:	e027      	b.n	800ce04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	0f1b      	lsrs	r3, r3, #28
 800cdb8:	2b09      	cmp	r3, #9
 800cdba:	d80b      	bhi.n	800cdd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	0f1b      	lsrs	r3, r3, #28
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	440b      	add	r3, r1
 800cdcc:	3230      	adds	r2, #48	; 0x30
 800cdce:	b2d2      	uxtb	r2, r2
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	e00a      	b.n	800cdea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	0f1b      	lsrs	r3, r3, #28
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	7dfb      	ldrb	r3, [r7, #23]
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	4619      	mov	r1, r3
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	440b      	add	r3, r1
 800cde4:	3237      	adds	r2, #55	; 0x37
 800cde6:	b2d2      	uxtb	r2, r2
 800cde8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	3301      	adds	r3, #1
 800ce02:	75fb      	strb	r3, [r7, #23]
 800ce04:	7dfa      	ldrb	r2, [r7, #23]
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d3d3      	bcc.n	800cdb4 <IntToUnicode+0x18>
  }
}
 800ce0c:	bf00      	nop
 800ce0e:	bf00      	nop
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
	...

0800ce1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b0a4      	sub	sp, #144	; 0x90
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	605a      	str	r2, [r3, #4]
 800ce2e:	609a      	str	r2, [r3, #8]
 800ce30:	60da      	str	r2, [r3, #12]
 800ce32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce34:	f107 0314 	add.w	r3, r7, #20
 800ce38:	2268      	movs	r2, #104	; 0x68
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fc3d 	bl	800d6bc <memset>
  if(pcdHandle->Instance==USB)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a26      	ldr	r2, [pc, #152]	; (800cee0 <HAL_PCD_MspInit+0xc4>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d144      	bne.n	800ced6 <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ce4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ce52:	2300      	movs	r3, #0
 800ce54:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce56:	f107 0314 	add.w	r3, r7, #20
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7f9 fa34 	bl	80062c8 <HAL_RCCEx_PeriphCLKConfig>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ce66:	f7f4 fb17 	bl	8001498 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce6a:	4b1e      	ldr	r3, [pc, #120]	; (800cee4 <HAL_PCD_MspInit+0xc8>)
 800ce6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce6e:	4a1d      	ldr	r2, [pc, #116]	; (800cee4 <HAL_PCD_MspInit+0xc8>)
 800ce70:	f043 0301 	orr.w	r3, r3, #1
 800ce74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ce76:	4b1b      	ldr	r3, [pc, #108]	; (800cee4 <HAL_PCD_MspInit+0xc8>)
 800ce78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	613b      	str	r3, [r7, #16]
 800ce80:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce86:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce88:	2302      	movs	r3, #2
 800ce8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce94:	2303      	movs	r3, #3
 800ce96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800ce9a:	230a      	movs	r3, #10
 800ce9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cea0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800cea4:	4619      	mov	r1, r3
 800cea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ceaa:	f7f6 fa6b 	bl	8003384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ceae:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <HAL_PCD_MspInit+0xc8>)
 800ceb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb2:	4a0c      	ldr	r2, [pc, #48]	; (800cee4 <HAL_PCD_MspInit+0xc8>)
 800ceb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ceb8:	6593      	str	r3, [r2, #88]	; 0x58
 800ceba:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <HAL_PCD_MspInit+0xc8>)
 800cebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cec6:	2200      	movs	r2, #0
 800cec8:	2100      	movs	r1, #0
 800ceca:	2043      	movs	r0, #67	; 0x43
 800cecc:	f7f5 fa1f 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ced0:	2043      	movs	r0, #67	; 0x43
 800ced2:	f7f5 fa38 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ced6:	bf00      	nop
 800ced8:	3790      	adds	r7, #144	; 0x90
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	40006800 	.word	0x40006800
 800cee4:	40021000 	.word	0x40021000

0800cee8 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a0a      	ldr	r2, [pc, #40]	; (800cf20 <HAL_PCD_MspDeInit+0x38>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d10e      	bne.n	800cf18 <HAL_PCD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 800cefa:	4b0a      	ldr	r3, [pc, #40]	; (800cf24 <HAL_PCD_MspDeInit+0x3c>)
 800cefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cefe:	4a09      	ldr	r2, [pc, #36]	; (800cf24 <HAL_PCD_MspDeInit+0x3c>)
 800cf00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf04:	6593      	str	r3, [r2, #88]	; 0x58

    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800cf06:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cf0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cf0e:	f7f6 fbb3 	bl	8003678 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_IRQn);
 800cf12:	2043      	movs	r0, #67	; 0x43
 800cf14:	f7f5 fa25 	bl	8002362 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	40006800 	.word	0x40006800
 800cf24:	40021000 	.word	0x40021000

0800cf28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	4610      	mov	r0, r2
 800cf40:	f7fe fc2a 	bl	800b798 <USBD_LL_SetupStage>
}
 800cf44:	bf00      	nop
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cf5e:	78fa      	ldrb	r2, [r7, #3]
 800cf60:	6879      	ldr	r1, [r7, #4]
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	440b      	add	r3, r1
 800cf6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	78fb      	ldrb	r3, [r7, #3]
 800cf74:	4619      	mov	r1, r3
 800cf76:	f7fe fc64 	bl	800b842 <USBD_LL_DataOutStage>
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	440b      	add	r3, r1
 800cfa2:	3340      	adds	r3, #64	; 0x40
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	78fb      	ldrb	r3, [r7, #3]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	f7fe fcad 	bl	800b908 <USBD_LL_DataInStage>
}
 800cfae:	bf00      	nop
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b082      	sub	sp, #8
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fe fdc1 	bl	800bb4c <USBD_LL_SOF>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b084      	sub	sp, #16
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d001      	beq.n	800cfea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cfe6:	f7f4 fa57 	bl	8001498 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cff0:	7bfa      	ldrb	r2, [r7, #15]
 800cff2:	4611      	mov	r1, r2
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fd6b 	bl	800bad0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe fd17 	bl	800ba34 <USBD_LL_Reset>
}
 800d006:	bf00      	nop
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe fd66 	bl	800baf0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d005      	beq.n	800d038 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d02c:	4b04      	ldr	r3, [pc, #16]	; (800d040 <HAL_PCD_SuspendCallback+0x30>)
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	4a03      	ldr	r2, [pc, #12]	; (800d040 <HAL_PCD_SuspendCallback+0x30>)
 800d032:	f043 0306 	orr.w	r3, r3, #6
 800d036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	e000ed00 	.word	0xe000ed00

0800d044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d007      	beq.n	800d064 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d054:	4b08      	ldr	r3, [pc, #32]	; (800d078 <HAL_PCD_ResumeCallback+0x34>)
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	4a07      	ldr	r2, [pc, #28]	; (800d078 <HAL_PCD_ResumeCallback+0x34>)
 800d05a:	f023 0306 	bic.w	r3, r3, #6
 800d05e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d060:	f000 fae4 	bl	800d62c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fd56 	bl	800bb1c <USBD_LL_Resume>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	e000ed00 	.word	0xe000ed00

0800d07c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d084:	f7f8 fa52 	bl	800552c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d088:	4a2b      	ldr	r2, [pc, #172]	; (800d138 <USBD_LL_Init+0xbc>)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a29      	ldr	r2, [pc, #164]	; (800d138 <USBD_LL_Init+0xbc>)
 800d094:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d098:	4b27      	ldr	r3, [pc, #156]	; (800d138 <USBD_LL_Init+0xbc>)
 800d09a:	4a28      	ldr	r2, [pc, #160]	; (800d13c <USBD_LL_Init+0xc0>)
 800d09c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d09e:	4b26      	ldr	r3, [pc, #152]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0a0:	2208      	movs	r2, #8
 800d0a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d0a4:	4b24      	ldr	r3, [pc, #144]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0aa:	4b23      	ldr	r3, [pc, #140]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d0b0:	4b21      	ldr	r3, [pc, #132]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d0b6:	4b20      	ldr	r3, [pc, #128]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d0bc:	4b1e      	ldr	r3, [pc, #120]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d0c2:	4b1d      	ldr	r3, [pc, #116]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d0c8:	481b      	ldr	r0, [pc, #108]	; (800d138 <USBD_LL_Init+0xbc>)
 800d0ca:	f7f6 fbf9 	bl	80038c0 <HAL_PCD_Init>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d0d4:	f7f4 f9e0 	bl	8001498 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0de:	2318      	movs	r3, #24
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	f7f8 f943 	bl	800536e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0ee:	2358      	movs	r3, #88	; 0x58
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2180      	movs	r1, #128	; 0x80
 800d0f4:	f7f8 f93b 	bl	800536e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0fe:	23c0      	movs	r3, #192	; 0xc0
 800d100:	2200      	movs	r2, #0
 800d102:	2181      	movs	r1, #129	; 0x81
 800d104:	f7f8 f933 	bl	800536e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d10e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d112:	2200      	movs	r2, #0
 800d114:	2101      	movs	r1, #1
 800d116:	f7f8 f92a 	bl	800536e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d120:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d124:	2200      	movs	r2, #0
 800d126:	2182      	movs	r1, #130	; 0x82
 800d128:	f7f8 f921 	bl	800536e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20001aac 	.word	0x20001aac
 800d13c:	40006800 	.word	0x40006800

0800d140 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d156:	4618      	mov	r0, r3
 800d158:	f7f6 fcc9 	bl	8003aee <HAL_PCD_DeInit>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d160:	7bbb      	ldrb	r3, [r7, #14]
 800d162:	2b03      	cmp	r3, #3
 800d164:	d816      	bhi.n	800d194 <USBD_LL_DeInit+0x54>
 800d166:	a201      	add	r2, pc, #4	; (adr r2, 800d16c <USBD_LL_DeInit+0x2c>)
 800d168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16c:	0800d17d 	.word	0x0800d17d
 800d170:	0800d183 	.word	0x0800d183
 800d174:	0800d189 	.word	0x0800d189
 800d178:	0800d18f 	.word	0x0800d18f
    case HAL_OK :
      usb_status = USBD_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73fb      	strb	r3, [r7, #15]
    break;
 800d180:	e00b      	b.n	800d19a <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d182:	2303      	movs	r3, #3
 800d184:	73fb      	strb	r3, [r7, #15]
    break;
 800d186:	e008      	b.n	800d19a <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d188:	2301      	movs	r3, #1
 800d18a:	73fb      	strb	r3, [r7, #15]
    break;
 800d18c:	e005      	b.n	800d19a <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d18e:	2303      	movs	r3, #3
 800d190:	73fb      	strb	r3, [r7, #15]
    break;
 800d192:	e002      	b.n	800d19a <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d194:	2303      	movs	r3, #3
 800d196:	73fb      	strb	r3, [r7, #15]
    break;
 800d198:	bf00      	nop
  }
  return usb_status;
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f6 fcba 	bl	8003b34 <HAL_PCD_Start>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d816      	bhi.n	800d1f8 <USBD_LL_Start+0x54>
 800d1ca:	a201      	add	r2, pc, #4	; (adr r2, 800d1d0 <USBD_LL_Start+0x2c>)
 800d1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d0:	0800d1e1 	.word	0x0800d1e1
 800d1d4:	0800d1e7 	.word	0x0800d1e7
 800d1d8:	0800d1ed 	.word	0x0800d1ed
 800d1dc:	0800d1f3 	.word	0x0800d1f3
    case HAL_OK :
      usb_status = USBD_OK;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e4:	e00b      	b.n	800d1fe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ea:	e008      	b.n	800d1fe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f0:	e005      	b.n	800d1fe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f6:	e002      	b.n	800d1fe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d1fc:	bf00      	nop
  }
  return usb_status;
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d214:	2300      	movs	r3, #0
 800d216:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f6 fcaa 	bl	8003b78 <HAL_PCD_Stop>
 800d224:	4603      	mov	r3, r0
 800d226:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d228:	7bbb      	ldrb	r3, [r7, #14]
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d816      	bhi.n	800d25c <USBD_LL_Stop+0x54>
 800d22e:	a201      	add	r2, pc, #4	; (adr r2, 800d234 <USBD_LL_Stop+0x2c>)
 800d230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d234:	0800d245 	.word	0x0800d245
 800d238:	0800d24b 	.word	0x0800d24b
 800d23c:	0800d251 	.word	0x0800d251
 800d240:	0800d257 	.word	0x0800d257
    case HAL_OK :
      usb_status = USBD_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
    break;
 800d248:	e00b      	b.n	800d262 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d24a:	2303      	movs	r3, #3
 800d24c:	73fb      	strb	r3, [r7, #15]
    break;
 800d24e:	e008      	b.n	800d262 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d250:	2301      	movs	r3, #1
 800d252:	73fb      	strb	r3, [r7, #15]
    break;
 800d254:	e005      	b.n	800d262 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d256:	2303      	movs	r3, #3
 800d258:	73fb      	strb	r3, [r7, #15]
    break;
 800d25a:	e002      	b.n	800d262 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d25c:	2303      	movs	r3, #3
 800d25e:	73fb      	strb	r3, [r7, #15]
    break;
 800d260:	bf00      	nop
  }
  return usb_status;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	4608      	mov	r0, r1
 800d276:	4611      	mov	r1, r2
 800d278:	461a      	mov	r2, r3
 800d27a:	4603      	mov	r3, r0
 800d27c:	70fb      	strb	r3, [r7, #3]
 800d27e:	460b      	mov	r3, r1
 800d280:	70bb      	strb	r3, [r7, #2]
 800d282:	4613      	mov	r3, r2
 800d284:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d28a:	2300      	movs	r3, #0
 800d28c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d294:	78bb      	ldrb	r3, [r7, #2]
 800d296:	883a      	ldrh	r2, [r7, #0]
 800d298:	78f9      	ldrb	r1, [r7, #3]
 800d29a:	f7f6 fddb 	bl	8003e54 <HAL_PCD_EP_Open>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d2a2:	7bbb      	ldrb	r3, [r7, #14]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d817      	bhi.n	800d2d8 <USBD_LL_OpenEP+0x6c>
 800d2a8:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <USBD_LL_OpenEP+0x44>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2c1 	.word	0x0800d2c1
 800d2b4:	0800d2c7 	.word	0x0800d2c7
 800d2b8:	0800d2cd 	.word	0x0800d2cd
 800d2bc:	0800d2d3 	.word	0x0800d2d3
    case HAL_OK :
      usb_status = USBD_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c4:	e00b      	b.n	800d2de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ca:	e008      	b.n	800d2de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d0:	e005      	b.n	800d2de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d6:	e002      	b.n	800d2de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	73fb      	strb	r3, [r7, #15]
    break;
 800d2dc:	bf00      	nop
  }
  return usb_status;
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d302:	78fa      	ldrb	r2, [r7, #3]
 800d304:	4611      	mov	r1, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7f6 fe0c 	bl	8003f24 <HAL_PCD_EP_Close>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d310:	7bbb      	ldrb	r3, [r7, #14]
 800d312:	2b03      	cmp	r3, #3
 800d314:	d816      	bhi.n	800d344 <USBD_LL_CloseEP+0x5c>
 800d316:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <USBD_LL_CloseEP+0x34>)
 800d318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31c:	0800d32d 	.word	0x0800d32d
 800d320:	0800d333 	.word	0x0800d333
 800d324:	0800d339 	.word	0x0800d339
 800d328:	0800d33f 	.word	0x0800d33f
    case HAL_OK :
      usb_status = USBD_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
    break;
 800d330:	e00b      	b.n	800d34a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d332:	2303      	movs	r3, #3
 800d334:	73fb      	strb	r3, [r7, #15]
    break;
 800d336:	e008      	b.n	800d34a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d338:	2301      	movs	r3, #1
 800d33a:	73fb      	strb	r3, [r7, #15]
    break;
 800d33c:	e005      	b.n	800d34a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d33e:	2303      	movs	r3, #3
 800d340:	73fb      	strb	r3, [r7, #15]
    break;
 800d342:	e002      	b.n	800d34a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	73fb      	strb	r3, [r7, #15]
    break;
 800d348:	bf00      	nop
  }
  return usb_status;
 800d34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d360:	2300      	movs	r3, #0
 800d362:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d36e:	78fa      	ldrb	r2, [r7, #3]
 800d370:	4611      	mov	r1, r2
 800d372:	4618      	mov	r0, r3
 800d374:	f7f6 feba 	bl	80040ec <HAL_PCD_EP_SetStall>
 800d378:	4603      	mov	r3, r0
 800d37a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	2b03      	cmp	r3, #3
 800d380:	d816      	bhi.n	800d3b0 <USBD_LL_StallEP+0x5c>
 800d382:	a201      	add	r2, pc, #4	; (adr r2, 800d388 <USBD_LL_StallEP+0x34>)
 800d384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d388:	0800d399 	.word	0x0800d399
 800d38c:	0800d39f 	.word	0x0800d39f
 800d390:	0800d3a5 	.word	0x0800d3a5
 800d394:	0800d3ab 	.word	0x0800d3ab
    case HAL_OK :
      usb_status = USBD_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e00b      	b.n	800d3b6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e008      	b.n	800d3b6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	e005      	b.n	800d3b6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ae:	e002      	b.n	800d3b6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b4:	bf00      	nop
  }
  return usb_status;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3da:	78fa      	ldrb	r2, [r7, #3]
 800d3dc:	4611      	mov	r1, r2
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f6 fee6 	bl	80041b0 <HAL_PCD_EP_ClrStall>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ea:	2b03      	cmp	r3, #3
 800d3ec:	d816      	bhi.n	800d41c <USBD_LL_ClearStallEP+0x5c>
 800d3ee:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <USBD_LL_ClearStallEP+0x34>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d40b 	.word	0x0800d40b
 800d3fc:	0800d411 	.word	0x0800d411
 800d400:	0800d417 	.word	0x0800d417
    case HAL_OK :
      usb_status = USBD_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	e00b      	b.n	800d422 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d40a:	2303      	movs	r3, #3
 800d40c:	73fb      	strb	r3, [r7, #15]
    break;
 800d40e:	e008      	b.n	800d422 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d410:	2301      	movs	r3, #1
 800d412:	73fb      	strb	r3, [r7, #15]
    break;
 800d414:	e005      	b.n	800d422 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d416:	2303      	movs	r3, #3
 800d418:	73fb      	strb	r3, [r7, #15]
    break;
 800d41a:	e002      	b.n	800d422 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	73fb      	strb	r3, [r7, #15]
    break;
 800d420:	bf00      	nop
  }
  return usb_status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d43e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d444:	2b00      	cmp	r3, #0
 800d446:	da0c      	bge.n	800d462 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d448:	78fb      	ldrb	r3, [r7, #3]
 800d44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d44e:	68f9      	ldr	r1, [r7, #12]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	4613      	mov	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	00db      	lsls	r3, r3, #3
 800d45a:	440b      	add	r3, r1
 800d45c:	3306      	adds	r3, #6
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	e00b      	b.n	800d47a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d462:	78fb      	ldrb	r3, [r7, #3]
 800d464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d468:	68f9      	ldr	r1, [r7, #12]
 800d46a:	4613      	mov	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	440b      	add	r3, r1
 800d474:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800d478:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
	...

0800d488 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d494:	2300      	movs	r3, #0
 800d496:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4a2:	78fa      	ldrb	r2, [r7, #3]
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f6 fcaf 	bl	8003e0a <HAL_PCD_SetAddress>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4b0:	7bbb      	ldrb	r3, [r7, #14]
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d816      	bhi.n	800d4e4 <USBD_LL_SetUSBAddress+0x5c>
 800d4b6:	a201      	add	r2, pc, #4	; (adr r2, 800d4bc <USBD_LL_SetUSBAddress+0x34>)
 800d4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4bc:	0800d4cd 	.word	0x0800d4cd
 800d4c0:	0800d4d3 	.word	0x0800d4d3
 800d4c4:	0800d4d9 	.word	0x0800d4d9
 800d4c8:	0800d4df 	.word	0x0800d4df
    case HAL_OK :
      usb_status = USBD_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d0:	e00b      	b.n	800d4ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d6:	e008      	b.n	800d4ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	73fb      	strb	r3, [r7, #15]
    break;
 800d4dc:	e005      	b.n	800d4ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e2:	e002      	b.n	800d4ea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e8:	bf00      	nop
  }
  return usb_status;
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	607a      	str	r2, [r7, #4]
 800d4fe:	603b      	str	r3, [r7, #0]
 800d500:	460b      	mov	r3, r1
 800d502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d504:	2300      	movs	r3, #0
 800d506:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d512:	7af9      	ldrb	r1, [r7, #11]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	f7f6 fda4 	bl	8004064 <HAL_PCD_EP_Transmit>
 800d51c:	4603      	mov	r3, r0
 800d51e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d520:	7dbb      	ldrb	r3, [r7, #22]
 800d522:	2b03      	cmp	r3, #3
 800d524:	d816      	bhi.n	800d554 <USBD_LL_Transmit+0x60>
 800d526:	a201      	add	r2, pc, #4	; (adr r2, 800d52c <USBD_LL_Transmit+0x38>)
 800d528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d52c:	0800d53d 	.word	0x0800d53d
 800d530:	0800d543 	.word	0x0800d543
 800d534:	0800d549 	.word	0x0800d549
 800d538:	0800d54f 	.word	0x0800d54f
    case HAL_OK :
      usb_status = USBD_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	75fb      	strb	r3, [r7, #23]
    break;
 800d540:	e00b      	b.n	800d55a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d542:	2303      	movs	r3, #3
 800d544:	75fb      	strb	r3, [r7, #23]
    break;
 800d546:	e008      	b.n	800d55a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d548:	2301      	movs	r3, #1
 800d54a:	75fb      	strb	r3, [r7, #23]
    break;
 800d54c:	e005      	b.n	800d55a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d54e:	2303      	movs	r3, #3
 800d550:	75fb      	strb	r3, [r7, #23]
    break;
 800d552:	e002      	b.n	800d55a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d554:	2303      	movs	r3, #3
 800d556:	75fb      	strb	r3, [r7, #23]
    break;
 800d558:	bf00      	nop
  }
  return usb_status;
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	607a      	str	r2, [r7, #4]
 800d56e:	603b      	str	r3, [r7, #0]
 800d570:	460b      	mov	r3, r1
 800d572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d582:	7af9      	ldrb	r1, [r7, #11]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	f7f6 fd16 	bl	8003fb8 <HAL_PCD_EP_Receive>
 800d58c:	4603      	mov	r3, r0
 800d58e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d590:	7dbb      	ldrb	r3, [r7, #22]
 800d592:	2b03      	cmp	r3, #3
 800d594:	d816      	bhi.n	800d5c4 <USBD_LL_PrepareReceive+0x60>
 800d596:	a201      	add	r2, pc, #4	; (adr r2, 800d59c <USBD_LL_PrepareReceive+0x38>)
 800d598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59c:	0800d5ad 	.word	0x0800d5ad
 800d5a0:	0800d5b3 	.word	0x0800d5b3
 800d5a4:	0800d5b9 	.word	0x0800d5b9
 800d5a8:	0800d5bf 	.word	0x0800d5bf
    case HAL_OK :
      usb_status = USBD_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	75fb      	strb	r3, [r7, #23]
    break;
 800d5b0:	e00b      	b.n	800d5ca <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	75fb      	strb	r3, [r7, #23]
    break;
 800d5b6:	e008      	b.n	800d5ca <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	75fb      	strb	r3, [r7, #23]
    break;
 800d5bc:	e005      	b.n	800d5ca <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5be:	2303      	movs	r3, #3
 800d5c0:	75fb      	strb	r3, [r7, #23]
    break;
 800d5c2:	e002      	b.n	800d5ca <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	75fb      	strb	r3, [r7, #23]
    break;
 800d5c8:	bf00      	nop
  }
  return usb_status;
 800d5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5e6:	78fa      	ldrb	r2, [r7, #3]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7f6 fd22 	bl	8004034 <HAL_PCD_EP_GetRxCount>
 800d5f0:	4603      	mov	r3, r0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d604:	4b03      	ldr	r3, [pc, #12]	; (800d614 <USBD_static_malloc+0x18>)
}
 800d606:	4618      	mov	r0, r3
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	20001da4 	.word	0x20001da4

0800d618 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]

}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d630:	f7f3 fc8a 	bl	8000f48 <SystemClock_Config>
}
 800d634:	bf00      	nop
 800d636:	bd80      	pop	{r7, pc}

0800d638 <calloc>:
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <calloc+0xc>)
 800d63a:	460a      	mov	r2, r1
 800d63c:	4601      	mov	r1, r0
 800d63e:	6818      	ldr	r0, [r3, #0]
 800d640:	f000 b844 	b.w	800d6cc <_calloc_r>
 800d644:	200001a0 	.word	0x200001a0

0800d648 <__errno>:
 800d648:	4b01      	ldr	r3, [pc, #4]	; (800d650 <__errno+0x8>)
 800d64a:	6818      	ldr	r0, [r3, #0]
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	200001a0 	.word	0x200001a0

0800d654 <__libc_init_array>:
 800d654:	b570      	push	{r4, r5, r6, lr}
 800d656:	4d0d      	ldr	r5, [pc, #52]	; (800d68c <__libc_init_array+0x38>)
 800d658:	4c0d      	ldr	r4, [pc, #52]	; (800d690 <__libc_init_array+0x3c>)
 800d65a:	1b64      	subs	r4, r4, r5
 800d65c:	10a4      	asrs	r4, r4, #2
 800d65e:	2600      	movs	r6, #0
 800d660:	42a6      	cmp	r6, r4
 800d662:	d109      	bne.n	800d678 <__libc_init_array+0x24>
 800d664:	4d0b      	ldr	r5, [pc, #44]	; (800d694 <__libc_init_array+0x40>)
 800d666:	4c0c      	ldr	r4, [pc, #48]	; (800d698 <__libc_init_array+0x44>)
 800d668:	f000 f944 	bl	800d8f4 <_init>
 800d66c:	1b64      	subs	r4, r4, r5
 800d66e:	10a4      	asrs	r4, r4, #2
 800d670:	2600      	movs	r6, #0
 800d672:	42a6      	cmp	r6, r4
 800d674:	d105      	bne.n	800d682 <__libc_init_array+0x2e>
 800d676:	bd70      	pop	{r4, r5, r6, pc}
 800d678:	f855 3b04 	ldr.w	r3, [r5], #4
 800d67c:	4798      	blx	r3
 800d67e:	3601      	adds	r6, #1
 800d680:	e7ee      	b.n	800d660 <__libc_init_array+0xc>
 800d682:	f855 3b04 	ldr.w	r3, [r5], #4
 800d686:	4798      	blx	r3
 800d688:	3601      	adds	r6, #1
 800d68a:	e7f2      	b.n	800d672 <__libc_init_array+0x1e>
 800d68c:	0800d9a4 	.word	0x0800d9a4
 800d690:	0800d9a4 	.word	0x0800d9a4
 800d694:	0800d9a4 	.word	0x0800d9a4
 800d698:	0800d9a8 	.word	0x0800d9a8

0800d69c <malloc>:
 800d69c:	4b02      	ldr	r3, [pc, #8]	; (800d6a8 <malloc+0xc>)
 800d69e:	4601      	mov	r1, r0
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	f000 b895 	b.w	800d7d0 <_malloc_r>
 800d6a6:	bf00      	nop
 800d6a8:	200001a0 	.word	0x200001a0

0800d6ac <free>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	; (800d6b8 <free+0xc>)
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	6818      	ldr	r0, [r3, #0]
 800d6b2:	f000 b821 	b.w	800d6f8 <_free_r>
 800d6b6:	bf00      	nop
 800d6b8:	200001a0 	.word	0x200001a0

0800d6bc <memset>:
 800d6bc:	4402      	add	r2, r0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d100      	bne.n	800d6c6 <memset+0xa>
 800d6c4:	4770      	bx	lr
 800d6c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ca:	e7f9      	b.n	800d6c0 <memset+0x4>

0800d6cc <_calloc_r>:
 800d6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ce:	fba1 2402 	umull	r2, r4, r1, r2
 800d6d2:	b94c      	cbnz	r4, 800d6e8 <_calloc_r+0x1c>
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	9201      	str	r2, [sp, #4]
 800d6d8:	f000 f87a 	bl	800d7d0 <_malloc_r>
 800d6dc:	9a01      	ldr	r2, [sp, #4]
 800d6de:	4605      	mov	r5, r0
 800d6e0:	b930      	cbnz	r0, 800d6f0 <_calloc_r+0x24>
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	b003      	add	sp, #12
 800d6e6:	bd30      	pop	{r4, r5, pc}
 800d6e8:	220c      	movs	r2, #12
 800d6ea:	6002      	str	r2, [r0, #0]
 800d6ec:	2500      	movs	r5, #0
 800d6ee:	e7f8      	b.n	800d6e2 <_calloc_r+0x16>
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	f7ff ffe3 	bl	800d6bc <memset>
 800d6f6:	e7f4      	b.n	800d6e2 <_calloc_r+0x16>

0800d6f8 <_free_r>:
 800d6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6fa:	2900      	cmp	r1, #0
 800d6fc:	d044      	beq.n	800d788 <_free_r+0x90>
 800d6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d702:	9001      	str	r0, [sp, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f1a1 0404 	sub.w	r4, r1, #4
 800d70a:	bfb8      	it	lt
 800d70c:	18e4      	addlt	r4, r4, r3
 800d70e:	f000 f8e3 	bl	800d8d8 <__malloc_lock>
 800d712:	4a1e      	ldr	r2, [pc, #120]	; (800d78c <_free_r+0x94>)
 800d714:	9801      	ldr	r0, [sp, #4]
 800d716:	6813      	ldr	r3, [r2, #0]
 800d718:	b933      	cbnz	r3, 800d728 <_free_r+0x30>
 800d71a:	6063      	str	r3, [r4, #4]
 800d71c:	6014      	str	r4, [r2, #0]
 800d71e:	b003      	add	sp, #12
 800d720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d724:	f000 b8de 	b.w	800d8e4 <__malloc_unlock>
 800d728:	42a3      	cmp	r3, r4
 800d72a:	d908      	bls.n	800d73e <_free_r+0x46>
 800d72c:	6825      	ldr	r5, [r4, #0]
 800d72e:	1961      	adds	r1, r4, r5
 800d730:	428b      	cmp	r3, r1
 800d732:	bf01      	itttt	eq
 800d734:	6819      	ldreq	r1, [r3, #0]
 800d736:	685b      	ldreq	r3, [r3, #4]
 800d738:	1949      	addeq	r1, r1, r5
 800d73a:	6021      	streq	r1, [r4, #0]
 800d73c:	e7ed      	b.n	800d71a <_free_r+0x22>
 800d73e:	461a      	mov	r2, r3
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	b10b      	cbz	r3, 800d748 <_free_r+0x50>
 800d744:	42a3      	cmp	r3, r4
 800d746:	d9fa      	bls.n	800d73e <_free_r+0x46>
 800d748:	6811      	ldr	r1, [r2, #0]
 800d74a:	1855      	adds	r5, r2, r1
 800d74c:	42a5      	cmp	r5, r4
 800d74e:	d10b      	bne.n	800d768 <_free_r+0x70>
 800d750:	6824      	ldr	r4, [r4, #0]
 800d752:	4421      	add	r1, r4
 800d754:	1854      	adds	r4, r2, r1
 800d756:	42a3      	cmp	r3, r4
 800d758:	6011      	str	r1, [r2, #0]
 800d75a:	d1e0      	bne.n	800d71e <_free_r+0x26>
 800d75c:	681c      	ldr	r4, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	6053      	str	r3, [r2, #4]
 800d762:	4421      	add	r1, r4
 800d764:	6011      	str	r1, [r2, #0]
 800d766:	e7da      	b.n	800d71e <_free_r+0x26>
 800d768:	d902      	bls.n	800d770 <_free_r+0x78>
 800d76a:	230c      	movs	r3, #12
 800d76c:	6003      	str	r3, [r0, #0]
 800d76e:	e7d6      	b.n	800d71e <_free_r+0x26>
 800d770:	6825      	ldr	r5, [r4, #0]
 800d772:	1961      	adds	r1, r4, r5
 800d774:	428b      	cmp	r3, r1
 800d776:	bf04      	itt	eq
 800d778:	6819      	ldreq	r1, [r3, #0]
 800d77a:	685b      	ldreq	r3, [r3, #4]
 800d77c:	6063      	str	r3, [r4, #4]
 800d77e:	bf04      	itt	eq
 800d780:	1949      	addeq	r1, r1, r5
 800d782:	6021      	streq	r1, [r4, #0]
 800d784:	6054      	str	r4, [r2, #4]
 800d786:	e7ca      	b.n	800d71e <_free_r+0x26>
 800d788:	b003      	add	sp, #12
 800d78a:	bd30      	pop	{r4, r5, pc}
 800d78c:	20001fc4 	.word	0x20001fc4

0800d790 <sbrk_aligned>:
 800d790:	b570      	push	{r4, r5, r6, lr}
 800d792:	4e0e      	ldr	r6, [pc, #56]	; (800d7cc <sbrk_aligned+0x3c>)
 800d794:	460c      	mov	r4, r1
 800d796:	6831      	ldr	r1, [r6, #0]
 800d798:	4605      	mov	r5, r0
 800d79a:	b911      	cbnz	r1, 800d7a2 <sbrk_aligned+0x12>
 800d79c:	f000 f88c 	bl	800d8b8 <_sbrk_r>
 800d7a0:	6030      	str	r0, [r6, #0]
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	f000 f887 	bl	800d8b8 <_sbrk_r>
 800d7aa:	1c43      	adds	r3, r0, #1
 800d7ac:	d00a      	beq.n	800d7c4 <sbrk_aligned+0x34>
 800d7ae:	1cc4      	adds	r4, r0, #3
 800d7b0:	f024 0403 	bic.w	r4, r4, #3
 800d7b4:	42a0      	cmp	r0, r4
 800d7b6:	d007      	beq.n	800d7c8 <sbrk_aligned+0x38>
 800d7b8:	1a21      	subs	r1, r4, r0
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f000 f87c 	bl	800d8b8 <_sbrk_r>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d101      	bne.n	800d7c8 <sbrk_aligned+0x38>
 800d7c4:	f04f 34ff 	mov.w	r4, #4294967295
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	bd70      	pop	{r4, r5, r6, pc}
 800d7cc:	20001fc8 	.word	0x20001fc8

0800d7d0 <_malloc_r>:
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	1ccd      	adds	r5, r1, #3
 800d7d6:	f025 0503 	bic.w	r5, r5, #3
 800d7da:	3508      	adds	r5, #8
 800d7dc:	2d0c      	cmp	r5, #12
 800d7de:	bf38      	it	cc
 800d7e0:	250c      	movcc	r5, #12
 800d7e2:	2d00      	cmp	r5, #0
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	db01      	blt.n	800d7ec <_malloc_r+0x1c>
 800d7e8:	42a9      	cmp	r1, r5
 800d7ea:	d905      	bls.n	800d7f8 <_malloc_r+0x28>
 800d7ec:	230c      	movs	r3, #12
 800d7ee:	603b      	str	r3, [r7, #0]
 800d7f0:	2600      	movs	r6, #0
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f8:	4e2e      	ldr	r6, [pc, #184]	; (800d8b4 <_malloc_r+0xe4>)
 800d7fa:	f000 f86d 	bl	800d8d8 <__malloc_lock>
 800d7fe:	6833      	ldr	r3, [r6, #0]
 800d800:	461c      	mov	r4, r3
 800d802:	bb34      	cbnz	r4, 800d852 <_malloc_r+0x82>
 800d804:	4629      	mov	r1, r5
 800d806:	4638      	mov	r0, r7
 800d808:	f7ff ffc2 	bl	800d790 <sbrk_aligned>
 800d80c:	1c43      	adds	r3, r0, #1
 800d80e:	4604      	mov	r4, r0
 800d810:	d14d      	bne.n	800d8ae <_malloc_r+0xde>
 800d812:	6834      	ldr	r4, [r6, #0]
 800d814:	4626      	mov	r6, r4
 800d816:	2e00      	cmp	r6, #0
 800d818:	d140      	bne.n	800d89c <_malloc_r+0xcc>
 800d81a:	6823      	ldr	r3, [r4, #0]
 800d81c:	4631      	mov	r1, r6
 800d81e:	4638      	mov	r0, r7
 800d820:	eb04 0803 	add.w	r8, r4, r3
 800d824:	f000 f848 	bl	800d8b8 <_sbrk_r>
 800d828:	4580      	cmp	r8, r0
 800d82a:	d13a      	bne.n	800d8a2 <_malloc_r+0xd2>
 800d82c:	6821      	ldr	r1, [r4, #0]
 800d82e:	3503      	adds	r5, #3
 800d830:	1a6d      	subs	r5, r5, r1
 800d832:	f025 0503 	bic.w	r5, r5, #3
 800d836:	3508      	adds	r5, #8
 800d838:	2d0c      	cmp	r5, #12
 800d83a:	bf38      	it	cc
 800d83c:	250c      	movcc	r5, #12
 800d83e:	4629      	mov	r1, r5
 800d840:	4638      	mov	r0, r7
 800d842:	f7ff ffa5 	bl	800d790 <sbrk_aligned>
 800d846:	3001      	adds	r0, #1
 800d848:	d02b      	beq.n	800d8a2 <_malloc_r+0xd2>
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	442b      	add	r3, r5
 800d84e:	6023      	str	r3, [r4, #0]
 800d850:	e00e      	b.n	800d870 <_malloc_r+0xa0>
 800d852:	6822      	ldr	r2, [r4, #0]
 800d854:	1b52      	subs	r2, r2, r5
 800d856:	d41e      	bmi.n	800d896 <_malloc_r+0xc6>
 800d858:	2a0b      	cmp	r2, #11
 800d85a:	d916      	bls.n	800d88a <_malloc_r+0xba>
 800d85c:	1961      	adds	r1, r4, r5
 800d85e:	42a3      	cmp	r3, r4
 800d860:	6025      	str	r5, [r4, #0]
 800d862:	bf18      	it	ne
 800d864:	6059      	strne	r1, [r3, #4]
 800d866:	6863      	ldr	r3, [r4, #4]
 800d868:	bf08      	it	eq
 800d86a:	6031      	streq	r1, [r6, #0]
 800d86c:	5162      	str	r2, [r4, r5]
 800d86e:	604b      	str	r3, [r1, #4]
 800d870:	4638      	mov	r0, r7
 800d872:	f104 060b 	add.w	r6, r4, #11
 800d876:	f000 f835 	bl	800d8e4 <__malloc_unlock>
 800d87a:	f026 0607 	bic.w	r6, r6, #7
 800d87e:	1d23      	adds	r3, r4, #4
 800d880:	1af2      	subs	r2, r6, r3
 800d882:	d0b6      	beq.n	800d7f2 <_malloc_r+0x22>
 800d884:	1b9b      	subs	r3, r3, r6
 800d886:	50a3      	str	r3, [r4, r2]
 800d888:	e7b3      	b.n	800d7f2 <_malloc_r+0x22>
 800d88a:	6862      	ldr	r2, [r4, #4]
 800d88c:	42a3      	cmp	r3, r4
 800d88e:	bf0c      	ite	eq
 800d890:	6032      	streq	r2, [r6, #0]
 800d892:	605a      	strne	r2, [r3, #4]
 800d894:	e7ec      	b.n	800d870 <_malloc_r+0xa0>
 800d896:	4623      	mov	r3, r4
 800d898:	6864      	ldr	r4, [r4, #4]
 800d89a:	e7b2      	b.n	800d802 <_malloc_r+0x32>
 800d89c:	4634      	mov	r4, r6
 800d89e:	6876      	ldr	r6, [r6, #4]
 800d8a0:	e7b9      	b.n	800d816 <_malloc_r+0x46>
 800d8a2:	230c      	movs	r3, #12
 800d8a4:	603b      	str	r3, [r7, #0]
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	f000 f81c 	bl	800d8e4 <__malloc_unlock>
 800d8ac:	e7a1      	b.n	800d7f2 <_malloc_r+0x22>
 800d8ae:	6025      	str	r5, [r4, #0]
 800d8b0:	e7de      	b.n	800d870 <_malloc_r+0xa0>
 800d8b2:	bf00      	nop
 800d8b4:	20001fc4 	.word	0x20001fc4

0800d8b8 <_sbrk_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4d06      	ldr	r5, [pc, #24]	; (800d8d4 <_sbrk_r+0x1c>)
 800d8bc:	2300      	movs	r3, #0
 800d8be:	4604      	mov	r4, r0
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	602b      	str	r3, [r5, #0]
 800d8c4:	f7f4 fac0 	bl	8001e48 <_sbrk>
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	d102      	bne.n	800d8d2 <_sbrk_r+0x1a>
 800d8cc:	682b      	ldr	r3, [r5, #0]
 800d8ce:	b103      	cbz	r3, 800d8d2 <_sbrk_r+0x1a>
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	bd38      	pop	{r3, r4, r5, pc}
 800d8d4:	20001fcc 	.word	0x20001fcc

0800d8d8 <__malloc_lock>:
 800d8d8:	4801      	ldr	r0, [pc, #4]	; (800d8e0 <__malloc_lock+0x8>)
 800d8da:	f000 b809 	b.w	800d8f0 <__retarget_lock_acquire_recursive>
 800d8de:	bf00      	nop
 800d8e0:	20001fd0 	.word	0x20001fd0

0800d8e4 <__malloc_unlock>:
 800d8e4:	4801      	ldr	r0, [pc, #4]	; (800d8ec <__malloc_unlock+0x8>)
 800d8e6:	f000 b804 	b.w	800d8f2 <__retarget_lock_release_recursive>
 800d8ea:	bf00      	nop
 800d8ec:	20001fd0 	.word	0x20001fd0

0800d8f0 <__retarget_lock_acquire_recursive>:
 800d8f0:	4770      	bx	lr

0800d8f2 <__retarget_lock_release_recursive>:
 800d8f2:	4770      	bx	lr

0800d8f4 <_init>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr

0800d900 <_fini>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	bf00      	nop
 800d904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d906:	bc08      	pop	{r3}
 800d908:	469e      	mov	lr, r3
 800d90a:	4770      	bx	lr
