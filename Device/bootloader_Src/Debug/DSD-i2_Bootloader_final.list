
DSD-i2_Bootloader_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800cee0  0800cee0  0001cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf70  0800cf70  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf70  0800cf70  0001cf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf78  0800cf78  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf7c  0800cf7c  0001cf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800cf80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000204  0800d184  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eec  0800d184  00021eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a225  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000445f  00000000  00000000  0003a459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a3f  00000000  00000000  00040d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a22e  00000000  00000000  0006774f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d63fa  00000000  00000000  0008197d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157d77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e8c  00000000  00000000  00157dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000204 	.word	0x20000204
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800cec8 	.word	0x0800cec8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000208 	.word	0x20000208
 80001d0:	0800cec8 	.word	0x0800cec8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <reset>:
static uint32_t calculate_crc(CRC_HandleTypeDef hcrc);
static void reset(uint8_t reply);
/*********************************************************************************************************************************/

static void reset(uint8_t reply)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	if (reply)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d003      	beq.n	80004f0 <reset+0x18>
	{
		send_reply((uint8_t) NACK);
 80004e8:	206e      	movs	r0, #110	; 0x6e
 80004ea:	f000 fac9 	bl	8000a80 <send_reply>
 80004ee:	e002      	b.n	80004f6 <reset+0x1e>
	}
	else
	{
		send_reply((uint8_t) ACK);
 80004f0:	2079      	movs	r0, #121	; 0x79
 80004f2:	f000 fac5 	bl	8000a80 <send_reply>
	}
	/*Reset STM*/
	HAL_Delay(100);
 80004f6:	2064      	movs	r0, #100	; 0x64
 80004f8:	f001 fc58 	bl	8001dac <HAL_Delay>
	HAL_NVIC_SystemReset();
 80004fc:	f001 fdc7 	bl	800208e <HAL_NVIC_SystemReset>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <bootloader_init>:
  *
  * @param
  * @retval
  */
uint8_t bootloader_init(void)
{
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af06      	add	r7, sp, #24
	if (*(volatile uint64_t*)(USER_APPLICATION_STARTING_ADDRESS) == -1 || \
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <bootloader_init+0x94>)
 8000510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000518:	bf08      	it	eq
 800051a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800051e:	d02b      	beq.n	8000578 <bootloader_init+0x70>
			((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) == 0 || \
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <bootloader_init+0x98>)
 8000522:	681b      	ldr	r3, [r3, #0]
	if (*(volatile uint64_t*)(USER_APPLICATION_STARTING_ADDRESS) == -1 || \
 8000524:	2b00      	cmp	r3, #0
 8000526:	d027      	beq.n	8000578 <bootloader_init+0x70>
			(((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) > (FLASH_SIZE-BOOTLOADER_SIZE)) || \
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <bootloader_init+0x98>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <bootloader_init+0x9c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	b29b      	uxth	r3, r3
 8000532:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000536:	428b      	cmp	r3, r1
 8000538:	d007      	beq.n	800054a <bootloader_init+0x42>
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <bootloader_init+0x9c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	0299      	lsls	r1, r3, #10
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <bootloader_init+0xa0>)
 8000542:	400b      	ands	r3, r1
 8000544:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000548:	e001      	b.n	800054e <bootloader_init+0x46>
 800054a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
			((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) == 0 || \
 800054e:	4293      	cmp	r3, r2
 8000550:	d312      	bcc.n	8000578 <bootloader_init+0x70>
			(*(volatile uint32_t*)(USER_APPLICATION_HEADER_CRC_ADDRESS) != calculate_crc(hcrc)))
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <bootloader_init+0xa4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4e15      	ldr	r6, [pc, #84]	; (80005b0 <bootloader_init+0xa8>)
 800055a:	466d      	mov	r5, sp
 800055c:	f106 0410 	add.w	r4, r6, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	602b      	str	r3, [r5, #0]
 8000568:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800056c:	f000 fa9a 	bl	8000aa4 <calculate_crc>
 8000570:	4603      	mov	r3, r0
			(((*(volatile uint32_t*)(USER_APPLICATION_HEADER_SIZE_ADDRESS)) & 0xFFFFFFFF) > (FLASH_SIZE-BOOTLOADER_SIZE)) || \
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	d006      	beq.n	8000586 <bootloader_init+0x7e>
	{
		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <bootloader_init+0xac>)
 800057e:	f002 fff5 	bl	800356c <HAL_GPIO_WritePin>
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e005      	b.n	8000592 <bootloader_init+0x8a>
	}
	else
	{
		HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2108      	movs	r1, #8
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <bootloader_init+0xac>)
 800058c:	f002 ffee 	bl	800356c <HAL_GPIO_WritePin>
		return 0;
 8000590:	2300      	movs	r3, #0
	}
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059a:	bf00      	nop
 800059c:	08010000 	.word	0x08010000
 80005a0:	08010194 	.word	0x08010194
 80005a4:	1fff75e0 	.word	0x1fff75e0
 80005a8:	03fffc00 	.word	0x03fffc00
 80005ac:	08010198 	.word	0x08010198
 80005b0:	200002a0 	.word	0x200002a0
 80005b4:	48000400 	.word	0x48000400

080005b8 <command_handler>:
  *
  * @param
  * @retval
  */
void command_handler(uint32_t command)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	switch(command)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a19      	ldr	r2, [pc, #100]	; (8000628 <command_handler+0x70>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d01a      	beq.n	80005fe <command_handler+0x46>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <command_handler+0x70>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d826      	bhi.n	800061e <command_handler+0x66>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <command_handler+0x74>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d004      	beq.n	80005e2 <command_handler+0x2a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <command_handler+0x78>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d007      	beq.n	80005f0 <command_handler+0x38>
		{
			reset(fpga_usb_to_uart());
		}
	break;
	}
}
 80005e0:	e01d      	b.n	800061e <command_handler+0x66>
		reset(flash_stm_program());
 80005e2:	f000 f84d 	bl	8000680 <flash_stm_program>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff75 	bl	80004d8 <reset>
	break;
 80005ee:	e016      	b.n	800061e <command_handler+0x66>
		reset(flash_esp_program());
 80005f0:	f000 fad2 	bl	8000b98 <flash_esp_program>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff6e 	bl	80004d8 <reset>
	break;
 80005fc:	e00f      	b.n	800061e <command_handler+0x66>
		if (conf_ps_fpga())
 80005fe:	f000 fb45 	bl	8000c8c <conf_ps_fpga>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d003      	beq.n	8000610 <command_handler+0x58>
			reset(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff ff65 	bl	80004d8 <reset>
	break;
 800060e:	e005      	b.n	800061c <command_handler+0x64>
			reset(fpga_usb_to_uart());
 8000610:	f000 fc4e 	bl	8000eb0 <fpga_usb_to_uart>
 8000614:	4603      	mov	r3, r0
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff5e 	bl	80004d8 <reset>
	break;
 800061c:	bf00      	nop
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	f1a541c1 	.word	0xf1a541c1
 800062c:	57932145 	.word	0x57932145
 8000630:	5ec932c3 	.word	0x5ec932c3

08000634 <jump_to_user_application>:
  *
  * @param
  * @retval
  */
void jump_to_user_application()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
	typedef void (*func_ptr)(void);
	func_ptr jump_to_app;
	uint32_t address = (uint32_t) USER_APPLICATION_STARTING_ADDRESS;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <jump_to_user_application+0x44>)
 800063c:	60fb      	str	r3, [r7, #12]
	uint32_t stack = (uint32_t)*((uint32_t*)address);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	60bb      	str	r3, [r7, #8]
	jump_to_app = (func_ptr)*(uint32_t*)(address+4);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3304      	adds	r3, #4
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	607b      	str	r3, [r7, #4]
	deInitializer();
 800064c:	f000 fe90 	bl	8001370 <deInitializer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	f383 8808 	msr	MSP, r3
}
 800065e:	bf00      	nop
	__disable_irq();
	__set_MSP(stack);
	SCB->VTOR = address;
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <jump_to_user_application+0x48>)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
}
 8000668:	bf00      	nop
	__enable_irq();
	jump_to_app();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08010000 	.word	0x08010000
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <flash_stm_program>:
  * @param
  * @retval
  */

static uint8_t flash_stm_program()
{
 8000680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000684:	b0ba      	sub	sp, #232	; 0xe8
 8000686:	af00      	add	r7, sp, #0
	uint32_t address = (uint32_t)USER_APPLICATION_STARTING_ADDRESS;
 8000688:	4bbe      	ldr	r3, [pc, #760]	; (8000984 <flash_stm_program+0x304>)
 800068a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint32_t file_size;
	uint32_t chunk_size = 64; /*Size of a usb packet*/
 800068e:	2340      	movs	r3, #64	; 0x40
 8000690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t bytes_written = 0; /*bytes written in flash*/
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	uint32_t loop_correction = 8; /*correcting the loop which make the bytes into doublewords depending on the leftover bytes*/
 800069a:	2308      	movs	r3, #8
 800069c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint8_t data[64];
	uint64_t dword = 0;
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	send_reply((uint8_t) ACK);
 80006ac:	2079      	movs	r0, #121	; 0x79
 80006ae:	f000 f9e7 	bl	8000a80 <send_reply>

	if (usb_cmd_timeout(50))
 80006b2:	2032      	movs	r0, #50	; 0x32
 80006b4:	f000 f9c8 	bl	8000a48 <usb_cmd_timeout>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <flash_stm_program+0x42>
	{
		return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e1ba      	b.n	8000a38 <flash_stm_program+0x3b8>
	}
	else
	{
		uint8_t temp_num[4];
		CDC_Read_FS(temp_num,sizeof(temp_num));
 80006c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006c6:	2104      	movs	r1, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00b fd35 	bl	800c138 <CDC_Read_FS>
		file_size = (uint32_t)(temp_num[0]<<24) | (uint32_t)(temp_num[1]<<16) | (uint32_t)(temp_num[2]<<8) | (uint32_t)(temp_num[3]);
 80006ce:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80006d2:	061b      	lsls	r3, r3, #24
 80006d4:	461a      	mov	r2, r3
 80006d6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	431a      	orrs	r2, r3
 80006de:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	431a      	orrs	r2, r3
 80006e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		/*if the number of bytes is 0 or bigger than the available size then something is wrong*/
		if (file_size == 0 || file_size > (FLASH_END - USER_APPLICATION_STARTING_ADDRESS))
 80006f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d004      	beq.n	8000702 <flash_stm_program+0x82>
 80006f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80006fc:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000700:	d301      	bcc.n	8000706 <flash_stm_program+0x86>
		{
			return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e198      	b.n	8000a38 <flash_stm_program+0x3b8>
		}

		/*Notify the host that we started erasing*/
		send_reply((uint8_t) ACK);
 8000706:	2079      	movs	r0, #121	; 0x79
 8000708:	f000 f9ba 	bl	8000a80 <send_reply>

		/*Calculate the first page that we need to erase*/
		uint8_t first_page = (USER_APPLICATION_STARTING_ADDRESS - FLASH_BASE) / 0x800; /*0x800 is the page size*/
 800070c:	2320      	movs	r3, #32
 800070e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

		/*Erase part*/
		FLASH_EraseInitTypeDef pEraseInit;
		pEraseInit.TypeErase=FLASH_TYPEERASE_PAGES;
 8000712:	2300      	movs	r3, #0
 8000714:	66fb      	str	r3, [r7, #108]	; 0x6c
		pEraseInit.Banks=FLASH_BANK_1;
 8000716:	2301      	movs	r3, #1
 8000718:	673b      	str	r3, [r7, #112]	; 0x70
		pEraseInit.Page = first_page;
 800071a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800071e:	677b      	str	r3, [r7, #116]	; 0x74
		pEraseInit.NbPages= 256-first_page;
 8000720:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8000724:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000728:	67bb      	str	r3, [r7, #120]	; 0x78
		uint32_t PageError = 0xFFFFFFFF;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	66bb      	str	r3, [r7, #104]	; 0x68
		HAL_FLASH_Unlock();
 8000730:	f002 faa4 	bl	8002c7c <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 8000734:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fb82 	bl	8002e48 <HAL_FLASHEx_Erase>
		/*Notify the host if the erase was successful or not*/
		HAL_FLASH_Lock();
 8000744:	f002 fabc 	bl	8002cc0 <HAL_FLASH_Lock>
		if (PageError != 0xFFFFFFFF)
 8000748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800074a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074e:	d001      	beq.n	8000754 <flash_stm_program+0xd4>
		{
			return 1;
 8000750:	2301      	movs	r3, #1
 8000752:	e171      	b.n	8000a38 <flash_stm_program+0x3b8>
		}
/*Write in flash part*/
		do
		{
			/*Request the next packet*/
			send_reply((uint8_t) ACK);
 8000754:	2079      	movs	r0, #121	; 0x79
 8000756:	f000 f993 	bl	8000a80 <send_reply>
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2110      	movs	r1, #16
 800075e:	488a      	ldr	r0, [pc, #552]	; (8000988 <flash_stm_program+0x308>)
 8000760:	f002 ff04 	bl	800356c <HAL_GPIO_WritePin>
			if(usb_cmd_timeout(50))
 8000764:	2032      	movs	r0, #50	; 0x32
 8000766:	f000 f96f 	bl	8000a48 <usb_cmd_timeout>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <flash_stm_program+0xf4>
			{
				return 1;
 8000770:	2301      	movs	r3, #1
 8000772:	e161      	b.n	8000a38 <flash_stm_program+0x3b8>
			}
			else
			{
				uint8_t usb_data_rx_size = CDC_Available_FS();
 8000774:	f00b fcc8 	bl	800c108 <CDC_Available_FS>
 8000778:	4603      	mov	r3, r0
 800077a:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
				CDC_Read_FS(data, usb_data_rx_size);
 800077e:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8000782:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f00b fcd5 	bl	800c138 <CDC_Read_FS>
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2110      	movs	r1, #16
 8000792:	487d      	ldr	r0, [pc, #500]	; (8000988 <flash_stm_program+0x308>)
 8000794:	f002 feea 	bl	800356c <HAL_GPIO_WritePin>

				HAL_FLASH_Unlock();
 8000798:	f002 fa70 	bl	8002c7c <HAL_FLASH_Unlock>
				/*No mutex is needed here since we won't get new chunk of data unless we send an ack*/
				for (uint32_t i=0;i<loop_correction;i++)
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007a2:	e103      	b.n	80009ac <flash_stm_program+0x32c>
				{
					dword = (uint64_t)(data[i*8])   | (uint64_t)(data[i*8+1]) << 8 | (uint64_t)(data[i*8+2]) << 16 | (uint64_t)(data[i*8+3]) << 24
 80007a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	3380      	adds	r3, #128	; 0x80
 80007ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007b0:	4413      	add	r3, r2
 80007b2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
 80007bc:	657a      	str	r2, [r7, #84]	; 0x54
 80007be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	3301      	adds	r3, #1
 80007c6:	3380      	adds	r3, #128	; 0x80
 80007c8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007cc:	4413      	add	r3, r2
 80007ce:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	663b      	str	r3, [r7, #96]	; 0x60
 80007d8:	667a      	str	r2, [r7, #100]	; 0x64
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80007e4:	020b      	lsls	r3, r1, #8
 80007e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80007e8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80007ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80007ee:	020a      	lsls	r2, r1, #8
 80007f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80007f2:	4311      	orrs	r1, r2
 80007f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80007f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80007f8:	430b      	orrs	r3, r1
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	3302      	adds	r3, #2
 8000804:	3380      	adds	r3, #128	; 0x80
 8000806:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800080a:	4413      	add	r3, r2
 800080c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2200      	movs	r2, #0
 8000814:	65bb      	str	r3, [r7, #88]	; 0x58
 8000816:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000818:	f04f 0200 	mov.w	r2, #0
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000822:	040b      	lsls	r3, r1, #16
 8000824:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000826:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800082a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800082c:	040a      	lsls	r2, r1, #16
 800082e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000830:	4311      	orrs	r1, r2
 8000832:	6439      	str	r1, [r7, #64]	; 0x40
 8000834:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000836:	430b      	orrs	r3, r1
 8000838:	647b      	str	r3, [r7, #68]	; 0x44
 800083a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	3303      	adds	r3, #3
 8000842:	3380      	adds	r3, #128	; 0x80
 8000844:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000848:	4413      	add	r3, r2
 800084a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2200      	movs	r2, #0
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
 8000854:	637a      	str	r2, [r7, #52]	; 0x34
 8000856:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800085a:	460b      	mov	r3, r1
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000860:	460b      	mov	r3, r1
 8000862:	061b      	lsls	r3, r3, #24
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
 8000866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000868:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800086c:	4602      	mov	r2, r0
 800086e:	4313      	orrs	r3, r2
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
 8000872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000874:	460a      	mov	r2, r1
 8000876:	4313      	orrs	r3, r2
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
							| (uint64_t)(data[i*8+4]) << 32 | (uint64_t)(data[i*8+5]) << 40 | (uint64_t)(data[i*8+6]) << 48 | (uint64_t)(data[i*8+7])<< 56;
 800087a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	3304      	adds	r3, #4
 8000882:	3380      	adds	r3, #128	; 0x80
 8000884:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000888:	4413      	add	r3, r2
 800088a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2200      	movs	r2, #0
 8000892:	623b      	str	r3, [r7, #32]
 8000894:	627a      	str	r2, [r7, #36]	; 0x24
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	6a39      	ldr	r1, [r7, #32]
 80008a0:	000b      	movs	r3, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80008a6:	ea41 0a02 	orr.w	sl, r1, r2
 80008aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80008ac:	ea41 0b03 	orr.w	fp, r1, r3
 80008b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	3305      	adds	r3, #5
 80008b8:	3380      	adds	r3, #128	; 0x80
 80008ba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008be:	4413      	add	r3, r2
 80008c0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2200      	movs	r2, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	61fa      	str	r2, [r7, #28]
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	69b9      	ldr	r1, [r7, #24]
 80008d6:	020b      	lsls	r3, r1, #8
 80008d8:	2200      	movs	r2, #0
 80008da:	ea4a 0802 	orr.w	r8, sl, r2
 80008de:	ea4b 0903 	orr.w	r9, fp, r3
 80008e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	3306      	adds	r3, #6
 80008ea:	3380      	adds	r3, #128	; 0x80
 80008ec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008f0:	4413      	add	r3, r2
 80008f2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	617a      	str	r2, [r7, #20]
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	6939      	ldr	r1, [r7, #16]
 8000908:	040b      	lsls	r3, r1, #16
 800090a:	2200      	movs	r2, #0
 800090c:	ea48 0402 	orr.w	r4, r8, r2
 8000910:	ea49 0503 	orr.w	r5, r9, r3
 8000914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	3307      	adds	r3, #7
 800091c:	3380      	adds	r3, #128	; 0x80
 800091e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000922:	4413      	add	r3, r2
 8000924:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2200      	movs	r2, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	60fa      	str	r2, [r7, #12]
 8000930:	f04f 0200 	mov.w	r2, #0
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	060b      	lsls	r3, r1, #24
 800093c:	2200      	movs	r2, #0
					dword = (uint64_t)(data[i*8])   | (uint64_t)(data[i*8+1]) << 8 | (uint64_t)(data[i*8+2]) << 16 | (uint64_t)(data[i*8+3]) << 24
 800093e:	ea44 0102 	orr.w	r1, r4, r2
 8000942:	6039      	str	r1, [r7, #0]
 8000944:	432b      	orrs	r3, r5
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800094c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, dword);
 8000950:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8000954:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000958:	2000      	movs	r0, #0
 800095a:	f002 f923 	bl	8002ba4 <HAL_FLASH_Program>
					/*Check if the data written matches the data in the buffer*/
					if (dword != *(volatile uint64_t*)(address))
 800095e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000966:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800096a:	428b      	cmp	r3, r1
 800096c:	bf08      	it	eq
 800096e:	4282      	cmpeq	r2, r0
 8000970:	d00c      	beq.n	800098c <flash_stm_program+0x30c>
					{
						HAL_FLASH_Lock();
 8000972:	f002 f9a5 	bl	8002cc0 <HAL_FLASH_Lock>
						HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2110      	movs	r1, #16
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <flash_stm_program+0x308>)
 800097c:	f002 fdf6 	bl	800356c <HAL_GPIO_WritePin>
						return 1;
 8000980:	2301      	movs	r3, #1
 8000982:	e059      	b.n	8000a38 <flash_stm_program+0x3b8>
 8000984:	08010000 	.word	0x08010000
 8000988:	48000400 	.word	0x48000400
					}
					else
					{
						/*clear the dword*/
						dword = 0;
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
						/*Increment the address*/
						address+=8;
 8000998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800099c:	3308      	adds	r3, #8
 800099e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				for (uint32_t i=0;i<loop_correction;i++)
 80009a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009a6:	3301      	adds	r3, #1
 80009a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009ac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80009b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f4ff aef5 	bcc.w	80007a4 <flash_stm_program+0x124>
					}
				}
				HAL_FLASH_Lock();
 80009ba:	f002 f981 	bl	8002cc0 <HAL_FLASH_Lock>
				/*Increment the bytes_written*/
				bytes_written+=chunk_size;
 80009be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80009c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80009c6:	4413      	add	r3, r2
 80009c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				/*Clear the buffer*/
				memset(data,'\0',sizeof(data));
 80009cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80009d0:	2240      	movs	r2, #64	; 0x40
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00c f95b 	bl	800cc90 <memset>
				/*Correcting the loop due to leftover bytes*/
				if(file_size - bytes_written < chunk_size)
 80009da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d918      	bls.n	8000a1e <flash_stm_program+0x39e>
				{
					chunk_size = file_size - bytes_written;
 80009ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

					if (chunk_size%8)
 80009fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <flash_stm_program+0x394>
					{
						loop_correction = (chunk_size/8)+1;
 8000a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000a12:	e004      	b.n	8000a1e <flash_stm_program+0x39e>
					}
					else
					{
						loop_correction = (chunk_size/8);
 8000a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					}
				}
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2110      	movs	r1, #16
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <flash_stm_program+0x3c4>)
 8000a24:	f002 fda2 	bl	800356c <HAL_GPIO_WritePin>
			}
		}
		while(bytes_written-file_size);
 8000a28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000a30:	429a      	cmp	r2, r3
 8000a32:	f47f ae8f 	bne.w	8000754 <flash_stm_program+0xd4>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	37e8      	adds	r7, #232	; 0xe8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a42:	bf00      	nop
 8000a44:	48000400 	.word	0x48000400

08000a48 <usb_cmd_timeout>:
  *
  * @param timeout: Timeout set by the user.
  * @retval uint8_t: Return 0 if the host sends data else return 1 if the time run out.
  */
uint8_t usb_cmd_timeout(uint32_t timeout)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	uint32_t timer = HAL_GetTick();
 8000a50:	f001 f9a0 	bl	8001d94 <HAL_GetTick>
 8000a54:	60f8      	str	r0, [r7, #12]

	while (HAL_GetTick()-timer <timeout)
 8000a56:	e006      	b.n	8000a66 <usb_cmd_timeout+0x1e>
	{
		if (CDC_Available_FS()>0)
 8000a58:	f00b fb56 	bl	800c108 <CDC_Available_FS>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <usb_cmd_timeout+0x1e>
		{
			return 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e008      	b.n	8000a78 <usb_cmd_timeout+0x30>
	while (HAL_GetTick()-timer <timeout)
 8000a66:	f001 f995 	bl	8001d94 <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d8f0      	bhi.n	8000a58 <usb_cmd_timeout+0x10>
		}
	}
	return 1;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <send_reply>:
  *
  * @param data: byte to be sent.
  * @retval uint8_t: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t send_reply(uint8_t data)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	uint8_t reply = data;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	73fb      	strb	r3, [r7, #15]
	return CDC_Transmit_FS(&reply,1);
 8000a8e:	f107 030f 	add.w	r3, r7, #15
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00b faff 	bl	800c098 <CDC_Transmit_FS>
 8000a9a:	4603      	mov	r3, r0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <calculate_crc>:
  *
  * @param hcrc: crc handler.
  * @retval uint32_t: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
static uint32_t calculate_crc(CRC_HandleTypeDef hcrc)
{
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	f107 0c10 	add.w	ip, r7, #16
 8000ab0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/*Retrieve the size of the application from the header.*/
	uint32_t app_size = *(volatile uint32_t*)(USER_APPLICATION_STARTING_ADDRESS+0x194);
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <calculate_crc+0x48>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	607b      	str	r3, [r7, #4]

	/*Calculate the crc value of the vector table (404 bytes) plus the size of the application (4 bytes)*/
	HAL_CRC_Calculate(&hcrc, (uint32_t*)USER_APPLICATION_STARTING_ADDRESS, 0x198);
 8000aba:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000abe:	490c      	ldr	r1, [pc, #48]	; (8000af0 <calculate_crc+0x4c>)
 8000ac0:	f107 0010 	add.w	r0, r7, #16
 8000ac4:	f001 fbcc 	bl	8002260 <HAL_CRC_Calculate>

	return HAL_CRC_Accumulate(&hcrc, (uint32_t*)(USER_APPLICATION_STARTING_ADDRESS+0x19C), (app_size-0x19C));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4908      	ldr	r1, [pc, #32]	; (8000af4 <calculate_crc+0x50>)
 8000ad2:	f107 0010 	add.w	r0, r7, #16
 8000ad6:	f001 fb7f 	bl	80021d8 <HAL_CRC_Accumulate>
 8000ada:	4603      	mov	r3, r0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae6:	b004      	add	sp, #16
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	08010194 	.word	0x08010194
 8000af0:	08010000 	.word	0x08010000
 8000af4:	0801019c 	.word	0x0801019c

08000af8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_UARTEx_RxEventCallback+0x88>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d119      	bne.n	8000b42 <HAL_UARTEx_RxEventCallback+0x4a>
	{
		HAL_UART_DMAPause(&huart1);
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000b10:	f005 fedb 	bl	80068ca <HAL_UART_DMAPause>
		CDC_Transmit_FS(uart_rx_buf, Size);
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	4619      	mov	r1, r3
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x90>)
 8000b1a:	f00b fabd 	bl	800c098 <CDC_Transmit_FS>
		memset(uart_rx_buf,'\0',sizeof(uart_rx_buf));
 8000b1e:	2240      	movs	r2, #64	; 0x40
 8000b20:	2100      	movs	r1, #0
 8000b22:	4819      	ldr	r0, [pc, #100]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x90>)
 8000b24:	f00c f8b4 	bl	800cc90 <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_rx_buf,sizeof(uart_rx_buf));
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	4917      	ldr	r1, [pc, #92]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x90>)
 8000b2c:	4815      	ldr	r0, [pc, #84]	; (8000b84 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000b2e:	f007 f99e 	bl	8007e6e <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2110      	movs	r1, #16
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <HAL_UARTEx_RxEventCallback+0x94>)
 8000b38:	f002 fd18 	bl	800356c <HAL_GPIO_WritePin>
		HAL_UART_DMAResume(&huart1);
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000b3e:	f005 ff5f 	bl	8006a00 <HAL_UART_DMAResume>
	}
	if (huart->Instance == USART2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_UARTEx_RxEventCallback+0x98>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d114      	bne.n	8000b76 <HAL_UARTEx_RxEventCallback+0x7e>
	{
		HAL_UART_DMAPause(&huart2);
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000b4e:	f005 febc 	bl	80068ca <HAL_UART_DMAPause>
		CDC_Transmit_FS(uart_rx_buf, Size);
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	4619      	mov	r1, r3
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x90>)
 8000b58:	f00b fa9e 	bl	800c098 <CDC_Transmit_FS>
		memset(uart_rx_buf,'\0',sizeof(uart_rx_buf));
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x90>)
 8000b62:	f00c f895 	bl	800cc90 <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2,uart_rx_buf,sizeof(uart_rx_buf));
 8000b66:	2240      	movs	r2, #64	; 0x40
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <HAL_UARTEx_RxEventCallback+0x90>)
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000b6c:	f007 f97f 	bl	8007e6e <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_UART_DMAResume(&huart2);
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000b72:	f005 ff45 	bl	8006a00 <HAL_UART_DMAResume>
	}
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40013800 	.word	0x40013800
 8000b84:	200002c4 	.word	0x200002c4
 8000b88:	20000260 	.word	0x20000260
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	40004400 	.word	0x40004400
 8000b94:	20000348 	.word	0x20000348

08000b98 <flash_esp_program>:


uint8_t flash_esp_program()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ACK);
 8000b9e:	2079      	movs	r0, #121	; 0x79
 8000ba0:	f7ff ff6e 	bl	8000a80 <send_reply>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,uart_rx_buf,sizeof(uart_rx_buf));
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	4932      	ldr	r1, [pc, #200]	; (8000c70 <flash_esp_program+0xd8>)
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <flash_esp_program+0xdc>)
 8000baa:	f007 f960 	bl	8007e6e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <flash_esp_program+0xe0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <flash_esp_program+0xe0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0204 	bic.w	r2, r2, #4
 8000bbc:	601a      	str	r2, [r3, #0]

	/*ESP download mode sequence*/
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_RESET); /*IO9 strapping pin high*/
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	482e      	ldr	r0, [pc, #184]	; (8000c7c <flash_esp_program+0xe4>)
 8000bc4:	f002 fcd2 	bl	800356c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET); /*Reset pin low*/
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	482b      	ldr	r0, [pc, #172]	; (8000c7c <flash_esp_program+0xe4>)
 8000bce:	f002 fccd 	bl	800356c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	f001 f8ea 	bl	8001dac <HAL_Delay>
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_SET); /*IO9 strapping pin low */
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4827      	ldr	r0, [pc, #156]	; (8000c7c <flash_esp_program+0xe4>)
 8000bde:	f002 fcc5 	bl	800356c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET); /*Reset pin high, esp is out of reset and in bootloader mode*/
 8000be2:	2200      	movs	r2, #0
 8000be4:	2101      	movs	r1, #1
 8000be6:	4825      	ldr	r0, [pc, #148]	; (8000c7c <flash_esp_program+0xe4>)
 8000be8:	f002 fcc0 	bl	800356c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f001 f8dd 	bl	8001dac <HAL_Delay>
	HAL_GPIO_WritePin(ESP_IO9_GPIO_Port, ESP_IO9_Pin, GPIO_PIN_RESET); /*IO9 strapping pin high*/
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4821      	ldr	r0, [pc, #132]	; (8000c7c <flash_esp_program+0xe4>)
 8000bf8:	f002 fcb8 	bl	800356c <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8000bfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c00:	f001 f8d4 	bl	8001dac <HAL_Delay>
	while(!is_reset)
 8000c04:	e01d      	b.n	8000c42 <flash_esp_program+0xaa>
	{
		uint32_t data_length = CDC_Available_FS();
 8000c06:	f00b fa7f 	bl	800c108 <CDC_Available_FS>
 8000c0a:	6078      	str	r0, [r7, #4]
		if (data_length>0)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d017      	beq.n	8000c42 <flash_esp_program+0xaa>
		{
			HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2110      	movs	r1, #16
 8000c16:	481a      	ldr	r0, [pc, #104]	; (8000c80 <flash_esp_program+0xe8>)
 8000c18:	f002 fca8 	bl	800356c <HAL_GPIO_WritePin>
			CDC_Read_FS(usb_rx_buf, data_length);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4819      	ldr	r0, [pc, #100]	; (8000c84 <flash_esp_program+0xec>)
 8000c20:	f00b fa8a 	bl	800c138 <CDC_Read_FS>
			HAL_Delay(10);
 8000c24:	200a      	movs	r0, #10
 8000c26:	f001 f8c1 	bl	8001dac <HAL_Delay>
			HAL_UART_Transmit(&huart1,usb_rx_buf,data_length,10);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	230a      	movs	r3, #10
 8000c30:	4914      	ldr	r1, [pc, #80]	; (8000c84 <flash_esp_program+0xec>)
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <flash_esp_program+0xdc>)
 8000c34:	f005 fdb5 	bl	80067a2 <HAL_UART_Transmit>
			memset(usb_rx_buf,'\0',data_length);
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <flash_esp_program+0xec>)
 8000c3e:	f00c f827 	bl	800cc90 <memset>
	while(!is_reset)
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <flash_esp_program+0xf0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f083 0301 	eor.w	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1d9      	bne.n	8000c06 <flash_esp_program+0x6e>
		}
	}
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2101      	movs	r1, #1
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <flash_esp_program+0xe4>)
 8000c58:	f002 fc88 	bl	800356c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f001 f8a4 	bl	8001dac <HAL_Delay>
return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000260 	.word	0x20000260
 8000c74:	200002c4 	.word	0x200002c4
 8000c78:	200003cc 	.word	0x200003cc
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000400 	.word	0x48000400
 8000c84:	20000220 	.word	0x20000220
 8000c88:	20000742 	.word	0x20000742

08000c8c <conf_ps_fpga>:

static uint8_t conf_ps_fpga()
{
 8000c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c90:	b08b      	sub	sp, #44	; 0x2c
 8000c92:	af00      	add	r7, sp, #0
	uint32_t file_size;
	uint32_t bytes_written = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
	uint32_t timer = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
	/*Flash fpga cmd ACK*/
	send_reply((uint8_t) ACK);
 8000c9c:	2079      	movs	r0, #121	; 0x79
 8000c9e:	f7ff feef 	bl	8000a80 <send_reply>

	if (usb_cmd_timeout(50))
 8000ca2:	2032      	movs	r0, #50	; 0x32
 8000ca4:	f7ff fed0 	bl	8000a48 <usb_cmd_timeout>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <conf_ps_fpga+0x26>
	{
		return 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0f2      	b.n	8000e98 <conf_ps_fpga+0x20c>
	}
	else
	{
		uint8_t temp_num[4];
		CDC_Read_FS(temp_num,sizeof(temp_num));
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00b fa3e 	bl	800c138 <CDC_Read_FS>
		file_size = (uint32_t)(temp_num[0]<<24) | (uint32_t)(temp_num[1]<<16) | (uint32_t)(temp_num[2]<<8) | (uint32_t)(temp_num[3]);
 8000cbc:	793b      	ldrb	r3, [r7, #4]
 8000cbe:	061b      	lsls	r3, r3, #24
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	797b      	ldrb	r3, [r7, #5]
 8000cc4:	041b      	lsls	r3, r3, #16
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	79ba      	ldrb	r2, [r7, #6]
 8000cca:	0212      	lsls	r2, r2, #8
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
		/*if the number of bytes is different than a standard bitstram size then something is wrong*/
		if (file_size != BITSTREAM_MAX_SIZE)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4a73      	ldr	r2, [pc, #460]	; (8000ea4 <conf_ps_fpga+0x218>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d001      	beq.n	8000ce0 <conf_ps_fpga+0x54>
		{
			return 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e0db      	b.n	8000e98 <conf_ps_fpga+0x20c>
		}
		/*File Size received ACK*/
		send_reply((uint8_t) ACK);
 8000ce0:	2079      	movs	r0, #121	; 0x79
 8000ce2:	f7ff fecd 	bl	8000a80 <send_reply>
		/*Start configuration process.*/
		/*To begin we set the nCONFIG pin to low and high*/
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2108      	movs	r1, #8
 8000cea:	486f      	ldr	r0, [pc, #444]	; (8000ea8 <conf_ps_fpga+0x21c>)
 8000cec:	f002 fc3e 	bl	800356c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000cf0:	2032      	movs	r0, #50	; 0x32
 8000cf2:	f001 f85b 	bl	8001dac <HAL_Delay>
		HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	486b      	ldr	r0, [pc, #428]	; (8000ea8 <conf_ps_fpga+0x21c>)
 8000cfc:	f002 fc36 	bl	800356c <HAL_GPIO_WritePin>

		/*Wait for nSTATUS to go high.*/
		HAL_Delay(300);
 8000d00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d04:	f001 f852 	bl	8001dac <HAL_Delay>
		send_reply((uint8_t) ACK);
 8000d08:	2079      	movs	r0, #121	; 0x79
 8000d0a:	f7ff feb9 	bl	8000a80 <send_reply>
		do
		{
			if (HAL_GPIO_ReadPin(nSTATUS_GPIO_Port, nSTATUS_Pin) == GPIO_PIN_RESET)
 8000d0e:	2110      	movs	r1, #16
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f002 fc12 	bl	800353c <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <conf_ps_fpga+0xa0>
			{
				HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2110      	movs	r1, #16
 8000d22:	4862      	ldr	r0, [pc, #392]	; (8000eac <conf_ps_fpga+0x220>)
 8000d24:	f002 fc22 	bl	800356c <HAL_GPIO_WritePin>
				return 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e0b5      	b.n	8000e98 <conf_ps_fpga+0x20c>
			}
			if(usb_cmd_timeout(50))
 8000d2c:	2032      	movs	r0, #50	; 0x32
 8000d2e:	f7ff fe8b 	bl	8000a48 <usb_cmd_timeout>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <conf_ps_fpga+0xb0>
			{
				return 1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e0ad      	b.n	8000e98 <conf_ps_fpga+0x20c>
			}
			else
			{
 8000d3c:	466b      	mov	r3, sp
 8000d3e:	461e      	mov	r6, r3
				uint8_t usb_data_rx_size = CDC_Available_FS();
 8000d40:	f00b f9e2 	bl	800c108 <CDC_Available_FS>
 8000d44:	4603      	mov	r3, r0
 8000d46:	74fb      	strb	r3, [r7, #19]
				uint8_t data[usb_data_rx_size];
 8000d48:	7cf9      	ldrb	r1, [r7, #19]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	b2cb      	uxtb	r3, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	461c      	mov	r4, r3
 8000d56:	4615      	mov	r5, r2
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	00eb      	lsls	r3, r5, #3
 8000d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d66:	00e2      	lsls	r2, r4, #3
 8000d68:	b2cb      	uxtb	r3, r1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	4691      	mov	r9, r2
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d84:	460b      	mov	r3, r1
 8000d86:	3307      	adds	r3, #7
 8000d88:	08db      	lsrs	r3, r3, #3
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d90:	466b      	mov	r3, sp
 8000d92:	3300      	adds	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
				if (CDC_Read_FS(data, usb_data_rx_size))
 8000d96:	7cfb      	ldrb	r3, [r7, #19]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f00b f9cc 	bl	800c138 <CDC_Read_FS>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <conf_ps_fpga+0x120>
				{
					return 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	46b5      	mov	sp, r6
 8000daa:	e075      	b.n	8000e98 <conf_ps_fpga+0x20c>
				}
				for(uint32_t i=0;i<usb_data_rx_size;i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	e03b      	b.n	8000e2a <conf_ps_fpga+0x19e>
				{
					uint8_t temp=data[i];
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	483a      	ldr	r0, [pc, #232]	; (8000eac <conf_ps_fpga+0x220>)
 8000dc4:	f002 fbd2 	bl	800356c <HAL_GPIO_WritePin>
					for (uint8_t j=0;j<8;j++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dce:	e020      	b.n	8000e12 <conf_ps_fpga+0x186>
					{
						//Bitbang the LSB of every byte.
						HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,temp&0x01);
 8000dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2101      	movs	r1, #1
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f002 fbc3 	bl	800356c <HAL_GPIO_WritePin>
						temp=temp>>1;
 8000de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dea:	085b      	lsrs	r3, r3, #1
 8000dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						//Pulse the clock.
						HAL_GPIO_WritePin(DCLK_GPIO_Port,DCLK_Pin,GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2102      	movs	r1, #2
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f002 fbb8 	bl	800356c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(DCLK_GPIO_Port,DCLK_Pin,GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2102      	movs	r1, #2
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f002 fbb2 	bl	800356c <HAL_GPIO_WritePin>
					for (uint8_t j=0;j<8;j++)
 8000e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	d9da      	bls.n	8000dd0 <conf_ps_fpga+0x144>
					}
					HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4823      	ldr	r0, [pc, #140]	; (8000eac <conf_ps_fpga+0x220>)
 8000e20:	f002 fba4 	bl	800356c <HAL_GPIO_WritePin>
				for(uint32_t i=0;i<usb_data_rx_size;i++)
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	3301      	adds	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
 8000e2a:	7cfb      	ldrb	r3, [r7, #19]
 8000e2c:	6a3a      	ldr	r2, [r7, #32]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3bf      	bcc.n	8000db2 <conf_ps_fpga+0x126>
				}
				bytes_written+=usb_data_rx_size;
 8000e32:	7cfb      	ldrb	r3, [r7, #19]
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	4413      	add	r3, r2
 8000e38:	61fb      	str	r3, [r7, #28]
				/*Request the next packet*/
				send_reply((uint8_t) ACK);
 8000e3a:	2079      	movs	r0, #121	; 0x79
 8000e3c:	f7ff fe20 	bl	8000a80 <send_reply>
 8000e40:	46b5      	mov	sp, r6
			}
		}while(bytes_written-file_size);
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	f47f af61 	bne.w	8000d0e <conf_ps_fpga+0x82>
		/*Once all the data has been transmitted wait for CONF_DONE to be SET and set pins DCLK and DATA0 to high*/
		timer = HAL_GetTick();
 8000e4c:	f000 ffa2 	bl	8001d94 <HAL_GetTick>
 8000e50:	61b8      	str	r0, [r7, #24]
		while (HAL_GetTick() - timer< 200)
 8000e52:	e019      	b.n	8000e88 <conf_ps_fpga+0x1fc>
		{
			if (HAL_GPIO_ReadPin(CONF_DONE_GPIO_Port, CONF_DONE_Pin) == GPIO_PIN_SET)
 8000e54:	2104      	movs	r1, #4
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <conf_ps_fpga+0x21c>)
 8000e58:	f002 fb70 	bl	800353c <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d112      	bne.n	8000e88 <conf_ps_fpga+0x1fc>
			{
				HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2101      	movs	r1, #1
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f002 fb7f 	bl	800356c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DCLK_GPIO_Port,DCLK_Pin,GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2102      	movs	r1, #2
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f002 fb79 	bl	800356c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <conf_ps_fpga+0x220>)
 8000e80:	f002 fb74 	bl	800356c <HAL_GPIO_WritePin>
				return 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e007      	b.n	8000e98 <conf_ps_fpga+0x20c>
		while (HAL_GetTick() - timer< 200)
 8000e88:	f000 ff84 	bl	8001d94 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2bc7      	cmp	r3, #199	; 0xc7
 8000e94:	d9de      	bls.n	8000e54 <conf_ps_fpga+0x1c8>
			}
		}
	}
	return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	372c      	adds	r7, #44	; 0x2c
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ea2:	bf00      	nop
 8000ea4:	00059d8b 	.word	0x00059d8b
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000400 	.word	0x48000400

08000eb0 <fpga_usb_to_uart>:

static uint8_t fpga_usb_to_uart()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	send_reply((uint8_t) ACK);
 8000eb6:	2079      	movs	r0, #121	; 0x79
 8000eb8:	f7ff fde2 	bl	8000a80 <send_reply>
	while(!is_reset)
 8000ebc:	e018      	b.n	8000ef0 <fpga_usb_to_uart+0x40>
	{
		/*There is a race condition that I can't detect. Adding a 10 ms delay is a workaround that works for whatever reason.*/
		uint32_t data_length = CDC_Available_FS();
 8000ebe:	f00b f923 	bl	800c108 <CDC_Available_FS>
 8000ec2:	6078      	str	r0, [r7, #4]
		if (data_length>0)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d012      	beq.n	8000ef0 <fpga_usb_to_uart+0x40>
		{
			CDC_Read_FS(usb_rx_buf, data_length);
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <fpga_usb_to_uart+0x5c>)
 8000ece:	f00b f933 	bl	800c138 <CDC_Read_FS>
			HAL_Delay(10);
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f000 ff6a 	bl	8001dac <HAL_Delay>
			HAL_UART_Transmit(&huart2,usb_rx_buf,data_length,10);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	230a      	movs	r3, #10
 8000ede:	490b      	ldr	r1, [pc, #44]	; (8000f0c <fpga_usb_to_uart+0x5c>)
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <fpga_usb_to_uart+0x60>)
 8000ee2:	f005 fc5e 	bl	80067a2 <HAL_UART_Transmit>
			memset(usb_rx_buf,'\0',data_length);
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <fpga_usb_to_uart+0x5c>)
 8000eec:	f00b fed0 	bl	800cc90 <memset>
	while(!is_reset)
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <fpga_usb_to_uart+0x64>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f083 0301 	eor.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1de      	bne.n	8000ebe <fpga_usb_to_uart+0xe>
		}
	}
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000220 	.word	0x20000220
 8000f10:	20000348 	.word	0x20000348
 8000f14:	20000742 	.word	0x20000742

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fe8d 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f83b 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f935 	bl	8001194 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f2a:	f00a ff7d 	bl	800be28 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8000f2e:	f000 f90b 	bl	8001148 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f32:	f000 f8d9 	bl	80010e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f36:	f000 f8a7 	bl	8001088 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000f3a:	f000 f883 	bl	8001044 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t user_application_error=bootloader_init();
 8000f3e:	f7ff fae3 	bl	8000508 <bootloader_init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
  uint32_t timer = HAL_GetTick();
 8000f46:	f000 ff25 	bl	8001d94 <HAL_GetTick>
 8000f4a:	60b8      	str	r0, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (user_application_error || (HAL_GetTick()-timer)<400)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d107      	bne.n	8000f62 <main+0x4a>
 8000f52:	f000 ff1f 	bl	8001d94 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f60:	d219      	bcs.n	8000f96 <main+0x7e>
	  {
		  if(CDC_Available_FS()>0)
 8000f62:	f00b f8d1 	bl	800c108 <CDC_Available_FS>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d016      	beq.n	8000f9a <main+0x82>
		  {
				uint8_t received_command[4];
				CDC_Read_FS(received_command,sizeof(received_command));
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00b f8e1 	bl	800c138 <CDC_Read_FS>
				uint32_t command = (uint32_t)(received_command[0]<<24) | (uint32_t)(received_command[1]<<16) | (uint32_t)(received_command[2]<<8) | (uint32_t)(received_command[3]);
 8000f76:	783b      	ldrb	r3, [r7, #0]
 8000f78:	061b      	lsls	r3, r3, #24
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	4313      	orrs	r3, r2
 8000f82:	78ba      	ldrb	r2, [r7, #2]
 8000f84:	0212      	lsls	r2, r2, #8
 8000f86:	4313      	orrs	r3, r2
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	607b      	str	r3, [r7, #4]
				command_handler(command);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fb12 	bl	80005b8 <command_handler>
		  if(CDC_Available_FS()>0)
 8000f94:	e001      	b.n	8000f9a <main+0x82>
		  }
	  }
	  else
      {
		  jump_to_user_application();
 8000f96:	f7ff fb4d 	bl	8000634 <jump_to_user_application>
	  if (user_application_error || (HAL_GetTick()-timer)<400)
 8000f9a:	e7d7      	b.n	8000f4c <main+0x34>

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b096      	sub	sp, #88	; 0x58
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2244      	movs	r2, #68	; 0x44
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00b fe70 	bl	800cc90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc2:	f004 f8e5 	bl	8005190 <HAL_PWREx_ControlVoltageScaling>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fcc:	f000 f9f4 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2322      	movs	r3, #34	; 0x22
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4618      	mov	r0, r3
 8001004:	f004 f9c2 	bl	800538c <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800100e:	f000 f9d3 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fdce 	bl	8005bcc <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001036:	f000 f9bf 	bl	80013b8 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3758      	adds	r7, #88	; 0x58
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MX_CRC_Init+0x3c>)
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <MX_CRC_Init+0x40>)
 800104c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_CRC_Init+0x3c>)
 8001050:	2200      	movs	r2, #0
 8001052:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_CRC_Init+0x3c>)
 8001056:	2200      	movs	r2, #0
 8001058:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_CRC_Init+0x3c>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MX_CRC_Init+0x3c>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_CRC_Init+0x3c>)
 8001068:	2201      	movs	r2, #1
 800106a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_CRC_Init+0x3c>)
 800106e:	f001 f81f 	bl	80020b0 <HAL_CRC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001078:	f000 f99e 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200002a0 	.word	0x200002a0
 8001084:	40023000 	.word	0x40023000

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_USART1_UART_Init+0x5c>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART1_UART_Init+0x58>)
 80010cc:	f005 fae2 	bl	8006694 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010d6:	f000 f96f 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002c4 	.word	0x200002c4
 80010e4:	40013800 	.word	0x40013800

080010e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_USART2_UART_Init+0x5c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART2_UART_Init+0x58>)
 800112c:	f005 fab2 	bl	8006694 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 f93f 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000348 	.word	0x20000348
 8001144:	40004400 	.word	0x40004400

08001148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_DMA_Init+0x48>)
 8001150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_DMA_Init+0x48>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6493      	str	r3, [r2, #72]	; 0x48
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_DMA_Init+0x48>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	200f      	movs	r0, #15
 800116c:	f000 ff57 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001170:	200f      	movs	r0, #15
 8001172:	f000 ff70 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2010      	movs	r0, #16
 800117c:	f000 ff4f 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001180:	2010      	movs	r0, #16
 8001182:	f000 ff68 	bl	8002056 <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b6c      	ldr	r3, [pc, #432]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a6b      	ldr	r2, [pc, #428]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b69      	ldr	r3, [pc, #420]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a65      	ldr	r2, [pc, #404]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b63      	ldr	r3, [pc, #396]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a5f      	ldr	r2, [pc, #380]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b5a      	ldr	r3, [pc, #360]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a59      	ldr	r2, [pc, #356]	; (800135c <MX_GPIO_Init+0x1c8>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <MX_GPIO_Init+0x1c8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <MX_GPIO_Init+0x1c8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a53      	ldr	r2, [pc, #332]	; (800135c <MX_GPIO_Init+0x1c8>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b51      	ldr	r3, [pc, #324]	; (800135c <MX_GPIO_Init+0x1c8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_EN_Pin|ESP_IO9_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2103      	movs	r1, #3
 8001226:	484e      	ldr	r0, [pc, #312]	; (8001360 <MX_GPIO_Init+0x1cc>)
 8001228:	f002 f9a0 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCONFIG_GPIO_Port, nCONFIG_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2108      	movs	r1, #8
 8001230:	484b      	ldr	r0, [pc, #300]	; (8001360 <MX_GPIO_Init+0x1cc>)
 8001232:	f002 f99b 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA0_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2103      	movs	r1, #3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f002 f995 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OK_LED_Pin|BUSY_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2138      	movs	r1, #56	; 0x38
 8001246:	4847      	ldr	r0, [pc, #284]	; (8001364 <MX_GPIO_Init+0x1d0>)
 8001248:	f002 f990 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800124c:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8001250:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	483f      	ldr	r0, [pc, #252]	; (8001360 <MX_GPIO_Init+0x1cc>)
 8001262:	f001 ff17 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin ESP_IO9_Pin nCONFIG_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|ESP_IO9_Pin|nCONFIG_Pin;
 8001266:	230b      	movs	r3, #11
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4838      	ldr	r0, [pc, #224]	; (8001360 <MX_GPIO_Init+0x1cc>)
 800127e:	f001 ff09 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONF_DONE_Pin */
  GPIO_InitStruct.Pin = CONF_DONE_Pin;
 8001282:	2304      	movs	r3, #4
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONF_DONE_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4832      	ldr	r0, [pc, #200]	; (8001360 <MX_GPIO_Init+0x1cc>)
 8001296:	f001 fefd 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA0_Pin DCLK_Pin */
  GPIO_InitStruct.Pin = DATA0_Pin|DCLK_Pin;
 800129a:	2303      	movs	r3, #3
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f001 feee 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSTATUS_Pin */
  GPIO_InitStruct.Pin = nSTATUS_Pin;
 80012b8:	2310      	movs	r3, #16
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSTATUS_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f001 fee1 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012d2:	f248 73e0 	movw	r3, #34784	; 0x87e0
 80012d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d8:	2303      	movs	r3, #3
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fed3 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80012ee:	f64f 7307 	movw	r3, #65287	; 0xff07
 80012f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f4:	2303      	movs	r3, #3
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <MX_GPIO_Init+0x1d0>)
 8001304:	f001 fec6 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001308:	2304      	movs	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_GPIO_Init+0x1d4>)
 800131c:	f001 feba 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : OK_LED_Pin BUSY_LED_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin|BUSY_LED_Pin|ERROR_LED_Pin;
 8001320:	2338      	movs	r3, #56	; 0x38
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0x1d0>)
 8001338:	f001 feac 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800133c:	2308      	movs	r3, #8
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001340:	2303      	movs	r3, #3
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_GPIO_Init+0x1d8>)
 8001350:	f001 fea0 	bl	8003094 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	48000800 	.word	0x48000800
 8001364:	48000400 	.word	0x48000400
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001c00 	.word	0x48001c00

08001370 <deInitializer>:

/* USER CODE BEGIN 4 */
void deInitializer()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_CRC_DeInit(&hcrc);
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <deInitializer+0x38>)
 8001376:	f000 feff 	bl	8002178 <HAL_CRC_DeInit>
	MX_USB_DEVICE_DeInit();
 800137a:	f00a fd4b 	bl	800be14 <MX_USB_DEVICE_DeInit>
	HAL_UART_DeInit(&huart2);
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <deInitializer+0x3c>)
 8001380:	f005 f9d6 	bl	8006730 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart1);
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <deInitializer+0x40>)
 8001386:	f005 f9d3 	bl	8006730 <HAL_UART_DeInit>
	HAL_RCC_DeInit();
 800138a:	f003 ff67 	bl	800525c <HAL_RCC_DeInit>
	HAL_DeInit();
 800138e:	f000 fc75 	bl	8001c7c <HAL_DeInit>
	SysTick->CTRL = 0;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <deInitializer+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <deInitializer+0x44>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <deInitializer+0x44>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200002a0 	.word	0x200002a0
 80013ac:	20000348 	.word	0x20000348
 80013b0:	200002c4 	.word	0x200002c4
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80013c0:	2120      	movs	r1, #32
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <Error_Handler+0x1c>)
 80013c4:	f002 f8ea 	bl	800359c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80013c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013cc:	f000 fcee 	bl	8001dac <HAL_Delay>
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80013d0:	e7f6      	b.n	80013c0 <Error_Handler+0x8>
 80013d2:	bf00      	nop
 80013d4:	48000400 	.word	0x48000400

080013d8 <ring_buffer_init>:
    bool is_full;
};


rbuf_handle_t ring_buffer_init(size_t size)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

	rbuf_handle_t buf = malloc(sizeof(ring_buffer_t));
 80013e0:	2014      	movs	r0, #20
 80013e2:	f00b fc45 	bl	800cc70 <malloc>
 80013e6:	4603      	mov	r3, r0
 80013e8:	60fb      	str	r3, [r7, #12]
	if (buf == NULL)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <ring_buffer_init+0x1c>
	{
		return NULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e01c      	b.n	800142e <ring_buffer_init+0x56>
	}

	buf->head = 0;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
	buf->tail = 0;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
	buf->buffer_size = size;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
	buf->data = calloc(buf->buffer_size, sizeof(*buf->data));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f00b fbfd 	bl	800cc0c <calloc>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	60da      	str	r2, [r3, #12]
	buf->is_empty = true;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2201      	movs	r2, #1
 800141e:	741a      	strb	r2, [r3, #16]
	buf->is_full = false;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	745a      	strb	r2, [r3, #17]
	lock = false;
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <ring_buffer_init+0x60>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

	return buf;
 800142c:	68fb      	ldr	r3, [r7, #12]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000045c 	.word	0x2000045c

0800143c <ring_buffer_available_bytes>:
	lock = false;
	return OK;
}

size_t ring_buffer_available_bytes(rbuf_handle_t handle)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if (lock)
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <ring_buffer_available_bytes+0x14>
	{
		return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e03b      	b.n	80014c8 <ring_buffer_available_bytes+0x8c>
	}
	lock = true;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d104      	bne.n	8001466 <ring_buffer_available_bytes+0x2a>
	{
		lock = false;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
		return 0;
 8001462:	2300      	movs	r3, #0
 8001464:	e030      	b.n	80014c8 <ring_buffer_available_bytes+0x8c>
	}

	if (handle->is_empty)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7c1b      	ldrb	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <ring_buffer_available_bytes+0x3c>
	{
		lock = false;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
		return 0;
 8001474:	2300      	movs	r3, #0
 8001476:	e027      	b.n	80014c8 <ring_buffer_available_bytes+0x8c>
	}
	else if (handle->is_full)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7c5b      	ldrb	r3, [r3, #17]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <ring_buffer_available_bytes+0x50>
	{
		lock = false;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
		return (handle->buffer_size);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	e01d      	b.n	80014c8 <ring_buffer_available_bytes+0x8c>
	}
	else if (handle->head > handle->tail)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d90a      	bls.n	80014ae <ring_buffer_available_bytes+0x72>
	{
		size_t ret = (size_t)(handle->head - handle->tail);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	60bb      	str	r3, [r7, #8]
		lock = false;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
		return ret;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	e00c      	b.n	80014c8 <ring_buffer_available_bytes+0x8c>
	}
	else
	{
		/*This case shouldn't happen normally since the tail should never exceed the head*/
		size_t ret = (size_t)(handle->buffer_size + handle->head - handle->tail);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	441a      	add	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	60fb      	str	r3, [r7, #12]
		lock = false;
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <ring_buffer_available_bytes+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
		return ret;
 80014c6:	68fb      	ldr	r3, [r7, #12]
	}
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	2000045c 	.word	0x2000045c

080014d8 <ring_buffer_write>:


ring_buffer_SIG ring_buffer_write(rbuf_handle_t handle, uint8_t* data, size_t size)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	if (lock)
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <ring_buffer_write+0xfc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <ring_buffer_write+0x18>
	{
		return BUSY;
 80014ec:	2302      	movs	r3, #2
 80014ee:	e06a      	b.n	80015c6 <ring_buffer_write+0xee>
	}
	lock = true;
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <ring_buffer_write+0xfc>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d104      	bne.n	8001506 <ring_buffer_write+0x2e>
	{
		lock = false;
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <ring_buffer_write+0xfc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001502:	2301      	movs	r3, #1
 8001504:	e05f      	b.n	80015c6 <ring_buffer_write+0xee>
	}
	size_t buf_unused_space;
	if (handle->is_full)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	7c5b      	ldrb	r3, [r3, #17]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <ring_buffer_write+0x40>
	{
		lock = false;
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <ring_buffer_write+0xfc>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001514:	2301      	movs	r3, #1
 8001516:	e056      	b.n	80015c6 <ring_buffer_write+0xee>
	}
	else if (handle->is_empty)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	7c1b      	ldrb	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <ring_buffer_write+0x50>
	{
		buf_unused_space = handle->buffer_size;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e015      	b.n	8001554 <ring_buffer_write+0x7c>
	}
	else if (handle->head > handle->tail)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d909      	bls.n	8001548 <ring_buffer_write+0x70>
	{
		buf_unused_space = handle->buffer_size - (handle->head - handle->tail);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1acb      	subs	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e005      	b.n	8001554 <ring_buffer_write+0x7c>
	}
	else
	{
		buf_unused_space = handle->tail - handle->head;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
	}

	if (buf_unused_space < size)
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	d204      	bcs.n	8001566 <ring_buffer_write+0x8e>
	{
		lock = false;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <ring_buffer_write+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001562:	2301      	movs	r3, #1
 8001564:	e02f      	b.n	80015c6 <ring_buffer_write+0xee>
	}

	for (size_t i = 0; i < size; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e018      	b.n	800159e <ring_buffer_write+0xc6>
	{
		handle->data[handle->head] = *(data + i);
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	441a      	add	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68d9      	ldr	r1, [r3, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	440b      	add	r3, r1
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	701a      	strb	r2, [r3, #0]
		handle->head = ((handle->head + 1) % handle->buffer_size);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6892      	ldr	r2, [r2, #8]
 800158a:	fbb3 f1f2 	udiv	r1, r3, r2
 800158e:	fb01 f202 	mul.w	r2, r1, r2
 8001592:	1a9a      	subs	r2, r3, r2
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < size; i++)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3301      	adds	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d3e2      	bcc.n	800156c <ring_buffer_write+0x94>
	}
	if (handle->head == handle->tail)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d102      	bne.n	80015b8 <ring_buffer_write+0xe0>
	{
		handle->is_full = true;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	745a      	strb	r2, [r3, #17]
	}
	handle->is_empty = false;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	741a      	strb	r2, [r3, #16]
	lock = false;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <ring_buffer_write+0xfc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
	return OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000045c 	.word	0x2000045c

080015d8 <ring_buffer_read>:

ring_buffer_SIG ring_buffer_read(rbuf_handle_t handle, uint8_t* data, size_t size)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
	if (lock)
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <ring_buffer_read+0x108>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <ring_buffer_read+0x18>
	{
		return BUSY;
 80015ec:	2302      	movs	r3, #2
 80015ee:	e071      	b.n	80016d4 <ring_buffer_read+0xfc>
	}
	lock = true;
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <ring_buffer_read+0x108>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d104      	bne.n	8001606 <ring_buffer_read+0x2e>
	{
		lock = false;
 80015fc:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <ring_buffer_read+0x108>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001602:	2301      	movs	r3, #1
 8001604:	e066      	b.n	80016d4 <ring_buffer_read+0xfc>
	}
	size_t buf_size_used;
	if (handle->is_empty)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	7c1b      	ldrb	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <ring_buffer_read+0x40>
	{
		lock = false;
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <ring_buffer_read+0x108>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001614:	2301      	movs	r3, #1
 8001616:	e05d      	b.n	80016d4 <ring_buffer_read+0xfc>
	}
	else if (handle->is_full)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	7c5b      	ldrb	r3, [r3, #17]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <ring_buffer_read+0x50>
	{
		buf_size_used = handle->buffer_size;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e015      	b.n	8001654 <ring_buffer_read+0x7c>
	}
	else if (handle->head > handle->tail)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d906      	bls.n	8001642 <ring_buffer_read+0x6a>
	{
		buf_size_used = (handle->head - handle->tail);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e008      	b.n	8001654 <ring_buffer_read+0x7c>
	}
	else
	{
		buf_size_used = handle->buffer_size - (handle->tail - handle->head);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
	}

	if (buf_size_used > size)
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d904      	bls.n	8001666 <ring_buffer_read+0x8e>
	{
		lock = false;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <ring_buffer_read+0x108>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
		return FAIL;
 8001662:	2301      	movs	r3, #1
 8001664:	e036      	b.n	80016d4 <ring_buffer_read+0xfc>
	}


	for (size_t i = 0; i < buf_size_used; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e01f      	b.n	80016ac <ring_buffer_read+0xd4>
	{
		*(data + i) = handle->data[handle->tail];
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	441a      	add	r2, r3
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	440b      	add	r3, r1
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	701a      	strb	r2, [r3, #0]
		handle->data[handle->tail] = '\0';
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
		handle->tail = ((handle->tail + 1) % handle->buffer_size);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	6892      	ldr	r2, [r2, #8]
 8001698:	fbb3 f1f2 	udiv	r1, r3, r2
 800169c:	fb01 f202 	mul.w	r2, r1, r2
 80016a0:	1a9a      	subs	r2, r3, r2
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	605a      	str	r2, [r3, #4]
	for (size_t i = 0; i < buf_size_used; i++)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3301      	adds	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3db      	bcc.n	800166c <ring_buffer_read+0x94>
	}
	if (handle->tail == handle->head)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d102      	bne.n	80016c6 <ring_buffer_read+0xee>
	{
		handle->is_empty = true;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	741a      	strb	r2, [r3, #16]
	}
	handle->is_full = false;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	745a      	strb	r2, [r3, #17]
	lock = false;
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <ring_buffer_read+0x108>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	return OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	2000045c 	.word	0x2000045c

080016e4 <ring_buffer_deinit>:


ring_buffer_SIG ring_buffer_deinit(rbuf_handle_t handle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if (lock)
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <ring_buffer_deinit+0x4c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ring_buffer_deinit+0x14>
	{
		return BUSY;
 80016f4:	2302      	movs	r3, #2
 80016f6:	e016      	b.n	8001726 <ring_buffer_deinit+0x42>
	}
	lock = true;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <ring_buffer_deinit+0x4c>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
	if (handle == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d104      	bne.n	800170e <ring_buffer_deinit+0x2a>
	{
		lock = false;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <ring_buffer_deinit+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		return FAIL;
 800170a:	2301      	movs	r3, #1
 800170c:	e00b      	b.n	8001726 <ring_buffer_deinit+0x42>
	}
	free(handle->data);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4618      	mov	r0, r3
 8001714:	f00b fab4 	bl	800cc80 <free>
	free(handle);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f00b fab1 	bl	800cc80 <free>
	lock = false;
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <ring_buffer_deinit+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
	return OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000045c 	.word	0x2000045c

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6613      	str	r3, [r2, #96]	; 0x60
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_MspInit+0x44>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x44>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6593      	str	r3, [r2, #88]	; 0x58
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x44>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_CRC_MspInit+0x38>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10b      	bne.n	80017a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_CRC_MspInit+0x3c>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_CRC_MspInit+0x3c>)
 8001794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001798:	6493      	str	r3, [r2, #72]	; 0x48
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_CRC_MspInit+0x3c>)
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023000 	.word	0x40023000
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_CRC_MspDeInit+0x2c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d105      	bne.n	80017da <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_CRC_MspDeInit+0x30>)
 80017d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_CRC_MspDeInit+0x30>)
 80017d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017d8:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023000 	.word	0x40023000
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a6      	sub	sp, #152	; 0x98
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	2268      	movs	r2, #104	; 0x68
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f00b fa3d 	bl	800cc90 <memset>
  if(huart->Instance==USART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a73      	ldr	r2, [pc, #460]	; (80019e8 <HAL_UART_MspInit+0x1f8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d16c      	bne.n	80018fa <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001820:	2301      	movs	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001824:	2300      	movs	r3, #0
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fbd3 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001838:	f7ff fdbe 	bl	80013b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183c:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 800183e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001840:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001846:	6613      	str	r3, [r2, #96]	; 0x60
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b65      	ldr	r3, [pc, #404]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a64      	ldr	r2, [pc, #400]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186c:	23c0      	movs	r3, #192	; 0xc0
 800186e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001884:	2307      	movs	r3, #7
 8001886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800188e:	4619      	mov	r1, r3
 8001890:	4857      	ldr	r0, [pc, #348]	; (80019f0 <HAL_UART_MspInit+0x200>)
 8001892:	f001 fbff 	bl	8003094 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_UART_MspInit+0x204>)
 8001898:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_UART_MspInit+0x208>)
 800189a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_UART_MspInit+0x204>)
 800189e:	2202      	movs	r2, #2
 80018a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a8:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018cc:	4849      	ldr	r0, [pc, #292]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018ce:	f000 fe61 	bl	8002594 <HAL_DMA_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80018d8:	f7ff fd6e 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018e0:	671a      	str	r2, [r3, #112]	; 0x70
 80018e2:	4a44      	ldr	r2, [pc, #272]	; (80019f4 <HAL_UART_MspInit+0x204>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2025      	movs	r0, #37	; 0x25
 80018ee:	f000 fb96 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018f2:	2025      	movs	r0, #37	; 0x25
 80018f4:	f000 fbaf 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f8:	e071      	b.n	80019de <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <HAL_UART_MspInit+0x20c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d16c      	bne.n	80019de <HAL_UART_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001904:	2302      	movs	r3, #2
 8001906:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fb61 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800191c:	f7ff fd4c 	bl	80013b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 8001926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a2b      	ldr	r2, [pc, #172]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_UART_MspInit+0x1fc>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001950:	230c      	movs	r3, #12
 8001952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001968:	2307      	movs	r3, #7
 800196a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f001 fb8c 	bl	8003094 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_UART_MspInit+0x210>)
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_UART_MspInit+0x214>)
 8001980:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0x210>)
 8001984:	2202      	movs	r2, #2
 8001986:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_UART_MspInit+0x210>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_UART_MspInit+0x210>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_UART_MspInit+0x210>)
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0x210>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_UART_MspInit+0x210>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_UART_MspInit+0x210>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_UART_MspInit+0x210>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <HAL_UART_MspInit+0x210>)
 80019b4:	f000 fdee 	bl	8002594 <HAL_DMA_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80019be:	f7ff fcfb 	bl	80013b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_UART_MspInit+0x210>)
 80019c6:	671a      	str	r2, [r3, #112]	; 0x70
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_UART_MspInit+0x210>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	f000 fb23 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019d8:	2026      	movs	r0, #38	; 0x26
 80019da:	f000 fb3c 	bl	8002056 <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3798      	adds	r7, #152	; 0x98
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000400 	.word	0x48000400
 80019f4:	200003cc 	.word	0x200003cc
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40004400 	.word	0x40004400
 8001a00:	20000414 	.word	0x20000414
 8001a04:	4002006c 	.word	0x4002006c

08001a08 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_UART_MspDeInit+0x70>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d112      	bne.n	8001a40 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_UART_MspDeInit+0x74>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_UART_MspDeInit+0x74>)
 8001a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a24:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001a26:	21c0      	movs	r1, #192	; 0xc0
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <HAL_UART_MspDeInit+0x78>)
 8001a2a:	f001 fcad 	bl	8003388 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fe66 	bl	8002704 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001a38:	2025      	movs	r0, #37	; 0x25
 8001a3a:	f000 fb1a 	bl	8002072 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001a3e:	e017      	b.n	8001a70 <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_UART_MspDeInit+0x7c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d112      	bne.n	8001a70 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_UART_MspDeInit+0x74>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_UART_MspDeInit+0x74>)
 8001a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001a56:	210c      	movs	r1, #12
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f001 fc94 	bl	8003388 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fe4d 	bl	8002704 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001a6a:	2026      	movs	r0, #38	; 0x26
 8001a6c:	f000 fb01 	bl	8002072 <HAL_NVIC_DisableIRQ>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	40004400 	.word	0x40004400

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>
	...

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001a94:	2120      	movs	r1, #32
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HardFault_Handler+0x18>)
 8001a98:	f001 fd80 	bl	800359c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa0:	f000 f984 	bl	8001dac <HAL_Delay>
	  HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001aa4:	e7f6      	b.n	8001a94 <HardFault_Handler+0x4>
 8001aa6:	bf00      	nop
 8001aa8:	48000400 	.word	0x48000400

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f93e 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA1_Channel5_IRQHandler+0x10>)
 8001afa:	f000 ff74 	bl	80029e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003cc 	.word	0x200003cc

08001b08 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA1_Channel6_IRQHandler+0x10>)
 8001b0e:	f000 ff6a 	bl	80029e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000414 	.word	0x20000414

08001b1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <USART1_IRQHandler+0x10>)
 8001b22:	f004 ffff 	bl	8006b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200002c4 	.word	0x200002c4

08001b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <USART2_IRQHandler+0x10>)
 8001b36:	f004 fff5 	bl	8006b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000348 	.word	0x20000348

08001b44 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USB_IRQHandler+0x10>)
 8001b4a:	f001 febf 	bl	80038cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200019c4 	.word	0x200019c4

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f00b f848 	bl	800cc1c <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20028000 	.word	0x20028000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20000460 	.word	0x20000460
 8001bc0:	20001ef0 	.word	0x20001ef0

08001bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Boot_Reset_Handler>:

    .section	.text.Boot_Reset_Handler
	.weak	Boot_Reset_Handler
	.type	Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bec:	f7ff ffea 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	; (8001c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <LoopForever+0xe>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	; (8001c34 <LoopForever+0x16>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f00b f807 	bl	800cc28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c1a:	f7ff f97d 	bl	8000f18 <main>

08001c1e <LoopForever>:

LoopForever:
    b LoopForever
 8001c1e:	e7fe      	b.n	8001c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c20:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001c2c:	0800cf80 	.word	0x0800cf80
  ldr r2, =_sbss
 8001c30:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001c34:	20001eec 	.word	0x20001eec

08001c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC1_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_Init+0x3c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_Init+0x3c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f9d8 	bl	8002008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f84b 	bl	8001cf4 <HAL_InitTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	e001      	b.n	8001c6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6a:	f7ff fd63 	bl	8001734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40022000 	.word	0x40022000

08001c7c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_DeInit+0x64>)
 8001c82:	f04f 32ff 	mov.w	r2, #4294967295
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_DeInit+0x64>)
 8001c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_DeInit+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_DeInit+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_DeInit+0x64>)
 8001c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_DeInit+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_DeInit+0x64>)
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_DeInit+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_DeInit+0x64>)
 8001cba:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_DeInit+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_DeInit+0x64>)
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_DeInit+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001cd4:	f000 f806 	bl	8001ce4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_InitTick+0x6c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d023      	beq.n	8001d50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_InitTick+0x70>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_InitTick+0x6c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f9b9 	bl	8002096 <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10f      	bne.n	8001d4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d809      	bhi.n	8001d44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 f971 	bl	800201e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_InitTick+0x74>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e007      	b.n	8001d54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e004      	b.n	8001d54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e001      	b.n	8001d54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000464 	.word	0x20000464

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000464 	.word	0x20000464

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db12      	blt.n	8001ecc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <__NVIC_DisableIRQ+0x44>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	3320      	adds	r3, #32
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f9c:	f3bf 8f4f 	dsb	sy
}
 8001fa0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <__NVIC_SystemReset+0x24>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001faa:	4904      	ldr	r1, [pc, #16]	; (8001fbc <__NVIC_SystemReset+0x24>)
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_SystemReset+0x28>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb2:	f3bf 8f4f 	dsb	sy
}
 8001fb6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <__NVIC_SystemReset+0x20>
 8001fbc:	e000ed00 	.word	0xe000ed00
 8001fc0:	05fa0004 	.word	0x05fa0004

08001fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00f      	b.n	8001ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <SysTick_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f7ff ff78 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <SysTick_Config+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SysTick_Config+0x40>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff feef 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002030:	f7ff ff04 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8002034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7ff ff78 	bl	8001f30 <NVIC_EncodePriority>
 8002040:	4602      	mov	r2, r0
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff47 	bl	8001edc <__NVIC_SetPriority>
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fef7 	bl	8001e58 <__NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff07 	bl	8001e94 <__NVIC_DisableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002092:	f7ff ff81 	bl	8001f98 <__NVIC_SystemReset>

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff90 	bl	8001fc4 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e054      	b.n	800216c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7f5b      	ldrb	r3, [r3, #29]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fb52 	bl	800177c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_CRC_Init+0xc4>)
 80020ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0218 	bic.w	r2, r2, #24
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	e00c      	b.n	800211a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	461a      	mov	r2, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f9bc 	bl	8002488 <HAL_CRCEx_Polynomial_Set>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e028      	b.n	800216c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	795b      	ldrb	r3, [r3, #5]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 32ff 	mov.w	r2, #4294967295
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	e004      	b.n	8002138 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6912      	ldr	r2, [r2, #16]
 8002136:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	04c11db7 	.word	0x04c11db7

08002178 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e022      	b.n	80021d0 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7f5b      	ldrb	r3, [r3, #29]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d101      	bne.n	8002198 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
 8002196:	e01b      	b.n	80021d0 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	791b      	ldrb	r3, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fafd 	bl	80017bc <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2202      	movs	r2, #2
 80021ec:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d006      	beq.n	8002204 <HAL_CRC_Accumulate+0x2c>
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d829      	bhi.n	800224e <HAL_CRC_Accumulate+0x76>
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d019      	beq.n	8002232 <HAL_CRC_Accumulate+0x5a>
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d01e      	beq.n	8002240 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002202:	e024      	b.n	800224e <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00a      	b.n	8002220 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	441a      	add	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d3f0      	bcc.n	800220a <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	e00e      	b.n	8002250 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f85e 	bl	80022f8 <CRC_Handle_8>
 800223c:	6138      	str	r0, [r7, #16]
      break;
 800223e:	e007      	b.n	8002250 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f8e5 	bl	8002414 <CRC_Handle_16>
 800224a:	6138      	str	r0, [r7, #16]
      break;
 800224c:	e000      	b.n	8002250 <HAL_CRC_Accumulate+0x78>
      break;
 800224e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002256:	693b      	ldr	r3, [r7, #16]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2202      	movs	r2, #2
 8002274:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d006      	beq.n	800229c <HAL_CRC_Calculate+0x3c>
 800228e:	2b03      	cmp	r3, #3
 8002290:	d829      	bhi.n	80022e6 <HAL_CRC_Calculate+0x86>
 8002292:	2b01      	cmp	r3, #1
 8002294:	d019      	beq.n	80022ca <HAL_CRC_Calculate+0x6a>
 8002296:	2b02      	cmp	r3, #2
 8002298:	d01e      	beq.n	80022d8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800229a:	e024      	b.n	80022e6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	441a      	add	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3f0      	bcc.n	80022a2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	e00e      	b.n	80022e8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f812 	bl	80022f8 <CRC_Handle_8>
 80022d4:	6138      	str	r0, [r7, #16]
      break;
 80022d6:	e007      	b.n	80022e8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f899 	bl	8002414 <CRC_Handle_16>
 80022e2:	6138      	str	r0, [r7, #16]
      break;
 80022e4:	e000      	b.n	80022e8 <HAL_CRC_Calculate+0x88>
      break;
 80022e6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80022ee:	693b      	ldr	r3, [r7, #16]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	e023      	b.n	8002352 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4413      	add	r3, r2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3301      	adds	r3, #1
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	440b      	add	r3, r1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002324:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	440b      	add	r3, r1
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002334:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3303      	adds	r3, #3
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	440b      	add	r3, r1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002348:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800234a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3d6      	bcc.n	800230a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04d      	beq.n	8002402 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4413      	add	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d116      	bne.n	80023b8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21a      	sxth	r2, r3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	3301      	adds	r3, #1
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	440b      	add	r3, r1
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	8b7a      	ldrh	r2, [r7, #26]
 80023b6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d11f      	bne.n	8002402 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	3301      	adds	r3, #1
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	440b      	add	r3, r1
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	8b7a      	ldrh	r2, [r7, #26]
 80023ee:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4413      	add	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3724      	adds	r7, #36	; 0x24
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e013      	b.n	800244e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	440b      	add	r3, r1
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	d3e6      	bcc.n	8002426 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4413      	add	r3, r2
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002498:	231f      	movs	r3, #31
 800249a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800249c:	bf00      	nop
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	613a      	str	r2, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_CRCEx_Polynomial_Set+0x34>
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b18      	cmp	r3, #24
 80024c0:	d846      	bhi.n	8002550 <HAL_CRCEx_Polynomial_Set+0xc8>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	08002557 	.word	0x08002557
 80024cc:	08002551 	.word	0x08002551
 80024d0:	08002551 	.word	0x08002551
 80024d4:	08002551 	.word	0x08002551
 80024d8:	08002551 	.word	0x08002551
 80024dc:	08002551 	.word	0x08002551
 80024e0:	08002551 	.word	0x08002551
 80024e4:	08002551 	.word	0x08002551
 80024e8:	08002545 	.word	0x08002545
 80024ec:	08002551 	.word	0x08002551
 80024f0:	08002551 	.word	0x08002551
 80024f4:	08002551 	.word	0x08002551
 80024f8:	08002551 	.word	0x08002551
 80024fc:	08002551 	.word	0x08002551
 8002500:	08002551 	.word	0x08002551
 8002504:	08002551 	.word	0x08002551
 8002508:	08002539 	.word	0x08002539
 800250c:	08002551 	.word	0x08002551
 8002510:	08002551 	.word	0x08002551
 8002514:	08002551 	.word	0x08002551
 8002518:	08002551 	.word	0x08002551
 800251c:	08002551 	.word	0x08002551
 8002520:	08002551 	.word	0x08002551
 8002524:	08002551 	.word	0x08002551
 8002528:	0800252d 	.word	0x0800252d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d913      	bls.n	800255a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002536:	e010      	b.n	800255a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b07      	cmp	r3, #7
 800253c:	d90f      	bls.n	800255e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002542:	e00c      	b.n	800255e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	d90b      	bls.n	8002562 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800254e:	e008      	b.n	8002562 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
      break;
 8002554:	e006      	b.n	8002564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002556:	bf00      	nop
 8002558:	e004      	b.n	8002564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002562:	bf00      	nop
  }
  if (status == HAL_OK)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 0118 	bic.w	r1, r3, #24
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e098      	b.n	80026d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <HAL_DMA_Init+0x150>)
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d80f      	bhi.n	80025d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_DMA_Init+0x154>)
 80025ba:	4413      	add	r3, r2
 80025bc:	4a4b      	ldr	r2, [pc, #300]	; (80026ec <HAL_DMA_Init+0x158>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	009a      	lsls	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a48      	ldr	r2, [pc, #288]	; (80026f0 <HAL_DMA_Init+0x15c>)
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
 80025d0:	e00e      	b.n	80025f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_DMA_Init+0x160>)
 80025da:	4413      	add	r3, r2
 80025dc:	4a43      	ldr	r2, [pc, #268]	; (80026ec <HAL_DMA_Init+0x158>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_DMA_Init+0x164>)
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264a:	d039      	beq.n	80026c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_DMA_Init+0x15c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d11a      	bne.n	800268c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002656:	4b29      	ldr	r3, [pc, #164]	; (80026fc <HAL_DMA_Init+0x168>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f003 031c 	and.w	r3, r3, #28
 8002662:	210f      	movs	r1, #15
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	4924      	ldr	r1, [pc, #144]	; (80026fc <HAL_DMA_Init+0x168>)
 800266c:	4013      	ands	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_DMA_Init+0x168>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f003 031c 	and.w	r3, r3, #28
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	491d      	ldr	r1, [pc, #116]	; (80026fc <HAL_DMA_Init+0x168>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
 800268a:	e019      	b.n	80026c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_DMA_Init+0x16c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	f003 031c 	and.w	r3, r3, #28
 8002698:	210f      	movs	r1, #15
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	4917      	ldr	r1, [pc, #92]	; (8002700 <HAL_DMA_Init+0x16c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_DMA_Init+0x16c>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f003 031c 	and.w	r3, r3, #28
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	4911      	ldr	r1, [pc, #68]	; (8002700 <HAL_DMA_Init+0x16c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40020407 	.word	0x40020407
 80026e8:	bffdfff8 	.word	0xbffdfff8
 80026ec:	cccccccd 	.word	0xcccccccd
 80026f0:	40020000 	.word	0x40020000
 80026f4:	bffdfbf8 	.word	0xbffdfbf8
 80026f8:	40020400 	.word	0x40020400
 80026fc:	400200a8 	.word	0x400200a8
 8002700:	400204a8 	.word	0x400204a8

08002704 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e072      	b.n	80027fc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_DMA_DeInit+0x104>)
 800272e:	429a      	cmp	r2, r3
 8002730:	d80f      	bhi.n	8002752 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_DMA_DeInit+0x108>)
 800273a:	4413      	add	r3, r2
 800273c:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_DMA_DeInit+0x10c>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a31      	ldr	r2, [pc, #196]	; (8002814 <HAL_DMA_DeInit+0x110>)
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
 8002750:	e00e      	b.n	8002770 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <HAL_DMA_DeInit+0x114>)
 800275a:	4413      	add	r3, r2
 800275c:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <HAL_DMA_DeInit+0x10c>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2b      	ldr	r2, [pc, #172]	; (800281c <HAL_DMA_DeInit+0x118>)
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f003 021c 	and.w	r2, r3, #28
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_DMA_DeInit+0x110>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10d      	bne.n	80027b2 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_DMA_DeInit+0x11c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f003 031c 	and.w	r3, r3, #28
 80027a2:	210f      	movs	r1, #15
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	491d      	ldr	r1, [pc, #116]	; (8002820 <HAL_DMA_DeInit+0x11c>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e00c      	b.n	80027cc <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_DMA_DeInit+0x120>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 031c 	and.w	r3, r3, #28
 80027be:	210f      	movs	r1, #15
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4917      	ldr	r1, [pc, #92]	; (8002824 <HAL_DMA_DeInit+0x120>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40020407 	.word	0x40020407
 800280c:	bffdfff8 	.word	0xbffdfff8
 8002810:	cccccccd 	.word	0xcccccccd
 8002814:	40020000 	.word	0x40020000
 8002818:	bffdfbf8 	.word	0xbffdfbf8
 800281c:	40020400 	.word	0x40020400
 8002820:	400200a8 	.word	0x400200a8
 8002824:	400204a8 	.word	0x400204a8

08002828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_DMA_Start_IT+0x20>
 8002844:	2302      	movs	r3, #2
 8002846:	e04b      	b.n	80028e0 <HAL_DMA_Start_IT+0xb8>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d13a      	bne.n	80028d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f95f 	bl	8002b44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 020e 	orr.w	r2, r2, #14
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e00f      	b.n	80028c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 020a 	orr.w	r2, r2, #10
 80028be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e005      	b.n	80028de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020e 	bic.w	r2, r2, #14
 8002920:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f003 021c 	and.w	r2, r3, #28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d005      	beq.n	8002988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e029      	b.n	80029dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020e 	bic.w	r2, r2, #14
 8002996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f003 021c 	and.w	r2, r3, #28
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
    }
  }
  return status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f003 031c 	and.w	r3, r3, #28
 8002a06:	2204      	movs	r2, #4
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d026      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x7a>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f003 021c 	and.w	r2, r3, #28
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2104      	movs	r1, #4
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d071      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a5e:	e06c      	b.n	8002b3a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f003 031c 	and.w	r3, r3, #28
 8002a68:	2202      	movs	r2, #2
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02e      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xec>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d029      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 020a 	bic.w	r2, r2, #10
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f003 021c 	and.w	r2, r3, #28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d038      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ad0:	e033      	b.n	8002b3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f003 031c 	and.w	r3, r3, #28
 8002ada:	2208      	movs	r2, #8
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x156>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d025      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020e 	bic.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f003 021c 	and.w	r2, r3, #28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
}
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f003 021c 	and.w	r2, r3, #28
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d108      	bne.n	8002b88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b86:	e007      	b.n	8002b98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <HAL_FLASH_Program+0xd0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_FLASH_Program+0x1e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e053      	b.n	8002c6a <HAL_FLASH_Program+0xc6>
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_FLASH_Program+0xd0>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bcc:	f000 f888 	bl	8002ce0 <FLASH_WaitForLastOperation>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d143      	bne.n	8002c62 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_FLASH_Program+0xd0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_FLASH_Program+0xd4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002bec:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_FLASH_Program+0xd4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <HAL_FLASH_Program+0xd4>)
 8002bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_FLASH_Program+0xd0>)
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	771a      	strb	r2, [r3, #28]
 8002bfe:	e002      	b.n	8002c06 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_FLASH_Program+0xd0>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c10:	68b8      	ldr	r0, [r7, #8]
 8002c12:	f000 f8bd 	bl	8002d90 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002c16:	2301      	movs	r3, #1
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e010      	b.n	8002c3e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d002      	beq.n	8002c28 <HAL_FLASH_Program+0x84>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d10a      	bne.n	8002c3e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	68b8      	ldr	r0, [r7, #8]
 8002c2e:	f000 f8d5 	bl	8002ddc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d102      	bne.n	8002c3e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002c38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c3c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c42:	f000 f84d 	bl	8002ce0 <FLASH_WaitForLastOperation>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_FLASH_Program+0xd4>)
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <HAL_FLASH_Program+0xd4>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002c5e:	f000 f9cf 	bl	8003000 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <HAL_FLASH_Program+0xd0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]

  return status;
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_FLASH_Unlock+0x38>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da0b      	bge.n	8002ca6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_FLASH_Unlock+0x38>)
 8002c90:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_FLASH_Unlock+0x3c>)
 8002c92:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_FLASH_Unlock+0x38>)
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_FLASH_Unlock+0x40>)
 8002c98:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_FLASH_Unlock+0x38>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da01      	bge.n	8002ca6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	45670123 	.word	0x45670123
 8002cbc:	cdef89ab 	.word	0xcdef89ab

08002cc0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_FLASH_Lock+0x1c>)
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_FLASH_Lock+0x1c>)
 8002cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40022000 	.word	0x40022000

08002ce0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff f854 	bl	8001d94 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002cee:	e00d      	b.n	8002d0c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d009      	beq.n	8002d0c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002cf8:	f7ff f84c 	bl	8001d94 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d801      	bhi.n	8002d0c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e036      	b.n	8002d7a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1eb      	bne.n	8002cf0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <FLASH_WaitForLastOperation+0xa8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01e      	beq.n	8002d66 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <FLASH_WaitForLastOperation+0xac>)
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <FLASH_WaitForLastOperation+0xac>)
 8002d32:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <FLASH_WaitForLastOperation+0x6e>
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002d48:	490e      	ldr	r1, [pc, #56]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	618b      	str	r3, [r1, #24]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <FLASH_WaitForLastOperation+0x82>
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d60:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e009      	b.n	8002d7a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <FLASH_WaitForLastOperation+0xa4>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40022000 	.word	0x40022000
 8002d88:	0002c3fa 	.word	0x0002c3fa
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <FLASH_Program_DoubleWord+0x48>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <FLASH_Program_DoubleWord+0x48>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002dae:	f3bf 8f6f 	isb	sy
}
 8002db2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	3104      	adds	r1, #4
 8002dc8:	4613      	mov	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40022000 	.word	0x40022000

08002ddc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <FLASH_Program_Fast+0x68>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <FLASH_Program_Fast+0x68>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e04:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	3304      	adds	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]
    row_index--;
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ef      	bne.n	8002e0c <FLASH_Program_Fast+0x30>
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002e38:	bf00      	nop
 8002e3a:	3724      	adds	r7, #36	; 0x24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e52:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_FLASHEx_Erase+0x16>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e085      	b.n	8002f6a <HAL_FLASHEx_Erase+0x122>
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e68:	f7ff ff3a 	bl	8002ce0 <FLASH_WaitForLastOperation>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d175      	bne.n	8002f62 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002e94:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e9e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	771a      	strb	r2, [r3, #28]
 8002ea6:	e016      	b.n	8002ed6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	771a      	strb	r2, [r3, #28]
 8002eae:	e012      	b.n	8002ed6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002ebc:	4b2e      	ldr	r3, [pc, #184]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002eca:	2202      	movs	r2, #2
 8002ecc:	771a      	strb	r2, [r3, #28]
 8002ece:	e002      	b.n	8002ed6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d111      	bne.n	8002f02 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f84a 	bl	8002f7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ee8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002eec:	f7ff fef8 	bl	8002ce0 <FLASH_WaitForLastOperation>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	6153      	str	r3, [r2, #20]
 8002f00:	e02d      	b.n	8002f5e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	e01d      	b.n	8002f4e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68b8      	ldr	r0, [r7, #8]
 8002f1a:	f000 f84d 	bl	8002fb8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f22:	f7ff fedd 	bl	8002ce0 <FLASH_WaitForLastOperation>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_FLASHEx_Erase+0x130>)
 8002f30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f34:	f023 0302 	bic.w	r3, r3, #2
 8002f38:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	601a      	str	r2, [r3, #0]
          break;
 8002f46:	e00a      	b.n	8002f5e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3d9      	bcc.n	8002f12 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002f5e:	f000 f84f 	bl	8003000 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <HAL_FLASHEx_Erase+0x12c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]

  return status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	40022000 	.word	0x40022000

08002f7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <FLASH_MassErase+0x38>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <FLASH_MassErase+0x38>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <FLASH_MassErase+0x38>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <FLASH_MassErase+0x38>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6153      	str	r3, [r2, #20]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40022000 	.word	0x40022000

08002fb8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <FLASH_PageErase+0x44>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <FLASH_PageErase+0x44>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <FLASH_PageErase+0x44>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <FLASH_PageErase+0x44>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <FLASH_PageErase+0x44>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <FLASH_PageErase+0x44>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6153      	str	r3, [r2, #20]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40022000 	.word	0x40022000

08003000 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <FLASH_FlushCaches+0x8c>)
 8003008:	7f1b      	ldrb	r3, [r3, #28]
 800300a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d002      	beq.n	8003018 <FLASH_FlushCaches+0x18>
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d117      	bne.n	8003048 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <FLASH_FlushCaches+0x90>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <FLASH_FlushCaches+0x90>)
 800301e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003022:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <FLASH_FlushCaches+0x90>)
 800302a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <FLASH_FlushCaches+0x90>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003046:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d002      	beq.n	8003054 <FLASH_FlushCaches+0x54>
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d111      	bne.n	8003078 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <FLASH_FlushCaches+0x90>)
 800305a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800306a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <FLASH_FlushCaches+0x90>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <FLASH_FlushCaches+0x90>)
 8003072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003076:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <FLASH_FlushCaches+0x8c>)
 800307a:	2200      	movs	r2, #0
 800307c:	771a      	strb	r2, [r3, #28]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	2000000c 	.word	0x2000000c
 8003090:	40022000 	.word	0x40022000

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a2:	e154      	b.n	800334e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8146 	beq.w	8003348 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d005      	beq.n	80030d4 <HAL_GPIO_Init+0x40>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d130      	bne.n	8003136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800310a:	2201      	movs	r2, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0201 	and.w	r2, r3, #1
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b03      	cmp	r3, #3
 8003140:	d017      	beq.n	8003172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d123      	bne.n	80031c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	08da      	lsrs	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3208      	adds	r2, #8
 80031c0:	6939      	ldr	r1, [r7, #16]
 80031c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0203 	and.w	r2, r3, #3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80a0 	beq.w	8003348 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003208:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_GPIO_Init+0x2d8>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	4a57      	ldr	r2, [pc, #348]	; (800336c <HAL_GPIO_Init+0x2d8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6613      	str	r3, [r2, #96]	; 0x60
 8003214:	4b55      	ldr	r3, [pc, #340]	; (800336c <HAL_GPIO_Init+0x2d8>)
 8003216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003220:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_GPIO_Init+0x2dc>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800324a:	d019      	beq.n	8003280 <HAL_GPIO_Init+0x1ec>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a49      	ldr	r2, [pc, #292]	; (8003374 <HAL_GPIO_Init+0x2e0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_GPIO_Init+0x1e8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a48      	ldr	r2, [pc, #288]	; (8003378 <HAL_GPIO_Init+0x2e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00d      	beq.n	8003278 <HAL_GPIO_Init+0x1e4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_GPIO_Init+0x2e8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <HAL_GPIO_Init+0x1e0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a46      	ldr	r2, [pc, #280]	; (8003380 <HAL_GPIO_Init+0x2ec>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_GPIO_Init+0x1dc>
 800326c:	2304      	movs	r3, #4
 800326e:	e008      	b.n	8003282 <HAL_GPIO_Init+0x1ee>
 8003270:	2307      	movs	r3, #7
 8003272:	e006      	b.n	8003282 <HAL_GPIO_Init+0x1ee>
 8003274:	2303      	movs	r3, #3
 8003276:	e004      	b.n	8003282 <HAL_GPIO_Init+0x1ee>
 8003278:	2302      	movs	r3, #2
 800327a:	e002      	b.n	8003282 <HAL_GPIO_Init+0x1ee>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_GPIO_Init+0x1ee>
 8003280:	2300      	movs	r3, #0
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	f002 0203 	and.w	r2, r2, #3
 8003288:	0092      	lsls	r2, r2, #2
 800328a:	4093      	lsls	r3, r2
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003292:	4937      	ldr	r1, [pc, #220]	; (8003370 <HAL_GPIO_Init+0x2dc>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a0:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c4:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ee:	4a25      	ldr	r2, [pc, #148]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032f4:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003318:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003342:	4a10      	ldr	r2, [pc, #64]	; (8003384 <HAL_GPIO_Init+0x2f0>)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3301      	adds	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	f47f aea3 	bne.w	80030a4 <HAL_GPIO_Init+0x10>
  }
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40021000 	.word	0x40021000
 8003370:	40010000 	.word	0x40010000
 8003374:	48000400 	.word	0x48000400
 8003378:	48000800 	.word	0x48000800
 800337c:	48000c00 	.word	0x48000c00
 8003380:	48001000 	.word	0x48001000
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003396:	e0b7      	b.n	8003508 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003398:	2201      	movs	r2, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80aa 	beq.w	8003502 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80033ae:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_GPIO_DeInit+0x19c>)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033d6:	d019      	beq.n	800340c <HAL_GPIO_DeInit+0x84>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a53      	ldr	r2, [pc, #332]	; (8003528 <HAL_GPIO_DeInit+0x1a0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_GPIO_DeInit+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_GPIO_DeInit+0x1a4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00d      	beq.n	8003404 <HAL_GPIO_DeInit+0x7c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_GPIO_DeInit+0x1a8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_DeInit+0x78>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_GPIO_DeInit+0x1ac>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_GPIO_DeInit+0x74>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e008      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 80033fc:	2307      	movs	r3, #7
 80033fe:	e006      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 8003400:	2303      	movs	r3, #3
 8003402:	e004      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 8003404:	2302      	movs	r3, #2
 8003406:	e002      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 800340c:	2300      	movs	r3, #0
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	429a      	cmp	r2, r3
 800341c:	d132      	bne.n	8003484 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800341e:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	4944      	ldr	r1, [pc, #272]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 8003428:	4013      	ands	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800342c:	4b42      	ldr	r3, [pc, #264]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	4940      	ldr	r1, [pc, #256]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 8003436:	4013      	ands	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	493d      	ldr	r1, [pc, #244]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 8003444:	4013      	ands	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003448:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	4939      	ldr	r1, [pc, #228]	; (8003538 <HAL_GPIO_DeInit+0x1b0>)
 8003452:	4013      	ands	r3, r2
 8003454:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_GPIO_DeInit+0x19c>)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43da      	mvns	r2, r3
 8003476:	482b      	ldr	r0, [pc, #172]	; (8003524 <HAL_GPIO_DeInit+0x19c>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	400a      	ands	r2, r1
 800347e:	3302      	adds	r3, #2
 8003480:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2103      	movs	r1, #3
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	08d2      	lsrs	r2, r2, #3
 80034b8:	4019      	ands	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2103      	movs	r1, #3
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	2101      	movs	r1, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	2103      	movs	r1, #3
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	401a      	ands	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af41 	bne.w	8003398 <HAL_GPIO_DeInit+0x10>
  }
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40010000 	.word	0x40010000
 8003528:	48000400 	.word	0x48000400
 800352c:	48000800 	.word	0x48000800
 8003530:	48000c00 	.word	0x48000c00
 8003534:	48001000 	.word	0x48001000
 8003538:	40010400 	.word	0x40010400

0800353c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e001      	b.n	800355e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
 8003578:	4613      	mov	r3, r2
 800357a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003588:	e002      	b.n	8003590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	041a      	lsls	r2, r3, #16
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43d9      	mvns	r1, r3
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	400b      	ands	r3, r1
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	af06      	add	r7, sp, #24
 80035d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e109      	b.n	80037f6 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f008 fefa 	bl	800c3f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2203      	movs	r2, #3
 8003600:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f004 fcb3 	bl	8007f74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	687e      	ldr	r6, [r7, #4]
 8003616:	466d      	mov	r5, sp
 8003618:	f106 0410 	add.w	r4, r6, #16
 800361c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003624:	e885 0003 	stmia.w	r5, {r0, r1}
 8003628:	1d33      	adds	r3, r6, #4
 800362a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f004 fc79 	bl	8007f24 <USB_CoreInit>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d8      	b.n	80037f6 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fcad 	bl	8007faa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e04d      	b.n	80036f2 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3305      	adds	r3, #5
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	3304      	adds	r3, #4
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	b298      	uxth	r0, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	333a      	adds	r3, #58	; 0x3a
 8003696:	4602      	mov	r2, r0
 8003698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	440b      	add	r3, r1
 80036aa:	3307      	adds	r3, #7
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	3340      	adds	r3, #64	; 0x40
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	3344      	adds	r3, #68	; 0x44
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	3301      	adds	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3ac      	bcc.n	8003656 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e044      	b.n	800378c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	3301      	adds	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3b5      	bcc.n	8003702 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	687e      	ldr	r6, [r7, #4]
 800379e:	466d      	mov	r5, sp
 80037a0:	f106 0410 	add.w	r4, r6, #16
 80037a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80037b0:	1d33      	adds	r3, r6, #4
 80037b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b4:	6838      	ldr	r0, [r7, #0]
 80037b6:	f004 fc05 	bl	8007fc4 <USB_DevInit>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e014      	b.n	80037f6 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 fc8f 	bl	8005108 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f006 fe02 	bl	800a3f8 <USB_DevDisconnect>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037fe <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e015      	b.n	800383c <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2203      	movs	r2, #3
 8003814:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f006 fda9 	bl	800a374 <USB_StopDevice>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e007      	b.n	800383c <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f008 fe45 	bl	800c4bc <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_Start+0x16>
 8003856:	2302      	movs	r3, #2
 8003858:	e012      	b.n	8003880 <HAL_PCD_Start+0x3c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f004 fb6d 	bl	8007f46 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f006 fdaa 	bl	800a3ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_PCD_Stop+0x16>
 800389a:	2302      	movs	r3, #2
 800389c:	e012      	b.n	80038c4 <HAL_PCD_Stop+0x3c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_DISABLE(hpcd);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fb62 	bl	8007f74 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f006 fd9f 	bl	800a3f8 <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f006 fda2 	bl	800a422 <USB_ReadInterrupts>
 80038de:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fb3e 	bl	8003f6c <PCD_EP_ISR_Handler>

    return;
 80038f0:	e110      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	b292      	uxth	r2, r2
 8003910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f008 fe46 	bl	800c5a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800391a:	2100      	movs	r1, #0
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8fc 	bl	8003b1a <HAL_PCD_SetAddress>

    return;
 8003922:	e0f7      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003940:	b292      	uxth	r2, r2
 8003942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003946:	e0e5      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003964:	b292      	uxth	r2, r2
 8003966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800396a:	e0d3      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d034      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0204 	bic.w	r2, r2, #4
 8003988:	b292      	uxth	r2, r2
 800398a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0208 	bic.w	r2, r2, #8
 80039a0:	b292      	uxth	r2, r2
 80039a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 fbce 	bl	800515c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f008 fe29 	bl	800c618 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d8:	b292      	uxth	r2, r2
 80039da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039de:	e099      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d027      	beq.n	8003a3a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0208 	orr.w	r2, r2, #8
 80039fc:	b292      	uxth	r2, r2
 80039fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a14:	b292      	uxth	r2, r2
 8003a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0204 	orr.w	r2, r2, #4
 8003a2c:	b292      	uxth	r2, r2
 8003a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f008 fdd6 	bl	800c5e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a38:	e06c      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d040      	beq.n	8003ac6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a56:	b292      	uxth	r2, r2
 8003a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d12b      	bne.n	8003abe <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0204 	orr.w	r2, r2, #4
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0208 	orr.w	r2, r2, #8
 8003a90:	b292      	uxth	r2, r2
 8003a92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f001 fb50 	bl	800515c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003abc:	e02a      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f008 fd90 	bl	800c5e4 <HAL_PCD_SuspendCallback>
    return;
 8003ac4:	e026      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f008 fd4e 	bl	800c58a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003aee:	e011      	b.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b12:	bf00      	nop
  }
}
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_PCD_SetAddress+0x1a>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e013      	b.n	8003b5c <HAL_PCD_SetAddress+0x42>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f006 fc28 	bl	800a3a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	70fb      	strb	r3, [r7, #3]
 8003b76:	460b      	mov	r3, r1
 8003b78:	803b      	strh	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da0f      	bge.n	8003baa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	705a      	strb	r2, [r3, #1]
 8003ba8:	e00f      	b.n	8003bca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 0207 	and.w	r2, r3, #7
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bd6:	883a      	ldrh	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	78ba      	ldrb	r2, [r7, #2]
 8003be0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	785b      	ldrb	r3, [r3, #1]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bf4:	78bb      	ldrb	r3, [r7, #2]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d102      	bne.n	8003c00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_PCD_EP_Open+0xaa>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e00e      	b.n	8003c2c <HAL_PCD_EP_Open+0xc8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 f9f3 	bl	8008008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	da0f      	bge.n	8003c68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	705a      	strb	r2, [r3, #1]
 8003c66:	e00f      	b.n	8003c88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 0207 	and.w	r2, r3, #7
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PCD_EP_Close+0x6e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e00e      	b.n	8003cc0 <HAL_PCD_EP_Close+0x8c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 fd3d 	bl	8008730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
 8003cda:	f003 0207 	and.w	r2, r3, #7
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2200      	movs	r2, #0
 8003d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d16:	7afb      	ldrb	r3, [r7, #11]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 feef 	bl	8008b0a <USB_EPStartXfer>
 8003d2c:	e005      	b.n	8003d3a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6979      	ldr	r1, [r7, #20]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fee8 	bl	8008b0a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 0207 	and.w	r2, r3, #7
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	460b      	mov	r3, r1
 8003d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d84:	7afb      	ldrb	r3, [r7, #11]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2200      	movs	r2, #0
 8003dba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 fe93 	bl	8008b0a <USB_EPStartXfer>
 8003de4:	e005      	b.n	8003df2 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 fe8c 	bl	8008b0a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 0207 	and.w	r2, r3, #7
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d901      	bls.n	8003e1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e04e      	b.n	8003eb8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da0f      	bge.n	8003e42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	3304      	adds	r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	705a      	strb	r2, [r3, #1]
 8003e40:	e00d      	b.n	8003e5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_PCD_EP_SetStall+0x82>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e01c      	b.n	8003eb8 <HAL_PCD_EP_SetStall+0xbc>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f006 f972 	bl	800a176 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d108      	bne.n	8003eae <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f006 faca 	bl	800a442 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d901      	bls.n	8003ede <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e042      	b.n	8003f64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da0f      	bge.n	8003f06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3304      	adds	r3, #4
 8003efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	705a      	strb	r2, [r3, #1]
 8003f04:	e00f      	b.n	8003f26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 0207 	and.w	r2, r3, #7
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_PCD_EP_ClrStall+0x86>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e00e      	b.n	8003f64 <HAL_PCD_EP_ClrStall+0xa4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f006 f95f 	bl	800a218 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b096      	sub	sp, #88	; 0x58
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f74:	e39e      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f7e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003f90:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 815e 	bne.w	8004256 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d150      	bne.n	8004048 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	81fb      	strh	r3, [r7, #14]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	332c      	adds	r3, #44	; 0x2c
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	441a      	add	r2, r3
 8004002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004004:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004006:	2100      	movs	r1, #0
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f008 faa4 	bl	800c556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 834c 	beq.w	80046b4 <PCD_EP_ISR_Handler+0x748>
 800401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 8347 	bne.w	80046b4 <PCD_EP_ISR_Handler+0x748>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004032:	b2da      	uxtb	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b292      	uxth	r2, r2
 800403a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004046:	e335      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800405a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800405e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004062:	2b00      	cmp	r3, #0
 8004064:	d032      	beq.n	80040cc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	4413      	add	r3, r2
 8004080:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800408a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8004098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800409c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f006 fa1c 	bl	800a4de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040b2:	4013      	ands	r3, r2
 80040b4:	823b      	strh	r3, [r7, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	8a3a      	ldrh	r2, [r7, #16]
 80040bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040c0:	b292      	uxth	r2, r2
 80040c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f008 fa19 	bl	800c4fc <HAL_PCD_SetupStageCallback>
 80040ca:	e2f3      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040cc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f280 82ef 	bge.w	80046b4 <PCD_EP_ISR_Handler+0x748>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040e2:	4013      	ands	r3, r2
 80040e4:	83fb      	strh	r3, [r7, #30]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	8bfa      	ldrh	r2, [r7, #30]
 80040ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040f0:	b292      	uxth	r2, r2
 80040f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4413      	add	r3, r2
 800410e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d019      	beq.n	8004158 <PCD_EP_ISR_Handler+0x1ec>
 8004124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004132:	6959      	ldr	r1, [r3, #20]
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800413c:	b29b      	uxth	r3, r3
 800413e:	f006 f9ce 	bl	800a4de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	441a      	add	r2, r3
 800414c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004150:	2100      	movs	r1, #0
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f008 f9e4 	bl	800c520 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 82a5 	bne.w	80046b4 <PCD_EP_ISR_Handler+0x748>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004178:	b29b      	uxth	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4413      	add	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b3e      	cmp	r3, #62	; 0x3e
 8004190:	d918      	bls.n	80041c4 <PCD_EP_ISR_Handler+0x258>
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
 800419a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <PCD_EP_ISR_Handler+0x240>
 80041a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a8:	3b01      	subs	r3, #1
 80041aa:	647b      	str	r3, [r7, #68]	; 0x44
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041bc:	b29a      	uxth	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	e029      	b.n	8004218 <PCD_EP_ISR_Handler+0x2ac>
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d112      	bne.n	80041f2 <PCD_EP_ISR_Handler+0x286>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	e012      	b.n	8004218 <PCD_EP_ISR_Handler+0x2ac>
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	647b      	str	r3, [r7, #68]	; 0x44
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <PCD_EP_ISR_Handler+0x2a0>
 8004206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004208:	3301      	adds	r3, #1
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
 800420c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420e:	b29b      	uxth	r3, r3
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	b29a      	uxth	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004228:	827b      	strh	r3, [r7, #18]
 800422a:	8a7b      	ldrh	r3, [r7, #18]
 800422c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004230:	827b      	strh	r3, [r7, #18]
 8004232:	8a7b      	ldrh	r3, [r7, #18]
 8004234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004238:	827b      	strh	r3, [r7, #18]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	8a7b      	ldrh	r3, [r7, #18]
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
 8004254:	e22e      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800426a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800426e:	2b00      	cmp	r3, #0
 8004270:	f280 80f7 	bge.w	8004462 <PCD_EP_ISR_Handler+0x4f6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29a      	uxth	r2, r3
 8004286:	f640 738f 	movw	r3, #3983	; 0xf8f
 800428a:	4013      	ands	r3, r2
 800428c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80042a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042a6:	b292      	uxth	r2, r2
 80042a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042aa:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	3304      	adds	r3, #4
 80042c0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	7b1b      	ldrb	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d123      	bne.n	8004312 <PCD_EP_ISR_Handler+0x3a6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80042f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 808e 	beq.w	8004418 <PCD_EP_ISR_Handler+0x4ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004302:	6959      	ldr	r1, [r3, #20]
 8004304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004306:	88da      	ldrh	r2, [r3, #6]
 8004308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800430c:	f006 f8e7 	bl	800a4de <USB_ReadPMA>
 8004310:	e082      	b.n	8004418 <PCD_EP_ISR_Handler+0x4ac>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d10a      	bne.n	8004330 <PCD_EP_ISR_Handler+0x3c4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800431a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800431e:	461a      	mov	r2, r3
 8004320:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f9d4 	bl	80046d0 <HAL_PCD_EP_DB_Receive>
 8004328:	4603      	mov	r3, r0
 800432a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800432e:	e073      	b.n	8004418 <PCD_EP_ISR_Handler+0x4ac>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d022      	beq.n	80043d4 <PCD_EP_ISR_Handler+0x468>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80043b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02c      	beq.n	8004418 <PCD_EP_ISR_Handler+0x4ac>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c8:	891a      	ldrh	r2, [r3, #8]
 80043ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043ce:	f006 f886 	bl	800a4de <USB_ReadPMA>
 80043d2:	e021      	b.n	8004418 <PCD_EP_ISR_Handler+0x4ac>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80043fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <PCD_EP_ISR_Handler+0x4ac>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440a:	6959      	ldr	r1, [r3, #20]
 800440c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440e:	895a      	ldrh	r2, [r3, #10]
 8004410:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004414:	f006 f863 	bl	800a4de <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004420:	441a      	add	r2, r3
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800442e:	441a      	add	r2, r3
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <PCD_EP_ISR_Handler+0x4dc>
 800443c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d206      	bcs.n	8004456 <PCD_EP_ISR_Handler+0x4ea>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f008 f866 	bl	800c520 <HAL_PCD_DataOutStageCallback>
 8004454:	e005      	b.n	8004462 <PCD_EP_ISR_Handler+0x4f6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800445c:	4618      	mov	r0, r3
 800445e:	f004 fb54 	bl	8008b0a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004462:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8122 	beq.w	80046b4 <PCD_EP_ISR_Handler+0x748>
      {
        ep = &hpcd->IN_ep[epindex];
 8004470:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	78db      	ldrb	r3, [r3, #3]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	f000 80a2 	beq.w	8004610 <PCD_EP_ISR_Handler+0x6a4>
        {
          ep->xfer_len = 0U;
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	7b1b      	ldrb	r3, [r3, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8093 	beq.w	8004602 <PCD_EP_ISR_Handler+0x696>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d046      	beq.n	8004576 <PCD_EP_ISR_Handler+0x60a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d126      	bne.n	800453e <PCD_EP_ISR_Handler+0x5d2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	4413      	add	r3, r2
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	00da      	lsls	r2, r3, #3
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	4413      	add	r3, r2
 8004512:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004522:	b29a      	uxth	r2, r3
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004536:	b29a      	uxth	r2, r3
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e061      	b.n	8004602 <PCD_EP_ISR_Handler+0x696>
 800453e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d15d      	bne.n	8004602 <PCD_EP_ISR_Handler+0x696>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	4413      	add	r3, r2
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	00da      	lsls	r2, r3, #3
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	4413      	add	r3, r2
 8004568:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	e045      	b.n	8004602 <PCD_EP_ISR_Handler+0x696>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d126      	bne.n	80045d2 <PCD_EP_ISR_Handler+0x666>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	4413      	add	r3, r2
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	00da      	lsls	r2, r3, #3
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e017      	b.n	8004602 <PCD_EP_ISR_Handler+0x696>
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d113      	bne.n	8004602 <PCD_EP_ISR_Handler+0x696>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e8:	4413      	add	r3, r2
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	2200      	movs	r2, #0
 8004600:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f007 ffa4 	bl	800c556 <HAL_PCD_DataInStageCallback>
 800460e:	e051      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004610:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d144      	bne.n	80046a6 <PCD_EP_ISR_Handler+0x73a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	4413      	add	r3, r2
 8004636:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800464c:	429a      	cmp	r2, r3
 800464e:	d907      	bls.n	8004660 <PCD_EP_ISR_Handler+0x6f4>
            {
              ep->xfer_len -= TxPctSize;
 8004650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004658:	1ad2      	subs	r2, r2, r3
 800465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465c:	619a      	str	r2, [r3, #24]
 800465e:	e002      	b.n	8004666 <PCD_EP_ISR_Handler+0x6fa>
            }
            else
            {
              ep->xfer_len = 0U;
 8004660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004662:	2200      	movs	r2, #0
 8004664:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <PCD_EP_ISR_Handler+0x710>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f007 ff6e 	bl	800c556 <HAL_PCD_DataInStageCallback>
 800467a:	e01b      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004684:	441a      	add	r2, r3
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004692:	441a      	add	r2, r3
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800469e:	4618      	mov	r0, r3
 80046a0:	f004 fa33 	bl	8008b0a <USB_EPStartXfer>
 80046a4:	e006      	b.n	80046b4 <PCD_EP_ISR_Handler+0x748>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80046aa:	461a      	mov	r2, r3
 80046ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f917 	bl	80048e2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b21b      	sxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f6ff ac58 	blt.w	8003f76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3758      	adds	r7, #88	; 0x58
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d07c      	beq.n	80047e2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	4413      	add	r3, r2
 8004702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	8b7b      	ldrh	r3, [r7, #26]
 8004714:	429a      	cmp	r2, r3
 8004716:	d306      	bcc.n	8004726 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	8b7b      	ldrh	r3, [r7, #26]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	619a      	str	r2, [r3, #24]
 8004724:	e002      	b.n	800472c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d123      	bne.n	800477c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	833b      	strh	r3, [r7, #24]
 8004750:	8b3b      	ldrh	r3, [r7, #24]
 8004752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004756:	833b      	strh	r3, [r7, #24]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	8b3b      	ldrh	r3, [r7, #24]
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01f      	beq.n	80047c6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a0:	82fb      	strh	r3, [r7, #22]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	8afb      	ldrh	r3, [r7, #22]
 80047b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047c6:	8b7b      	ldrh	r3, [r7, #26]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8085 	beq.w	80048d8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6959      	ldr	r1, [r3, #20]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	891a      	ldrh	r2, [r3, #8]
 80047da:	8b7b      	ldrh	r3, [r7, #26]
 80047dc:	f005 fe7f 	bl	800a4de <USB_ReadPMA>
 80047e0:	e07a      	b.n	80048d8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4413      	add	r3, r2
 80047fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004806:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	8b7b      	ldrh	r3, [r7, #26]
 800480e:	429a      	cmp	r2, r3
 8004810:	d306      	bcc.n	8004820 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	8b7b      	ldrh	r3, [r7, #26]
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	619a      	str	r2, [r3, #24]
 800481e:	e002      	b.n	8004826 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d123      	bne.n	8004876 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	83fb      	strh	r3, [r7, #30]
 800484a:	8bfb      	ldrh	r3, [r7, #30]
 800484c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004850:	83fb      	strh	r3, [r7, #30]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	8bfb      	ldrh	r3, [r7, #30]
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11f      	bne.n	80048c0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	83bb      	strh	r3, [r7, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	8bbb      	ldrh	r3, [r7, #28]
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048c0:	8b7b      	ldrh	r3, [r7, #26]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6959      	ldr	r1, [r3, #20]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	895a      	ldrh	r2, [r3, #10]
 80048d2:	8b7b      	ldrh	r3, [r7, #26]
 80048d4:	f005 fe03 	bl	800a4de <USB_ReadPMA>
    }
  }

  return count;
 80048d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b0a2      	sub	sp, #136	; 0x88
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 81c5 	beq.w	8004c86 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	4413      	add	r3, r2
 8004916:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004920:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800492c:	429a      	cmp	r2, r3
 800492e:	d907      	bls.n	8004940 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004938:	1ad2      	subs	r2, r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	619a      	str	r2, [r3, #24]
 800493e:	e002      	b.n	8004946 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2200      	movs	r2, #0
 8004944:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 80b9 	bne.w	8004ac2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d126      	bne.n	80049a6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	4413      	add	r3, r2
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	00da      	lsls	r2, r3, #3
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	4413      	add	r3, r2
 800497a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800498a:	b29a      	uxth	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	e01a      	b.n	80049dc <HAL_PCD_EP_DB_Transmit+0xfa>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d116      	bne.n	80049dc <HAL_PCD_EP_DB_Transmit+0xfa>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049bc:	b29b      	uxth	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	4413      	add	r3, r2
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	00da      	lsls	r2, r3, #3
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	4413      	add	r3, r2
 80049d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2200      	movs	r2, #0
 80049da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d126      	bne.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x156>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	4413      	add	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	00da      	lsls	r2, r3, #3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e017      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d113      	bne.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	4413      	add	r3, r2
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	00da      	lsls	r2, r3, #3
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f007 fd71 	bl	800c556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 82d2 	beq.w	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	827b      	strh	r3, [r7, #18]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	8a7b      	ldrh	r3, [r7, #18]
 8004aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	8013      	strh	r3, [r2, #0]
 8004ac0:	e2b0      	b.n	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d021      	beq.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f040 8284 	bne.w	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b24:	441a      	add	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	69da      	ldr	r2, [r3, #28]
 8004b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b32:	441a      	add	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d309      	bcc.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	621a      	str	r2, [r3, #32]
 8004b56:	e015      	b.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d107      	bne.n	8004b70 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b6e:	e009      	b.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2200      	movs	r2, #0
 8004b82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d155      	bne.n	8004c38 <HAL_PCD_EP_DB_Transmit+0x356>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	4413      	add	r3, r2
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	00da      	lsls	r2, r3, #3
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	4413      	add	r3, r2
 8004bae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb8:	d916      	bls.n	8004be8 <HAL_PCD_EP_DB_Transmit+0x306>
 8004bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	029b      	lsls	r3, r3, #10
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	e043      	b.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d112      	bne.n	8004c14 <HAL_PCD_EP_DB_Transmit+0x332>
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	e02d      	b.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x348>
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	3301      	adds	r3, #1
 8004c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	029b      	lsls	r3, r3, #10
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e01b      	b.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d117      	bne.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c54:	4413      	add	r3, r2
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	00da      	lsls	r2, r3, #3
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c60:	4413      	add	r3, r2
 8004c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6959      	ldr	r1, [r3, #20]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	891a      	ldrh	r2, [r3, #8]
 8004c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f005 fbeb 	bl	800a45a <USB_WritePMA>
 8004c84:	e1ce      	b.n	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d307      	bcc.n	8004cca <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	619a      	str	r2, [r3, #24]
 8004cc8:	e002      	b.n	8004cd0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 80c4 	bne.w	8004e62 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d126      	bne.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf6:	4413      	add	r3, r2
 8004cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	00da      	lsls	r2, r3, #3
 8004d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d08:	667b      	str	r3, [r7, #100]	; 0x64
 8004d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e01a      	b.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x484>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d116      	bne.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x484>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d4c:	4413      	add	r3, r2
 8004d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	00da      	lsls	r2, r3, #3
 8004d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d58:	4413      	add	r3, r2
 8004d5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	2200      	movs	r2, #0
 8004d64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	785b      	ldrb	r3, [r3, #1]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d12f      	bne.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	00da      	lsls	r2, r3, #3
 8004d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	e017      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x522>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d113      	bne.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x522>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dea:	4413      	add	r3, r2
 8004dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	00da      	lsls	r2, r3, #3
 8004df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004df6:	4413      	add	r3, r2
 8004df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e00:	2200      	movs	r2, #0
 8004e02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f007 fba3 	bl	800c556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 8104 	bne.w	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
 8004e60:	e0e0      	b.n	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d121      	bne.n	8004eb0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	f040 80b4 	bne.w	8005024 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ed2:	441a      	add	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6a1a      	ldr	r2, [r3, #32]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d309      	bcc.n	8004ef8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	621a      	str	r2, [r3, #32]
 8004ef6:	e015      	b.n	8004f24 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004f00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f0e:	e009      	b.n	8004f24 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	663b      	str	r3, [r7, #96]	; 0x60
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d155      	bne.n	8004fde <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f46:	4413      	add	r3, r2
 8004f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	00da      	lsls	r2, r3, #3
 8004f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f52:	4413      	add	r3, r2
 8004f54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f58:	657b      	str	r3, [r7, #84]	; 0x54
 8004f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f5e:	d916      	bls.n	8004f8e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	677b      	str	r3, [r7, #116]	; 0x74
 8004f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x694>
 8004f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f72:	3b01      	subs	r3, #1
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
 8004f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e040      	b.n	8005010 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d112      	bne.n	8004fba <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	e02a      	b.n	8005010 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	677b      	str	r3, [r7, #116]	; 0x74
 8004fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fcc:	3301      	adds	r3, #1
 8004fce:	677b      	str	r3, [r7, #116]	; 0x74
 8004fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	029b      	lsls	r3, r3, #10
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	e018      	b.n	8005010 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d114      	bne.n	8005010 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ff4:	4413      	add	r3, r2
 8004ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	00da      	lsls	r2, r3, #3
 8004ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005000:	4413      	add	r3, r2
 8005002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500a:	b29a      	uxth	r2, r3
 800500c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6959      	ldr	r1, [r3, #20]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	895a      	ldrh	r2, [r3, #10]
 800501c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501e:	b29b      	uxth	r3, r3
 8005020:	f005 fa1b 	bl	800a45a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503e:	823b      	strh	r3, [r7, #16]
 8005040:	8a3b      	ldrh	r3, [r7, #16]
 8005042:	f083 0310 	eor.w	r3, r3, #16
 8005046:	823b      	strh	r3, [r7, #16]
 8005048:	8a3b      	ldrh	r3, [r7, #16]
 800504a:	f083 0320 	eor.w	r3, r3, #32
 800504e:	823b      	strh	r3, [r7, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8a3b      	ldrh	r3, [r7, #16]
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3788      	adds	r7, #136	; 0x88
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	817b      	strh	r3, [r7, #10]
 800508c:	4613      	mov	r3, r2
 800508e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005090:	897b      	ldrh	r3, [r7, #10]
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00c      	beq.n	80050b6 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509c:	897b      	ldrh	r3, [r7, #10]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e00a      	b.n	80050cc <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050b6:	897a      	ldrh	r2, [r7, #10]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	3304      	adds	r3, #4
 80050ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80050cc:	893b      	ldrh	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	80da      	strh	r2, [r3, #6]
 80050e0:	e00b      	b.n	80050fa <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2201      	movs	r2, #1
 80050e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800512c:	b29b      	uxth	r3, r3
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005140:	b29b      	uxth	r3, r3
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <HAL_PWREx_GetVoltageRange+0x18>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40007000 	.word	0x40007000

08005190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519e:	d130      	bne.n	8005202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a0:	4b23      	ldr	r3, [pc, #140]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ac:	d038      	beq.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ae:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051be:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2232      	movs	r2, #50	; 0x32
 80051c4:	fb02 f303 	mul.w	r3, r2, r3
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0c9b      	lsrs	r3, r3, #18
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051d4:	e002      	b.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3b01      	subs	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e8:	d102      	bne.n	80051f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f2      	bne.n	80051d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fc:	d110      	bne.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e00f      	b.n	8005222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520e:	d007      	beq.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005218:	4a05      	ldr	r2, [pc, #20]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800521a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800521e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40007000 	.word	0x40007000
 8005234:	20000000 	.word	0x20000000
 8005238:	431bde83 	.word	0x431bde83

0800523c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a04      	ldr	r2, [pc, #16]	; (8005258 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800524a:	6053      	str	r3, [r2, #4]
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40007000 	.word	0x40007000

0800525c <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005262:	4b45      	ldr	r3, [pc, #276]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a44      	ldr	r2, [pc, #272]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800526e:	f7fc fd91 	bl	8001d94 <HAL_GetTick>
 8005272:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005276:	f7fc fd8d 	bl	8001d94 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e073      	b.n	8005370 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005288:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8005294:	4b38      	ldr	r3, [pc, #224]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800529c:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 800529e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 80052a4:	4b34      	ldr	r3, [pc, #208]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_DeInit+0x120>)
 80052ac:	4a34      	ldr	r2, [pc, #208]	; (8005380 <HAL_RCC_DeInit+0x124>)
 80052ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80052b0:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_RCC_DeInit+0x128>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fc fd1d 	bl	8001cf4 <HAL_InitTick>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e055      	b.n	8005370 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80052c4:	f7fc fd66 	bl	8001d94 <HAL_GetTick>
 80052c8:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052cc:	f7fc fd62 	bl	8001d94 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e046      	b.n	8005370 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80052e2:	4b25      	ldr	r3, [pc, #148]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1ee      	bne.n	80052cc <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4921      	ldr	r1, [pc, #132]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <HAL_RCC_DeInit+0x12c>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80052fa:	f7fc fd4b 	bl	8001d94 <HAL_GetTick>
 80052fe:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fc fd47 	bl	8001d94 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e02d      	b.n	8005370 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8005320:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005322:	2200      	movs	r2, #0
 8005324:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a13      	ldr	r2, [pc, #76]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 800532c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005330:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005334:	2200      	movs	r2, #0
 8005336:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 800533e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005342:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 800534a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005358:	f04f 32ff 	mov.w	r2, #4294967295
 800535c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005364:	4a04      	ldr	r2, [pc, #16]	; (8005378 <HAL_RCC_DeInit+0x11c>)
 8005366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800536a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40021000 	.word	0x40021000
 800537c:	20000000 	.word	0x20000000
 8005380:	003d0900 	.word	0x003d0900
 8005384:	20000004 	.word	0x20000004
 8005388:	fafef4ff 	.word	0xfafef4ff

0800538c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f000 bc10 	b.w	8005bc0 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a0:	4b96      	ldr	r3, [pc, #600]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053aa:	4b94      	ldr	r3, [pc, #592]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80e4 	beq.w	800558a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_RCC_OscConfig+0x4c>
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	f040 808b 	bne.w	80054e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	f040 8087 	bne.w	80054e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053d8:	4b88      	ldr	r3, [pc, #544]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_OscConfig+0x64>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e3e7      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	4b81      	ldr	r3, [pc, #516]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <HAL_RCC_OscConfig+0x7e>
 8005400:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005408:	e005      	b.n	8005416 <HAL_RCC_OscConfig+0x8a>
 800540a:	4b7c      	ldr	r3, [pc, #496]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800540c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005416:	4293      	cmp	r3, r2
 8005418:	d223      	bcs.n	8005462 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fd7a 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e3c8      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800542e:	4b73      	ldr	r3, [pc, #460]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a72      	ldr	r2, [pc, #456]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005434:	f043 0308 	orr.w	r3, r3, #8
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b70      	ldr	r3, [pc, #448]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	496d      	ldr	r1, [pc, #436]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800544c:	4b6b      	ldr	r3, [pc, #428]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	4968      	ldr	r1, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800545c:	4313      	orrs	r3, r2
 800545e:	604b      	str	r3, [r1, #4]
 8005460:	e025      	b.n	80054ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005462:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005468:	f043 0308 	orr.w	r3, r3, #8
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b63      	ldr	r3, [pc, #396]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	4960      	ldr	r1, [pc, #384]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005480:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	495b      	ldr	r1, [pc, #364]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fd3a 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e388      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ae:	f000 fc6f 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	4950      	ldr	r1, [pc, #320]	; (8005600 <HAL_RCC_OscConfig+0x274>)
 80054c0:	5ccb      	ldrb	r3, [r1, r3]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	4a4e      	ldr	r2, [pc, #312]	; (8005604 <HAL_RCC_OscConfig+0x278>)
 80054cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054ce:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <HAL_RCC_OscConfig+0x27c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fc fc0e 	bl	8001cf4 <HAL_InitTick>
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d052      	beq.n	8005588 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	e36c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d032      	beq.n	8005554 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054ee:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a42      	ldr	r2, [pc, #264]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054fa:	f7fc fc4b 	bl	8001d94 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005502:	f7fc fc47 	bl	8001d94 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e355      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005514:	4b39      	ldr	r3, [pc, #228]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a35      	ldr	r2, [pc, #212]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005526:	f043 0308 	orr.w	r3, r3, #8
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	4b33      	ldr	r3, [pc, #204]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	4930      	ldr	r1, [pc, #192]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800553e:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	492b      	ldr	r1, [pc, #172]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]
 8005552:	e01a      	b.n	800558a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005554:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a28      	ldr	r2, [pc, #160]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005560:	f7fc fc18 	bl	8001d94 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005568:	f7fc fc14 	bl	8001d94 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e322      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800557a:	4b20      	ldr	r3, [pc, #128]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x1dc>
 8005586:	e000      	b.n	800558a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d073      	beq.n	800567e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d005      	beq.n	80055a8 <HAL_RCC_OscConfig+0x21c>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d10e      	bne.n	80055c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d10b      	bne.n	80055c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a8:	4b14      	ldr	r3, [pc, #80]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d063      	beq.n	800567c <HAL_RCC_OscConfig+0x2f0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d15f      	bne.n	800567c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e2ff      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d106      	bne.n	80055d8 <HAL_RCC_OscConfig+0x24c>
 80055ca:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a0b      	ldr	r2, [pc, #44]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e025      	b.n	8005624 <HAL_RCC_OscConfig+0x298>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e0:	d114      	bne.n	800560c <HAL_RCC_OscConfig+0x280>
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4b03      	ldr	r3, [pc, #12]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a02      	ldr	r2, [pc, #8]	; (80055fc <HAL_RCC_OscConfig+0x270>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e013      	b.n	8005624 <HAL_RCC_OscConfig+0x298>
 80055fc:	40021000 	.word	0x40021000
 8005600:	0800cf28 	.word	0x0800cf28
 8005604:	20000000 	.word	0x20000000
 8005608:	20000004 	.word	0x20000004
 800560c:	4ba0      	ldr	r3, [pc, #640]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a9f      	ldr	r2, [pc, #636]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	4b9d      	ldr	r3, [pc, #628]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a9c      	ldr	r2, [pc, #624]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800561e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc fbb2 	bl	8001d94 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fc fbae 	bl	8001d94 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e2bc      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005646:	4b92      	ldr	r3, [pc, #584]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0x2a8>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc fb9e 	bl	8001d94 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fc fb9a 	bl	8001d94 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2a8      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800566e:	4b88      	ldr	r3, [pc, #544]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x2d0>
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d060      	beq.n	800574c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b04      	cmp	r3, #4
 800568e:	d005      	beq.n	800569c <HAL_RCC_OscConfig+0x310>
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d119      	bne.n	80056ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d116      	bne.n	80056ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800569c:	4b7c      	ldr	r3, [pc, #496]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_OscConfig+0x328>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e285      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	4b76      	ldr	r3, [pc, #472]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	4973      	ldr	r1, [pc, #460]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c8:	e040      	b.n	800574c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d023      	beq.n	800571a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d2:	4b6f      	ldr	r3, [pc, #444]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fc fb59 	bl	8001d94 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e6:	f7fc fb55 	bl	8001d94 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e263      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f8:	4b65      	ldr	r3, [pc, #404]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005704:	4b62      	ldr	r3, [pc, #392]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	495f      	ldr	r1, [pc, #380]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
 8005718:	e018      	b.n	800574c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571a:	4b5d      	ldr	r3, [pc, #372]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a5c      	ldr	r2, [pc, #368]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fc fb35 	bl	8001d94 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572e:	f7fc fb31 	bl	8001d94 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e23f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d03c      	beq.n	80057d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01c      	beq.n	800579a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005760:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005766:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fc fb10 	bl	8001d94 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005778:	f7fc fb0c 	bl	8001d94 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e21a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800578c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ef      	beq.n	8005778 <HAL_RCC_OscConfig+0x3ec>
 8005798:	e01b      	b.n	80057d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579a:	4b3d      	ldr	r3, [pc, #244]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800579c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a0:	4a3b      	ldr	r2, [pc, #236]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057aa:	f7fc faf3 	bl	8001d94 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b2:	f7fc faef 	bl	8001d94 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e1fd      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057c4:	4b32      	ldr	r3, [pc, #200]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80057c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1ef      	bne.n	80057b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80a6 	beq.w	800592c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057e4:	4b2a      	ldr	r3, [pc, #168]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10d      	bne.n	800580c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f0:	4b27      	ldr	r3, [pc, #156]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f4:	4a26      	ldr	r2, [pc, #152]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6593      	str	r3, [r2, #88]	; 0x58
 80057fc:	4b24      	ldr	r3, [pc, #144]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005808:	2301      	movs	r3, #1
 800580a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <HAL_RCC_OscConfig+0x508>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d118      	bne.n	800584a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005818:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_RCC_OscConfig+0x508>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_RCC_OscConfig+0x508>)
 800581e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005824:	f7fc fab6 	bl	8001d94 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582c:	f7fc fab2 	bl	8001d94 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e1c0      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <HAL_RCC_OscConfig+0x508>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d108      	bne.n	8005864 <HAL_RCC_OscConfig+0x4d8>
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005862:	e029      	b.n	80058b8 <HAL_RCC_OscConfig+0x52c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b05      	cmp	r3, #5
 800586a:	d115      	bne.n	8005898 <HAL_RCC_OscConfig+0x50c>
 800586c:	4b08      	ldr	r3, [pc, #32]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	4a07      	ldr	r2, [pc, #28]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005874:	f043 0304 	orr.w	r3, r3, #4
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	4a03      	ldr	r2, [pc, #12]	; (8005890 <HAL_RCC_OscConfig+0x504>)
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800588c:	e014      	b.n	80058b8 <HAL_RCC_OscConfig+0x52c>
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000
 8005894:	40007000 	.word	0x40007000
 8005898:	4b9a      	ldr	r3, [pc, #616]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	4a99      	ldr	r2, [pc, #612]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a8:	4b96      	ldr	r3, [pc, #600]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	4a95      	ldr	r2, [pc, #596]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fc fa68 	bl	8001d94 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c6:	e00a      	b.n	80058de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c8:	f7fc fa64 	bl	8001d94 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e170      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058de:	4b89      	ldr	r3, [pc, #548]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ed      	beq.n	80058c8 <HAL_RCC_OscConfig+0x53c>
 80058ec:	e015      	b.n	800591a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fc fa51 	bl	8001d94 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f6:	f7fc fa4d 	bl	8001d94 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	f241 3288 	movw	r2, #5000	; 0x1388
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e159      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800590c:	4b7d      	ldr	r3, [pc, #500]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ed      	bne.n	80058f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800591a:	7ffb      	ldrb	r3, [r7, #31]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d105      	bne.n	800592c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005920:	4b78      	ldr	r3, [pc, #480]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005924:	4a77      	ldr	r2, [pc, #476]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d03c      	beq.n	80059b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01c      	beq.n	800597a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005940:	4b70      	ldr	r3, [pc, #448]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005946:	4a6f      	ldr	r2, [pc, #444]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005950:	f7fc fa20 	bl	8001d94 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005958:	f7fc fa1c 	bl	8001d94 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e12a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800596a:	4b66      	ldr	r3, [pc, #408]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 800596c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0ef      	beq.n	8005958 <HAL_RCC_OscConfig+0x5cc>
 8005978:	e01b      	b.n	80059b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800597a:	4b62      	ldr	r3, [pc, #392]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 800597c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005980:	4a60      	ldr	r2, [pc, #384]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598a:	f7fc fa03 	bl	8001d94 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005992:	f7fc f9ff 	bl	8001d94 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e10d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059a4:	4b57      	ldr	r3, [pc, #348]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 80059a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ef      	bne.n	8005992 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8101 	beq.w	8005bbe <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	f040 80c9 	bne.w	8005b58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059c6:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f003 0203 	and.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d12c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	3b01      	subs	r3, #1
 80059e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d123      	bne.n	8005a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d11b      	bne.n	8005a34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d113      	bne.n	8005a34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d109      	bne.n	8005a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d06b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b0c      	cmp	r3, #12
 8005a38:	d062      	beq.n	8005b00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a3a:	4b32      	ldr	r3, [pc, #200]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e0ba      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a4a:	4b2e      	ldr	r3, [pc, #184]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a56:	f7fc f99d 	bl	8001d94 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5e:	f7fc f999 	bl	8001d94 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e0a7      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a70:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f0      	bne.n	8005a5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7c:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <HAL_RCC_OscConfig+0x77c>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0112      	lsls	r2, r2, #4
 8005a90:	4311      	orrs	r1, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a96:	0212      	lsls	r2, r2, #8
 8005a98:	4311      	orrs	r1, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a9e:	0852      	lsrs	r2, r2, #1
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	0552      	lsls	r2, r2, #21
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005aaa:	0852      	lsrs	r2, r2, #1
 8005aac:	3a01      	subs	r2, #1
 8005aae:	0652      	lsls	r2, r2, #25
 8005ab0:	4311      	orrs	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab6:	06d2      	lsls	r2, r2, #27
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	4912      	ldr	r1, [pc, #72]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ac0:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ad8:	f7fc f95c 	bl	8001d94 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fc f958 	bl	8001d94 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e066      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <HAL_RCC_OscConfig+0x778>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005afe:	e05e      	b.n	8005bbe <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e05d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
 8005b04:	40021000 	.word	0x40021000
 8005b08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d152      	bne.n	8005bbe <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b24:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b30:	f7fc f930 	bl	8001d94 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fc f92c 	bl	8001d94 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e03a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x7ac>
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d02d      	beq.n	8005bba <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b68:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b7c:	f023 0303 	bic.w	r3, r3, #3
 8005b80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005b88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fc f8ff 	bl	8001d94 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9a:	f7fc f8fb 	bl	8001d94 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e009      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_OscConfig+0x83c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <HAL_RCC_OscConfig+0x80e>
 8005bb8:	e001      	b.n	8005bbe <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000

08005bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0c8      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d910      	bls.n	8005c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bee:	4b63      	ldr	r3, [pc, #396]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f023 0207 	bic.w	r2, r3, #7
 8005bf6:	4961      	ldr	r1, [pc, #388]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfe:	4b5f      	ldr	r3, [pc, #380]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0b0      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d04c      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c24:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d121      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e09e      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3c:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d115      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e092      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c54:	4b4a      	ldr	r3, [pc, #296]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e086      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c64:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e07e      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c74:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 0203 	bic.w	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	493f      	ldr	r1, [pc, #252]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c86:	f7fc f885 	bl	8001d94 <HAL_GetTick>
 8005c8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8e:	f7fc f881 	bl	8001d94 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e066      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 020c 	and.w	r2, r3, #12
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1eb      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	492c      	ldr	r1, [pc, #176]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b29      	ldr	r3, [pc, #164]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d210      	bcs.n	8005d04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 0207 	bic.w	r2, r3, #7
 8005cea:	4924      	ldr	r1, [pc, #144]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e036      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4918      	ldr	r1, [pc, #96]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4910      	ldr	r1, [pc, #64]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d42:	f000 f825 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d46:	4602      	mov	r2, r0
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	091b      	lsrs	r3, r3, #4
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	490c      	ldr	r1, [pc, #48]	; (8005d84 <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	5ccb      	ldrb	r3, [r1, r3]
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <HAL_RCC_ClockConfig+0x1c0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fb ffc4 	bl	8001cf4 <HAL_InitTick>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40022000 	.word	0x40022000
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800cf28 	.word	0x0800cf28
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	20000004 	.word	0x20000004

08005d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	4b3b      	ldr	r3, [pc, #236]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d121      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11e      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dc4:	4b34      	ldr	r3, [pc, #208]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dd0:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	e005      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dec:	4a2b      	ldr	r2, [pc, #172]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d102      	bne.n	8005e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e004      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d134      	bne.n	8005e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e1e:	4b1e      	ldr	r3, [pc, #120]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d003      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0xac>
 8005e34:	e005      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e38:	617b      	str	r3, [r7, #20]
      break;
 8005e3a:	e005      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e3e:	617b      	str	r3, [r7, #20]
      break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	617b      	str	r3, [r7, #20]
      break;
 8005e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	fb03 f202 	mul.w	r2, r3, r2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	0e5b      	lsrs	r3, r3, #25
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e88:	69bb      	ldr	r3, [r7, #24]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3724      	adds	r7, #36	; 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800cf40 	.word	0x0800cf40
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000000 	.word	0x20000000

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ec4:	f7ff fff0 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800cf38 	.word	0x0800cf38

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ef0:	f7ff ffda 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0adb      	lsrs	r3, r3, #11
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4904      	ldr	r1, [pc, #16]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800cf38 	.word	0x0800cf38

08005f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f24:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f30:	f7ff f920 	bl	8005174 <HAL_PWREx_GetVoltageRange>
 8005f34:	6178      	str	r0, [r7, #20]
 8005f36:	e014      	b.n	8005f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f42:	6593      	str	r3, [r2, #88]	; 0x58
 8005f44:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7ff f910 	bl	8005174 <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d10b      	bne.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b80      	cmp	r3, #128	; 0x80
 8005f6e:	d919      	bls.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2ba0      	cmp	r3, #160	; 0xa0
 8005f74:	d902      	bls.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f76:	2302      	movs	r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e013      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e010      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d902      	bls.n	8005f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f88:	2303      	movs	r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e00a      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	d102      	bne.n	8005f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f94:	2302      	movs	r3, #2
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	e004      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d101      	bne.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 0207 	bic.w	r2, r3, #7
 8005fac:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40022000 	.word	0x40022000

08005fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d031      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ffc:	d01a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006002:	d814      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800600c:	d10f      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800600e:	4b5d      	ldr	r3, [pc, #372]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	4a5c      	ldr	r2, [pc, #368]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800601a:	e00c      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fa44 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800602c:	e003      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	74fb      	strb	r3, [r7, #19]
      break;
 8006032:	e000      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006036:	7cfb      	ldrb	r3, [r7, #19]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800603c:	4b51      	ldr	r3, [pc, #324]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	494e      	ldr	r1, [pc, #312]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006052:	e001      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 809e 	beq.w	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800606a:	4b46      	ldr	r3, [pc, #280]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006080:	4b40      	ldr	r3, [pc, #256]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	4a3f      	ldr	r2, [pc, #252]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608a:	6593      	str	r3, [r2, #88]	; 0x58
 800608c:	4b3d      	ldr	r3, [pc, #244]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800608e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006098:	2301      	movs	r3, #1
 800609a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609c:	4b3a      	ldr	r3, [pc, #232]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a39      	ldr	r2, [pc, #228]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060a8:	f7fb fe74 	bl	8001d94 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ae:	e009      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b0:	f7fb fe70 	bl	8001d94 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d902      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	74fb      	strb	r3, [r7, #19]
        break;
 80060c2:	e005      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060c4:	4b30      	ldr	r3, [pc, #192]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0ef      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80060d0:	7cfb      	ldrb	r3, [r7, #19]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d15a      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01e      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d019      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fb fe30 	bl	8001d94 <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006136:	e00b      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fb fe2c 	bl	8001d94 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	; 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d902      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	74fb      	strb	r3, [r7, #19]
            break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ec      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006172:	4904      	ldr	r1, [pc, #16]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800617a:	e009      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800617c:	7cfb      	ldrb	r3, [r7, #19]
 800617e:	74bb      	strb	r3, [r7, #18]
 8006180:	e006      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006182:	bf00      	nop
 8006184:	40021000 	.word	0x40021000
 8006188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006190:	7c7b      	ldrb	r3, [r7, #17]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b9e      	ldr	r3, [pc, #632]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	4a9d      	ldr	r2, [pc, #628]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ae:	4b98      	ldr	r3, [pc, #608]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f023 0203 	bic.w	r2, r3, #3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	4994      	ldr	r1, [pc, #592]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d0:	4b8f      	ldr	r3, [pc, #572]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 020c 	bic.w	r2, r3, #12
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	498c      	ldr	r1, [pc, #560]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061f2:	4b87      	ldr	r3, [pc, #540]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	4983      	ldr	r1, [pc, #524]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006214:	4b7e      	ldr	r3, [pc, #504]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	497b      	ldr	r1, [pc, #492]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006236:	4b76      	ldr	r3, [pc, #472]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	4972      	ldr	r1, [pc, #456]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006258:	4b6d      	ldr	r3, [pc, #436]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	496a      	ldr	r1, [pc, #424]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800627a:	4b65      	ldr	r3, [pc, #404]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006288:	4961      	ldr	r1, [pc, #388]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800629c:	4b5c      	ldr	r3, [pc, #368]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	4959      	ldr	r1, [pc, #356]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062be:	4b54      	ldr	r3, [pc, #336]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	4950      	ldr	r1, [pc, #320]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062e0:	4b4b      	ldr	r3, [pc, #300]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	4948      	ldr	r1, [pc, #288]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006302:	4b43      	ldr	r3, [pc, #268]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006308:	f023 0203 	bic.w	r2, r3, #3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	493f      	ldr	r1, [pc, #252]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d028      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006324:	4b3a      	ldr	r3, [pc, #232]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006332:	4937      	ldr	r1, [pc, #220]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006342:	d106      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006344:	4b32      	ldr	r3, [pc, #200]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	4a31      	ldr	r2, [pc, #196]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800634a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634e:	60d3      	str	r3, [r2, #12]
 8006350:	e011      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800635a:	d10c      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	2101      	movs	r1, #1
 8006362:	4618      	mov	r0, r3
 8006364:	f000 f8a4 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d028      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006390:	491f      	ldr	r1, [pc, #124]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a0:	d106      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a2:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80063a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ac:	60d3      	str	r3, [r2, #12]
 80063ae:	e011      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 f875 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d02b      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	4908      	ldr	r1, [pc, #32]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063fe:	d109      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4a02      	ldr	r2, [pc, #8]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800640a:	60d3      	str	r3, [r2, #12]
 800640c:	e014      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800640e:	bf00      	nop
 8006410:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800641c:	d10c      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	2101      	movs	r1, #1
 8006424:	4618      	mov	r0, r3
 8006426:	f000 f843 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8006434:	7cfb      	ldrb	r3, [r7, #19]
 8006436:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01c      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006444:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	4916      	ldr	r1, [pc, #88]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006462:	d10c      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	2102      	movs	r1, #2
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f820 	bl	80064b0 <RCCEx_PLLSAI1_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800647a:	7cfb      	ldrb	r3, [r7, #19]
 800647c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	4904      	ldr	r1, [pc, #16]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000

080064b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064be:	4b74      	ldr	r3, [pc, #464]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064ca:	4b71      	ldr	r3, [pc, #452]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0203 	and.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d10d      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
       ||
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064e2:	4b6b      	ldr	r3, [pc, #428]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	091b      	lsrs	r3, r3, #4
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
       ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d047      	beq.n	8006586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
 80064fa:	e044      	b.n	8006586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d018      	beq.n	8006536 <RCCEx_PLLSAI1_Config+0x86>
 8006504:	2b03      	cmp	r3, #3
 8006506:	d825      	bhi.n	8006554 <RCCEx_PLLSAI1_Config+0xa4>
 8006508:	2b01      	cmp	r3, #1
 800650a:	d002      	beq.n	8006512 <RCCEx_PLLSAI1_Config+0x62>
 800650c:	2b02      	cmp	r3, #2
 800650e:	d009      	beq.n	8006524 <RCCEx_PLLSAI1_Config+0x74>
 8006510:	e020      	b.n	8006554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006512:	4b5f      	ldr	r3, [pc, #380]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11d      	bne.n	800655a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006522:	e01a      	b.n	800655a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006524:	4b5a      	ldr	r3, [pc, #360]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	2b00      	cmp	r3, #0
 800652e:	d116      	bne.n	800655e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006534:	e013      	b.n	800655e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006536:	4b56      	ldr	r3, [pc, #344]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006542:	4b53      	ldr	r3, [pc, #332]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006552:	e006      	b.n	8006562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e004      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006562:	bf00      	nop
    }

    if(status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10d      	bne.n	8006586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800656a:	4b49      	ldr	r3, [pc, #292]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6819      	ldr	r1, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	3b01      	subs	r3, #1
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	430b      	orrs	r3, r1
 8006580:	4943      	ldr	r1, [pc, #268]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d17c      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800658c:	4b40      	ldr	r3, [pc, #256]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3f      	ldr	r2, [pc, #252]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006598:	f7fb fbfc 	bl	8001d94 <HAL_GetTick>
 800659c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800659e:	e009      	b.n	80065b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065a0:	f7fb fbf8 	bl	8001d94 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d902      	bls.n	80065b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	73fb      	strb	r3, [r7, #15]
        break;
 80065b2:	e005      	b.n	80065c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065b4:	4b36      	ldr	r3, [pc, #216]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ef      	bne.n	80065a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d15f      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d110      	bne.n	80065ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065cc:	4b30      	ldr	r3, [pc, #192]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6892      	ldr	r2, [r2, #8]
 80065dc:	0211      	lsls	r1, r2, #8
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68d2      	ldr	r2, [r2, #12]
 80065e2:	06d2      	lsls	r2, r2, #27
 80065e4:	430a      	orrs	r2, r1
 80065e6:	492a      	ldr	r1, [pc, #168]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	610b      	str	r3, [r1, #16]
 80065ec:	e027      	b.n	800663e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d112      	bne.n	800661a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f4:	4b26      	ldr	r3, [pc, #152]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6892      	ldr	r2, [r2, #8]
 8006604:	0211      	lsls	r1, r2, #8
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6912      	ldr	r2, [r2, #16]
 800660a:	0852      	lsrs	r2, r2, #1
 800660c:	3a01      	subs	r2, #1
 800660e:	0552      	lsls	r2, r2, #21
 8006610:	430a      	orrs	r2, r1
 8006612:	491f      	ldr	r1, [pc, #124]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006614:	4313      	orrs	r3, r2
 8006616:	610b      	str	r3, [r1, #16]
 8006618:	e011      	b.n	800663e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6892      	ldr	r2, [r2, #8]
 800662a:	0211      	lsls	r1, r2, #8
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6952      	ldr	r2, [r2, #20]
 8006630:	0852      	lsrs	r2, r2, #1
 8006632:	3a01      	subs	r2, #1
 8006634:	0652      	lsls	r2, r2, #25
 8006636:	430a      	orrs	r2, r1
 8006638:	4915      	ldr	r1, [pc, #84]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	4313      	orrs	r3, r2
 800663c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a13      	ldr	r2, [pc, #76]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006648:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664a:	f7fb fba3 	bl	8001d94 <HAL_GetTick>
 800664e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006650:	e009      	b.n	8006666 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006652:	f7fb fb9f 	bl	8001d94 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d902      	bls.n	8006666 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	73fb      	strb	r3, [r7, #15]
          break;
 8006664:	e005      	b.n	8006672 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0ef      	beq.n	8006652 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	4903      	ldr	r1, [pc, #12]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006682:	4313      	orrs	r3, r2
 8006684:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000

08006694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e040      	b.n	8006728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fb f89a 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	; 0x24
 80066c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fd30 	bl	8007138 <UART_SetConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e022      	b.n	8006728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ffaa 	bl	8007644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 f831 	bl	8007788 <UART_CheckIdleState>
 8006726:	4603      	mov	r3, r0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e02b      	b.n	800679a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2224      	movs	r2, #36	; 0x24
 8006746:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fb f949 	bl	8001a08 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b08a      	sub	sp, #40	; 0x28
 80067a6:	af02      	add	r7, sp, #8
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	603b      	str	r3, [r7, #0]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	f040 8082 	bne.w	80068c0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_UART_Transmit+0x26>
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e07a      	b.n	80068c2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UART_Transmit+0x38>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e073      	b.n	80068c2 <HAL_UART_Transmit+0x120>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2221      	movs	r2, #33	; 0x21
 80067ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067f0:	f7fb fad0 	bl	8001d94 <HAL_GetTick>
 80067f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	88fa      	ldrh	r2, [r7, #6]
 8006802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d108      	bne.n	8006822 <HAL_UART_Transmit+0x80>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e003      	b.n	800682a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006832:	e02d      	b.n	8006890 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2200      	movs	r2, #0
 800683c:	2180      	movs	r1, #128	; 0x80
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 ffeb 	bl	800781a <UART_WaitOnFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e039      	b.n	80068c2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10b      	bne.n	800686c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006860:	b292      	uxth	r2, r2
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	3302      	adds	r3, #2
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	e008      	b.n	800687e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	b292      	uxth	r2, r2
 8006876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	3301      	adds	r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1cb      	bne.n	8006834 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2200      	movs	r2, #0
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 ffb7 	bl	800781a <UART_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e005      	b.n	80068c2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b09d      	sub	sp, #116	; 0x74
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068dc:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_UART_DMAPause+0x22>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e083      	b.n	80069f4 <HAL_UART_DMAPause+0x12a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d11c      	bne.n	800693c <HAL_UART_DMAPause+0x72>
 8006902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006904:	2b21      	cmp	r3, #33	; 0x21
 8006906:	d119      	bne.n	800693c <HAL_UART_DMAPause+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800691e:	667b      	str	r3, [r7, #100]	; 0x64
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006928:	657a      	str	r2, [r7, #84]	; 0x54
 800692a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800692e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <HAL_UART_DMAPause+0x3e>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d14f      	bne.n	80069ea <HAL_UART_DMAPause+0x120>
 800694a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800694c:	2b22      	cmp	r3, #34	; 0x22
 800694e:	d14c      	bne.n	80069ea <HAL_UART_DMAPause+0x120>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006964:	663b      	str	r3, [r7, #96]	; 0x60
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696e:	643b      	str	r3, [r7, #64]	; 0x40
 8006970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e6      	bne.n	8006950 <HAL_UART_DMAPause+0x86>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	61fb      	str	r3, [r7, #28]
   return(result);
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e5      	bne.n	8006982 <HAL_UART_DMAPause+0xb8>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d6:	61ba      	str	r2, [r7, #24]
 80069d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	613b      	str	r3, [r7, #16]
   return(result);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e5      	bne.n	80069b6 <HAL_UART_DMAPause+0xec>
  }

  __HAL_UNLOCK(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3774      	adds	r7, #116	; 0x74
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b09b      	sub	sp, #108	; 0x6c
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_UART_DMAResume+0x16>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e07f      	b.n	8006b16 <HAL_UART_DMAResume+0x116>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	2b21      	cmp	r3, #33	; 0x21
 8006a24:	d119      	bne.n	8006a5a <HAL_UART_DMAResume+0x5a>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3308      	adds	r3, #8
 8006a44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a46:	657a      	str	r2, [r7, #84]	; 0x54
 8006a48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e5      	bne.n	8006a26 <HAL_UART_DMAResume+0x26>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5e:	2b22      	cmp	r3, #34	; 0x22
 8006a60:	d154      	bne.n	8006b0c <HAL_UART_DMAResume+0x10c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2208      	movs	r2, #8
 8006a68:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <HAL_UART_DMAResume+0xa4>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a86:	663b      	str	r3, [r7, #96]	; 0x60
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a90:	643b      	str	r3, [r7, #64]	; 0x40
 8006a92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <HAL_UART_DMAResume+0xa4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006af8:	61ba      	str	r2, [r7, #24]
 8006afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6979      	ldr	r1, [r7, #20]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	613b      	str	r3, [r7, #16]
   return(result);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e5      	bne.n	8006ad8 <HAL_UART_DMAResume+0xd8>
  }

  __HAL_UNLOCK(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	376c      	adds	r7, #108	; 0x6c
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
	...

08006b24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b0ba      	sub	sp, #232	; 0xe8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b52:	4013      	ands	r3, r2
 8006b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00f      	beq.n	8006b8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 82a6 	beq.w	80070ce <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
      }
      return;
 8006b8a:	e2a0      	b.n	80070ce <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8117 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ba2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ba6:	4b85      	ldr	r3, [pc, #532]	; (8006dbc <HAL_UART_IRQHandler+0x298>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 810a 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d011      	beq.n	8006be0 <HAL_UART_IRQHandler+0xbc>
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd6:	f043 0201 	orr.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d011      	beq.n	8006c10 <HAL_UART_IRQHandler+0xec>
 8006bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c06:	f043 0204 	orr.w	r2, r3, #4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d011      	beq.n	8006c40 <HAL_UART_IRQHandler+0x11c>
 8006c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c36:	f043 0202 	orr.w	r2, r3, #2
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d017      	beq.n	8006c7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d105      	bne.n	8006c64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2208      	movs	r2, #8
 8006c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c72:	f043 0208 	orr.w	r2, r3, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <HAL_UART_IRQHandler+0x18a>
 8006c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca4:	f043 0220 	orr.w	r2, r3, #32
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 820c 	beq.w	80070d2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00d      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	d005      	beq.n	8006d06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d04f      	beq.n	8006da6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 ff18 	bl	8007b3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d141      	bne.n	8006d9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1d9      	bne.n	8006d1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <HAL_UART_IRQHandler+0x29c>)
 8006d74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fb fdf2 	bl	8002964 <HAL_DMA_Abort_IT>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	e00f      	b.n	8006db6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9c4 	bl	8007124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9c:	e00b      	b.n	8006db6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9c0 	bl	8007124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	e007      	b.n	8006db6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9bc 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006db4:	e18d      	b.n	80070d2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db6:	bf00      	nop
    return;
 8006db8:	e18b      	b.n	80070d2 <HAL_UART_IRQHandler+0x5ae>
 8006dba:	bf00      	nop
 8006dbc:	04000120 	.word	0x04000120
 8006dc0:	08007ddb 	.word	0x08007ddb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f040 8146 	bne.w	800705a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 813f 	beq.w	800705a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8138 	beq.w	800705a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2210      	movs	r2, #16
 8006df0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	f040 80b4 	bne.w	8006f6a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 815f 	beq.w	80070d6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e22:	429a      	cmp	r2, r3
 8006e24:	f080 8157 	bcs.w	80070d6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 8085 	bne.w	8006f4e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1da      	bne.n	8006e44 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e1      	bne.n	8006e8e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e4      	bne.n	8006f0e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fb fccd 	bl	80028e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7f9 fdc8 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f68:	e0b5      	b.n	80070d6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80a7 	beq.w	80070da <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80a2 	beq.w	80070da <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e4      	bne.n	8006f96 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	623b      	str	r3, [r7, #32]
   return(result);
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ff0:	633a      	str	r2, [r7, #48]	; 0x30
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e3      	bne.n	8006fcc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60fb      	str	r3, [r7, #12]
   return(result);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	617b      	str	r3, [r7, #20]
   return(result);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e4      	bne.n	8007016 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800704c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7f9 fd50 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007058:	e03f      	b.n	80070da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <HAL_UART_IRQHandler+0x560>
 8007066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800706a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d008      	beq.n	8007084 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800707a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 feec 	bl	8007e5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007082:	e02d      	b.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01c      	beq.n	80070de <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
    }
    return;
 80070ac:	e017      	b.n	80070de <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d012      	beq.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
 80070ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00c      	beq.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fe9d 	bl	8007e06 <UART_EndTransmit_IT>
    return;
 80070cc:	e008      	b.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070ce:	bf00      	nop
 80070d0:	e006      	b.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070d2:	bf00      	nop
 80070d4:	e004      	b.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070d6:	bf00      	nop
 80070d8:	e002      	b.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070da:	bf00      	nop
 80070dc:	e000      	b.n	80070e0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80070e0:	37e8      	adds	r7, #232	; 0xe8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop

080070e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b08a      	sub	sp, #40	; 0x28
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	431a      	orrs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	431a      	orrs	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	4313      	orrs	r3, r2
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4ba5      	ldr	r3, [pc, #660]	; (80073fc <UART_SetConfig+0x2c4>)
 8007168:	4013      	ands	r3, r2
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007170:	430b      	orrs	r3, r1
 8007172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a9a      	ldr	r2, [pc, #616]	; (8007400 <UART_SetConfig+0x2c8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d004      	beq.n	80071a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a0:	4313      	orrs	r3, r2
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b4:	430a      	orrs	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a91      	ldr	r2, [pc, #580]	; (8007404 <UART_SetConfig+0x2cc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d126      	bne.n	8007210 <UART_SetConfig+0xd8>
 80071c2:	4b91      	ldr	r3, [pc, #580]	; (8007408 <UART_SetConfig+0x2d0>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d81b      	bhi.n	8007208 <UART_SetConfig+0xd0>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <UART_SetConfig+0xa0>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007201 	.word	0x08007201
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e0d6      	b.n	800739e <UART_SetConfig+0x266>
 80071f0:	2302      	movs	r3, #2
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f6:	e0d2      	b.n	800739e <UART_SetConfig+0x266>
 80071f8:	2304      	movs	r3, #4
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fe:	e0ce      	b.n	800739e <UART_SetConfig+0x266>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007206:	e0ca      	b.n	800739e <UART_SetConfig+0x266>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720e:	e0c6      	b.n	800739e <UART_SetConfig+0x266>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a7d      	ldr	r2, [pc, #500]	; (800740c <UART_SetConfig+0x2d4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d138      	bne.n	800728c <UART_SetConfig+0x154>
 800721a:	4b7b      	ldr	r3, [pc, #492]	; (8007408 <UART_SetConfig+0x2d0>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007220:	f003 030c 	and.w	r3, r3, #12
 8007224:	2b0c      	cmp	r3, #12
 8007226:	d82d      	bhi.n	8007284 <UART_SetConfig+0x14c>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0xf8>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007265 	.word	0x08007265
 8007234:	08007285 	.word	0x08007285
 8007238:	08007285 	.word	0x08007285
 800723c:	08007285 	.word	0x08007285
 8007240:	08007275 	.word	0x08007275
 8007244:	08007285 	.word	0x08007285
 8007248:	08007285 	.word	0x08007285
 800724c:	08007285 	.word	0x08007285
 8007250:	0800726d 	.word	0x0800726d
 8007254:	08007285 	.word	0x08007285
 8007258:	08007285 	.word	0x08007285
 800725c:	08007285 	.word	0x08007285
 8007260:	0800727d 	.word	0x0800727d
 8007264:	2300      	movs	r3, #0
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726a:	e098      	b.n	800739e <UART_SetConfig+0x266>
 800726c:	2302      	movs	r3, #2
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007272:	e094      	b.n	800739e <UART_SetConfig+0x266>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727a:	e090      	b.n	800739e <UART_SetConfig+0x266>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007282:	e08c      	b.n	800739e <UART_SetConfig+0x266>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800728a:	e088      	b.n	800739e <UART_SetConfig+0x266>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a5f      	ldr	r2, [pc, #380]	; (8007410 <UART_SetConfig+0x2d8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d125      	bne.n	80072e2 <UART_SetConfig+0x1aa>
 8007296:	4b5c      	ldr	r3, [pc, #368]	; (8007408 <UART_SetConfig+0x2d0>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072a0:	2b30      	cmp	r3, #48	; 0x30
 80072a2:	d016      	beq.n	80072d2 <UART_SetConfig+0x19a>
 80072a4:	2b30      	cmp	r3, #48	; 0x30
 80072a6:	d818      	bhi.n	80072da <UART_SetConfig+0x1a2>
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d00a      	beq.n	80072c2 <UART_SetConfig+0x18a>
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d814      	bhi.n	80072da <UART_SetConfig+0x1a2>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <UART_SetConfig+0x182>
 80072b4:	2b10      	cmp	r3, #16
 80072b6:	d008      	beq.n	80072ca <UART_SetConfig+0x192>
 80072b8:	e00f      	b.n	80072da <UART_SetConfig+0x1a2>
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c0:	e06d      	b.n	800739e <UART_SetConfig+0x266>
 80072c2:	2302      	movs	r3, #2
 80072c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c8:	e069      	b.n	800739e <UART_SetConfig+0x266>
 80072ca:	2304      	movs	r3, #4
 80072cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d0:	e065      	b.n	800739e <UART_SetConfig+0x266>
 80072d2:	2308      	movs	r3, #8
 80072d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d8:	e061      	b.n	800739e <UART_SetConfig+0x266>
 80072da:	2310      	movs	r3, #16
 80072dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e0:	e05d      	b.n	800739e <UART_SetConfig+0x266>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a4b      	ldr	r2, [pc, #300]	; (8007414 <UART_SetConfig+0x2dc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d125      	bne.n	8007338 <UART_SetConfig+0x200>
 80072ec:	4b46      	ldr	r3, [pc, #280]	; (8007408 <UART_SetConfig+0x2d0>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072f6:	2bc0      	cmp	r3, #192	; 0xc0
 80072f8:	d016      	beq.n	8007328 <UART_SetConfig+0x1f0>
 80072fa:	2bc0      	cmp	r3, #192	; 0xc0
 80072fc:	d818      	bhi.n	8007330 <UART_SetConfig+0x1f8>
 80072fe:	2b80      	cmp	r3, #128	; 0x80
 8007300:	d00a      	beq.n	8007318 <UART_SetConfig+0x1e0>
 8007302:	2b80      	cmp	r3, #128	; 0x80
 8007304:	d814      	bhi.n	8007330 <UART_SetConfig+0x1f8>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <UART_SetConfig+0x1d8>
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d008      	beq.n	8007320 <UART_SetConfig+0x1e8>
 800730e:	e00f      	b.n	8007330 <UART_SetConfig+0x1f8>
 8007310:	2300      	movs	r3, #0
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007316:	e042      	b.n	800739e <UART_SetConfig+0x266>
 8007318:	2302      	movs	r3, #2
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731e:	e03e      	b.n	800739e <UART_SetConfig+0x266>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007326:	e03a      	b.n	800739e <UART_SetConfig+0x266>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732e:	e036      	b.n	800739e <UART_SetConfig+0x266>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007336:	e032      	b.n	800739e <UART_SetConfig+0x266>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a30      	ldr	r2, [pc, #192]	; (8007400 <UART_SetConfig+0x2c8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d12a      	bne.n	8007398 <UART_SetConfig+0x260>
 8007342:	4b31      	ldr	r3, [pc, #196]	; (8007408 <UART_SetConfig+0x2d0>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800734c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007350:	d01a      	beq.n	8007388 <UART_SetConfig+0x250>
 8007352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007356:	d81b      	bhi.n	8007390 <UART_SetConfig+0x258>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735c:	d00c      	beq.n	8007378 <UART_SetConfig+0x240>
 800735e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007362:	d815      	bhi.n	8007390 <UART_SetConfig+0x258>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <UART_SetConfig+0x238>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d008      	beq.n	8007380 <UART_SetConfig+0x248>
 800736e:	e00f      	b.n	8007390 <UART_SetConfig+0x258>
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007376:	e012      	b.n	800739e <UART_SetConfig+0x266>
 8007378:	2302      	movs	r3, #2
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737e:	e00e      	b.n	800739e <UART_SetConfig+0x266>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007386:	e00a      	b.n	800739e <UART_SetConfig+0x266>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738e:	e006      	b.n	800739e <UART_SetConfig+0x266>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007396:	e002      	b.n	800739e <UART_SetConfig+0x266>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a17      	ldr	r2, [pc, #92]	; (8007400 <UART_SetConfig+0x2c8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	f040 808b 	bne.w	80074c0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d834      	bhi.n	800741c <UART_SetConfig+0x2e4>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <UART_SetConfig+0x280>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	080073eb 	.word	0x080073eb
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	080073f3 	.word	0x080073f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073dc:	f7fe fd70 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80073e0:	61f8      	str	r0, [r7, #28]
        break;
 80073e2:	e021      	b.n	8007428 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e4:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <UART_SetConfig+0x2e0>)
 80073e6:	61fb      	str	r3, [r7, #28]
        break;
 80073e8:	e01e      	b.n	8007428 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ea:	f7fe fcd1 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80073ee:	61f8      	str	r0, [r7, #28]
        break;
 80073f0:	e01a      	b.n	8007428 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073f6:	61fb      	str	r3, [r7, #28]
        break;
 80073f8:	e016      	b.n	8007428 <UART_SetConfig+0x2f0>
 80073fa:	bf00      	nop
 80073fc:	efff69f3 	.word	0xefff69f3
 8007400:	40008000 	.word	0x40008000
 8007404:	40013800 	.word	0x40013800
 8007408:	40021000 	.word	0x40021000
 800740c:	40004400 	.word	0x40004400
 8007410:	40004800 	.word	0x40004800
 8007414:	40004c00 	.word	0x40004c00
 8007418:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007426:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80fa 	beq.w	8007624 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4413      	add	r3, r2
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	429a      	cmp	r2, r3
 800743e:	d305      	bcc.n	800744c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	429a      	cmp	r2, r3
 800744a:	d903      	bls.n	8007454 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007452:	e0e7      	b.n	8007624 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2200      	movs	r2, #0
 8007458:	461c      	mov	r4, r3
 800745a:	4615      	mov	r5, r2
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	022b      	lsls	r3, r5, #8
 8007466:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800746a:	0222      	lsls	r2, r4, #8
 800746c:	68f9      	ldr	r1, [r7, #12]
 800746e:	6849      	ldr	r1, [r1, #4]
 8007470:	0849      	lsrs	r1, r1, #1
 8007472:	2000      	movs	r0, #0
 8007474:	4688      	mov	r8, r1
 8007476:	4681      	mov	r9, r0
 8007478:	eb12 0a08 	adds.w	sl, r2, r8
 800747c:	eb43 0b09 	adc.w	fp, r3, r9
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748e:	4650      	mov	r0, sl
 8007490:	4659      	mov	r1, fp
 8007492:	f7f8 fe9f 	bl	80001d4 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4613      	mov	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a4:	d308      	bcc.n	80074b8 <UART_SetConfig+0x380>
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ac:	d204      	bcs.n	80074b8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	60da      	str	r2, [r3, #12]
 80074b6:	e0b5      	b.n	8007624 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074be:	e0b1      	b.n	8007624 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c8:	d15d      	bne.n	8007586 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80074ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d827      	bhi.n	8007522 <UART_SetConfig+0x3ea>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <UART_SetConfig+0x3a0>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	08007523 	.word	0x08007523
 80074e8:	08007513 	.word	0x08007513
 80074ec:	08007523 	.word	0x08007523
 80074f0:	08007523 	.word	0x08007523
 80074f4:	08007523 	.word	0x08007523
 80074f8:	0800751b 	.word	0x0800751b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fe fce0 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8007500:	61f8      	str	r0, [r7, #28]
        break;
 8007502:	e014      	b.n	800752e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fe fcf2 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 8007508:	61f8      	str	r0, [r7, #28]
        break;
 800750a:	e010      	b.n	800752e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800750c:	4b4c      	ldr	r3, [pc, #304]	; (8007640 <UART_SetConfig+0x508>)
 800750e:	61fb      	str	r3, [r7, #28]
        break;
 8007510:	e00d      	b.n	800752e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007512:	f7fe fc3d 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8007516:	61f8      	str	r0, [r7, #28]
        break;
 8007518:	e009      	b.n	800752e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751e:	61fb      	str	r3, [r7, #28]
        break;
 8007520:	e005      	b.n	800752e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800752c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d077      	beq.n	8007624 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	005a      	lsls	r2, r3, #1
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	085b      	lsrs	r3, r3, #1
 800753e:	441a      	add	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b0f      	cmp	r3, #15
 800754e:	d916      	bls.n	800757e <UART_SetConfig+0x446>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007556:	d212      	bcs.n	800757e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f023 030f 	bic.w	r3, r3, #15
 8007560:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	085b      	lsrs	r3, r3, #1
 8007566:	b29b      	uxth	r3, r3
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	b29a      	uxth	r2, r3
 800756e:	8afb      	ldrh	r3, [r7, #22]
 8007570:	4313      	orrs	r3, r2
 8007572:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	8afa      	ldrh	r2, [r7, #22]
 800757a:	60da      	str	r2, [r3, #12]
 800757c:	e052      	b.n	8007624 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007584:	e04e      	b.n	8007624 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800758a:	2b08      	cmp	r3, #8
 800758c:	d827      	bhi.n	80075de <UART_SetConfig+0x4a6>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <UART_SetConfig+0x45c>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	080075df 	.word	0x080075df
 80075a4:	080075cf 	.word	0x080075cf
 80075a8:	080075df 	.word	0x080075df
 80075ac:	080075df 	.word	0x080075df
 80075b0:	080075df 	.word	0x080075df
 80075b4:	080075d7 	.word	0x080075d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b8:	f7fe fc82 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80075bc:	61f8      	str	r0, [r7, #28]
        break;
 80075be:	e014      	b.n	80075ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c0:	f7fe fc94 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 80075c4:	61f8      	str	r0, [r7, #28]
        break;
 80075c6:	e010      	b.n	80075ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c8:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <UART_SetConfig+0x508>)
 80075ca:	61fb      	str	r3, [r7, #28]
        break;
 80075cc:	e00d      	b.n	80075ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ce:	f7fe fbdf 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80075d2:	61f8      	str	r0, [r7, #28]
        break;
 80075d4:	e009      	b.n	80075ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075da:	61fb      	str	r3, [r7, #28]
        break;
 80075dc:	e005      	b.n	80075ea <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075e8:	bf00      	nop
    }

    if (pclk != 0U)
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d019      	beq.n	8007624 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	085a      	lsrs	r2, r3, #1
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	441a      	add	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007602:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d909      	bls.n	800761e <UART_SetConfig+0x4e6>
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007610:	d205      	bcs.n	800761e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]
 800761c:	e002      	b.n	8007624 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007630:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763e:	bf00      	nop
 8007640:	00f42400 	.word	0x00f42400

08007644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01a      	beq.n	800775a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007742:	d10a      	bne.n	800775a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af02      	add	r7, sp, #8
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007798:	f7fa fafc 	bl	8001d94 <HAL_GetTick>
 800779c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d10e      	bne.n	80077ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f82d 	bl	800781a <UART_WaitOnFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e023      	b.n	8007812 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d10e      	bne.n	80077f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f817 	bl	800781a <UART_WaitOnFlagUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e00d      	b.n	8007812 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b09c      	sub	sp, #112	; 0x70
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800782a:	e0a5      	b.n	8007978 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	f000 80a1 	beq.w	8007978 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007836:	f7fa faad 	bl	8001d94 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <UART_WaitOnFlagUntilTimeout+0x32>
 8007846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007848:	2b00      	cmp	r3, #0
 800784a:	d13e      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800785a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007860:	667b      	str	r3, [r7, #100]	; 0x64
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800786c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e6      	bne.n	800784c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	663b      	str	r3, [r7, #96]	; 0x60
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800789e:	64ba      	str	r2, [r7, #72]	; 0x48
 80078a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e5      	bne.n	800787e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e067      	b.n	800799a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d04f      	beq.n	8007978 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e6:	d147      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
 8007912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e6      	bne.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	613b      	str	r3, [r7, #16]
   return(result);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	66bb      	str	r3, [r7, #104]	; 0x68
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007944:	623a      	str	r2, [r7, #32]
 8007946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	61bb      	str	r3, [r7, #24]
   return(result);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e010      	b.n	800799a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69da      	ldr	r2, [r3, #28]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4013      	ands	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	429a      	cmp	r2, r3
 8007986:	bf0c      	ite	eq
 8007988:	2301      	moveq	r3, #1
 800798a:	2300      	movne	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	429a      	cmp	r2, r3
 8007994:	f43f af4a 	beq.w	800782c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3770      	adds	r7, #112	; 0x70
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b096      	sub	sp, #88	; 0x58
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2222      	movs	r2, #34	; 0x22
 80079cc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02b      	beq.n	8007a2e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	4a42      	ldr	r2, [pc, #264]	; (8007ae4 <UART_Start_Receive_DMA+0x140>)
 80079dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	4a41      	ldr	r2, [pc, #260]	; (8007ae8 <UART_Start_Receive_DMA+0x144>)
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a40      	ldr	r2, [pc, #256]	; (8007aec <UART_Start_Receive_DMA+0x148>)
 80079ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	2200      	movs	r2, #0
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3324      	adds	r3, #36	; 0x24
 8007a00:	4619      	mov	r1, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a06:	461a      	mov	r2, r3
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	f7fa ff0d 	bl	8002828 <HAL_DMA_Start_IT>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00c      	beq.n	8007a2e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2210      	movs	r2, #16
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e055      	b.n	8007ada <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d018      	beq.n	8007a70 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a52:	657b      	str	r3, [r7, #84]	; 0x54
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a5e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	653b      	str	r3, [r7, #80]	; 0x50
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a90:	637a      	str	r2, [r7, #52]	; 0x34
 8007a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ac4:	623a      	str	r2, [r7, #32]
 8007ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	69f9      	ldr	r1, [r7, #28]
 8007aca:	6a3a      	ldr	r2, [r7, #32]
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e5      	bne.n	8007aa4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3758      	adds	r7, #88	; 0x58
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	08007c03 	.word	0x08007c03
 8007ae8:	08007d27 	.word	0x08007d27
 8007aec:	08007d5f 	.word	0x08007d5f

08007af0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b089      	sub	sp, #36	; 0x24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b0c:	61fb      	str	r3, [r7, #28]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6979      	ldr	r1, [r7, #20]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	613b      	str	r3, [r7, #16]
   return(result);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e6      	bne.n	8007af8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007b30:	bf00      	nop
 8007b32:	3724      	adds	r7, #36	; 0x24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b095      	sub	sp, #84	; 0x54
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	643b      	str	r3, [r7, #64]	; 0x40
 8007b64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d118      	bne.n	8007be4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6979      	ldr	r1, [r7, #20]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e6      	bne.n	8007bb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007bf6:	bf00      	nop
 8007bf8:	3754      	adds	r7, #84	; 0x54
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b09c      	sub	sp, #112	; 0x70
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d170      	bne.n	8007d00 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c78:	647a      	str	r2, [r7, #68]	; 0x44
 8007c7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cac:	633a      	str	r2, [r7, #48]	; 0x30
 8007cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d118      	bne.n	8007d00 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	69b9      	ldr	r1, [r7, #24]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d107      	bne.n	8007d18 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d12:	f7f8 fef1 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d16:	e002      	b.n	8007d1e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007d18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d1a:	f7ff f9ef 	bl	80070fc <HAL_UART_RxCpltCallback>
}
 8007d1e:	bf00      	nop
 8007d20:	3770      	adds	r7, #112	; 0x70
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d109      	bne.n	8007d50 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7f8 fed5 	bl	8000af8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d4e:	e002      	b.n	8007d56 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff f9dd 	bl	8007110 <HAL_UART_RxHalfCpltCallback>
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b80      	cmp	r3, #128	; 0x80
 8007d84:	d109      	bne.n	8007d9a <UART_DMAError+0x3c>
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b21      	cmp	r3, #33	; 0x21
 8007d8a:	d106      	bne.n	8007d9a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f7ff feab 	bl	8007af0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d109      	bne.n	8007dbc <UART_DMAError+0x5e>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b22      	cmp	r3, #34	; 0x22
 8007dac:	d106      	bne.n	8007dbc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007db6:	6978      	ldr	r0, [r7, #20]
 8007db8:	f7ff fec0 	bl	8007b3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc2:	f043 0210 	orr.w	r2, r3, #16
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	f7ff f9a9 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff f993 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b088      	sub	sp, #32
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e6      	bne.n	8007e0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff f94b 	bl	80070e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e52:	bf00      	nop
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b08c      	sub	sp, #48	; 0x30
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d14a      	bne.n	8007f1a <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e043      	b.n	8007f1c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e03c      	b.n	8007f1c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fd74 	bl	80079a4 <UART_Start_Receive_DMA>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d124      	bne.n	8007f14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d11d      	bne.n	8007f0e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f043 0310 	orr.w	r3, r3, #16
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8007efa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	6a39      	ldr	r1, [r7, #32]
 8007efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e6      	bne.n	8007eda <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8007f0c:	e002      	b.n	8007f14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f18:	e000      	b.n	8007f1c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3730      	adds	r7, #48	; 0x30
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f24:	b084      	sub	sp, #16
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	f107 0014 	add.w	r0, r7, #20
 8007f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	b004      	add	sp, #16
 8007f44:	4770      	bx	lr

08007f46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f56:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007f5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f7c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007f80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	4013      	ands	r3, r2
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	f107 0014 	add.w	r0, r7, #20
 8007fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	b004      	add	sp, #16
 8008004:	4770      	bx	lr
	...

08008008 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008008:	b480      	push	{r7}
 800800a:	b09d      	sub	sp, #116	; 0x74
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	78db      	ldrb	r3, [r3, #3]
 8008036:	2b03      	cmp	r3, #3
 8008038:	d81f      	bhi.n	800807a <USB_ActivateEndpoint+0x72>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USB_ActivateEndpoint+0x38>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008051 	.word	0x08008051
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008083 	.word	0x08008083
 800804c:	0800805f 	.word	0x0800805f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008050:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008058:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800805c:	e012      	b.n	8008084 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800805e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008062:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008066:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800806a:	e00b      	b.n	8008084 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800806c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008074:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008078:	e004      	b.n	8008084 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008080:	e000      	b.n	8008084 <USB_ActivateEndpoint+0x7c>
      break;
 8008082:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	441a      	add	r2, r3
 800808e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080be:	b21a      	sxth	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	b21b      	sxth	r3, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	b21b      	sxth	r3, r3
 80080ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	441a      	add	r2, r3
 80080d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	7b1b      	ldrb	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8149 	bne.w	800838c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8084 	beq.w	800820c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	61bb      	str	r3, [r7, #24]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	4413      	add	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	00da      	lsls	r2, r3, #3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	88db      	ldrh	r3, [r3, #6]
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	b29b      	uxth	r3, r3
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	827b      	strh	r3, [r7, #18]
 8008146:	8a7b      	ldrh	r3, [r7, #18]
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01b      	beq.n	8008188 <USB_ActivateEndpoint+0x180>
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008166:	823b      	strh	r3, [r7, #16]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	441a      	add	r2, r3
 8008172:	8a3b      	ldrh	r3, [r7, #16]
 8008174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008184:	b29b      	uxth	r3, r3
 8008186:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d020      	beq.n	80081d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a6:	81bb      	strh	r3, [r7, #12]
 80081a8:	89bb      	ldrh	r3, [r7, #12]
 80081aa:	f083 0320 	eor.w	r3, r3, #32
 80081ae:	81bb      	strh	r3, [r7, #12]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	441a      	add	r2, r3
 80081ba:	89bb      	ldrh	r3, [r7, #12]
 80081bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	8013      	strh	r3, [r2, #0]
 80081d0:	e2a6      	b.n	8008720 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e8:	81fb      	strh	r3, [r7, #14]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	441a      	add	r2, r3
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008206:	b29b      	uxth	r3, r3
 8008208:	8013      	strh	r3, [r2, #0]
 800820a:	e289      	b.n	8008720 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	633b      	str	r3, [r7, #48]	; 0x30
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008216:	b29b      	uxth	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	4413      	add	r3, r2
 800821e:	633b      	str	r3, [r7, #48]	; 0x30
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	00da      	lsls	r2, r3, #3
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	4413      	add	r3, r2
 800822a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	b29b      	uxth	r3, r3
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824a:	b29b      	uxth	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	4413      	add	r3, r2
 8008252:	62bb      	str	r3, [r7, #40]	; 0x28
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	00da      	lsls	r2, r3, #3
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	4413      	add	r3, r2
 800825e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b3e      	cmp	r3, #62	; 0x3e
 800826a:	d918      	bls.n	800829e <USB_ActivateEndpoint+0x296>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	66bb      	str	r3, [r7, #104]	; 0x68
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 031f 	and.w	r3, r3, #31
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <USB_ActivateEndpoint+0x27e>
 8008280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008282:	3b01      	subs	r3, #1
 8008284:	66bb      	str	r3, [r7, #104]	; 0x68
 8008286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008288:	b29b      	uxth	r3, r3
 800828a:	029b      	lsls	r3, r3, #10
 800828c:	b29b      	uxth	r3, r3
 800828e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008296:	b29a      	uxth	r2, r3
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e029      	b.n	80082f2 <USB_ActivateEndpoint+0x2ea>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d112      	bne.n	80082cc <USB_ActivateEndpoint+0x2c4>
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e012      	b.n	80082f2 <USB_ActivateEndpoint+0x2ea>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	085b      	lsrs	r3, r3, #1
 80082d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <USB_ActivateEndpoint+0x2de>
 80082e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082e2:	3301      	adds	r3, #1
 80082e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	029b      	lsls	r3, r3, #10
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8008300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01b      	beq.n	8008342 <USB_ActivateEndpoint+0x33a>
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008320:	843b      	strh	r3, [r7, #32]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	8c3b      	ldrh	r3, [r7, #32]
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800833a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	83fb      	strh	r3, [r7, #30]
 800835a:	8bfb      	ldrh	r3, [r7, #30]
 800835c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008360:	83fb      	strh	r3, [r7, #30]
 8008362:	8bfb      	ldrh	r3, [r7, #30]
 8008364:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008368:	83fb      	strh	r3, [r7, #30]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	441a      	add	r2, r3
 8008374:	8bfb      	ldrh	r3, [r7, #30]
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
 800838a:	e1c9      	b.n	8008720 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	78db      	ldrb	r3, [r3, #3]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d11e      	bne.n	80083d2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	441a      	add	r2, r3
 80083b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80083bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	8013      	strh	r3, [r2, #0]
 80083d0:	e01d      	b.n	800840e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80083e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80083fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840a:	b29b      	uxth	r3, r3
 800840c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800841e:	4413      	add	r3, r2
 8008420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800842a:	4413      	add	r3, r2
 800842c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008430:	65bb      	str	r3, [r7, #88]	; 0x58
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	891b      	ldrh	r3, [r3, #8]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	b29b      	uxth	r3, r3
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008440:	801a      	strh	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	657b      	str	r3, [r7, #84]	; 0x54
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844c:	b29b      	uxth	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008452:	4413      	add	r3, r2
 8008454:	657b      	str	r3, [r7, #84]	; 0x54
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	00da      	lsls	r2, r3, #3
 800845c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800845e:	4413      	add	r3, r2
 8008460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008464:	653b      	str	r3, [r7, #80]	; 0x50
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	895b      	ldrh	r3, [r3, #10]
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	b29b      	uxth	r3, r3
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	b29a      	uxth	r2, r3
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 8093 	bne.w	80085a6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01b      	beq.n	80084d4 <USB_ActivateEndpoint+0x4cc>
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80084e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01b      	beq.n	8008524 <USB_ActivateEndpoint+0x51c>
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008502:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	441a      	add	r2, r3
 800850e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008520:	b29b      	uxth	r3, r3
 8008522:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	873b      	strh	r3, [r7, #56]	; 0x38
 800853c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800853e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008542:	873b      	strh	r3, [r7, #56]	; 0x38
 8008544:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008546:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800854a:	873b      	strh	r3, [r7, #56]	; 0x38
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008568:	b29b      	uxth	r3, r3
 800856a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008582:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	8013      	strh	r3, [r2, #0]
 80085a4:	e0bc      	b.n	8008720 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80085b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01d      	beq.n	80085fe <USB_ActivateEndpoint+0x5f6>
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80085ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800860e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01d      	beq.n	8008656 <USB_ActivateEndpoint+0x64e>
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008630:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	441a      	add	r2, r3
 800863e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	78db      	ldrb	r3, [r3, #3]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d024      	beq.n	80086a8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008674:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800867c:	f083 0320 	eor.w	r3, r3, #32
 8008680:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	8013      	strh	r3, [r2, #0]
 80086a6:	e01d      	b.n	80086e4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	441a      	add	r2, r3
 80086cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	441a      	add	r2, r3
 8008708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800870c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871c:	b29b      	uxth	r3, r3
 800871e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008720:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008724:	4618      	mov	r0, r3
 8008726:	3774      	adds	r7, #116	; 0x74
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008730:	b480      	push	{r7}
 8008732:	b08d      	sub	sp, #52	; 0x34
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	7b1b      	ldrb	r3, [r3, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 808e 	bne.w	8008860 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d044      	beq.n	80087d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	81bb      	strh	r3, [r7, #12]
 800875a:	89bb      	ldrh	r3, [r7, #12]
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01b      	beq.n	800879c <USB_DeactivateEndpoint+0x6c>
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877a:	817b      	strh	r3, [r7, #10]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	441a      	add	r2, r3
 8008786:	897b      	ldrh	r3, [r7, #10]
 8008788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800878c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008798:	b29b      	uxth	r3, r3
 800879a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b2:	813b      	strh	r3, [r7, #8]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	441a      	add	r2, r3
 80087be:	893b      	ldrh	r3, [r7, #8]
 80087c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	8013      	strh	r3, [r2, #0]
 80087d4:	e192      	b.n	8008afc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	827b      	strh	r3, [r7, #18]
 80087e4:	8a7b      	ldrh	r3, [r7, #18]
 80087e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <USB_DeactivateEndpoint+0xf6>
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008804:	823b      	strh	r3, [r7, #16]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	8a3b      	ldrh	r3, [r7, #16]
 8008812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800881e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008822:	b29b      	uxth	r3, r3
 8008824:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883c:	81fb      	strh	r3, [r7, #14]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	441a      	add	r2, r3
 8008848:	89fb      	ldrh	r3, [r7, #14]
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]
 800885e:	e14d      	b.n	8008afc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 80a5 	bne.w	80089b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	843b      	strh	r3, [r7, #32]
 8008878:	8c3b      	ldrh	r3, [r7, #32]
 800887a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01b      	beq.n	80088ba <USB_DeactivateEndpoint+0x18a>
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008898:	83fb      	strh	r3, [r7, #30]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	441a      	add	r2, r3
 80088a4:	8bfb      	ldrh	r3, [r7, #30]
 80088a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	83bb      	strh	r3, [r7, #28]
 80088c8:	8bbb      	ldrh	r3, [r7, #28]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01b      	beq.n	800890a <USB_DeactivateEndpoint+0x1da>
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e8:	837b      	strh	r3, [r7, #26]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	441a      	add	r2, r3
 80088f4:	8b7b      	ldrh	r3, [r7, #26]
 80088f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008906:	b29b      	uxth	r3, r3
 8008908:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008920:	833b      	strh	r3, [r7, #24]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	8b3b      	ldrh	r3, [r7, #24]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800893a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008958:	82fb      	strh	r3, [r7, #22]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	441a      	add	r2, r3
 8008964:	8afb      	ldrh	r3, [r7, #22]
 8008966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800896a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	b29b      	uxth	r3, r3
 8008978:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	b29b      	uxth	r3, r3
 8008988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800898c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008990:	82bb      	strh	r3, [r7, #20]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	441a      	add	r2, r3
 800899c:	8abb      	ldrh	r3, [r7, #20]
 800899e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	8013      	strh	r3, [r2, #0]
 80089b2:	e0a3      	b.n	8008afc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01b      	beq.n	8008a04 <USB_DeactivateEndpoint+0x2d4>
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	441a      	add	r2, r3
 80089ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80089f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <USB_DeactivateEndpoint+0x324>
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a32:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	441a      	add	r2, r3
 8008a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	847b      	strh	r3, [r7, #34]	; 0x22
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	441a      	add	r2, r3
 8008ae6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3734      	adds	r7, #52	; 0x34
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b0c2      	sub	sp, #264	; 0x108
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b18:	6018      	str	r0, [r3, #0]
 8008b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b22:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	f040 867b 	bne.w	800982c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d908      	bls.n	8008b64 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b62:	e007      	b.n	8008b74 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	7b1b      	ldrb	r3, [r3, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d13a      	bne.n	8008bfa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6959      	ldr	r1, [r3, #20]
 8008b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	88da      	ldrh	r2, [r3, #6]
 8008b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ba6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008baa:	6800      	ldr	r0, [r0, #0]
 8008bac:	f001 fc55 	bl	800a45a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
 8008bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	00da      	lsls	r2, r3, #3
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	4413      	add	r3, r2
 8008be6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	f000 bde3 	b.w	80097c0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	f040 843a 	bne.w	8009480 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	f240 83b7 	bls.w	8009398 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	441a      	add	r2, r3
 8008c6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6a1a      	ldr	r2, [r3, #32]
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 81b3 	beq.w	8009032 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d16d      	bne.n	8008dc4 <USB_EPStartXfer+0x2ba>
 8008ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	4413      	add	r3, r2
 8008d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	00da      	lsls	r2, r3, #3
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d28:	2b3e      	cmp	r3, #62	; 0x3e
 8008d2a:	d91c      	bls.n	8008d66 <USB_EPStartXfer+0x25c>
 8008d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3a:	f003 031f 	and.w	r3, r3, #31
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d104      	bne.n	8008d4c <USB_EPStartXfer+0x242>
 8008d42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d46:	3b01      	subs	r3, #1
 8008d48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	029b      	lsls	r3, r3, #10
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	801a      	strh	r2, [r3, #0]
 8008d64:	e053      	b.n	8008e0e <USB_EPStartXfer+0x304>
 8008d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d112      	bne.n	8008d94 <USB_EPStartXfer+0x28a>
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	801a      	strh	r2, [r3, #0]
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	801a      	strh	r2, [r3, #0]
 8008d92:	e03c      	b.n	8008e0e <USB_EPStartXfer+0x304>
 8008d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <USB_EPStartXfer+0x2aa>
 8008daa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dae:	3301      	adds	r3, #1
 8008db0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008db4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	029b      	lsls	r3, r3, #10
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	e024      	b.n	8008e0e <USB_EPStartXfer+0x304>
 8008dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	785b      	ldrb	r3, [r3, #1]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d11c      	bne.n	8008e0e <USB_EPStartXfer+0x304>
 8008dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	4413      	add	r3, r2
 8008dea:	633b      	str	r3, [r7, #48]	; 0x30
 8008dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	00da      	lsls	r2, r3, #3
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	895b      	ldrh	r3, [r3, #10]
 8008e1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6959      	ldr	r1, [r3, #20]
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f001 fb0c 	bl	800a45a <USB_WritePMA>
            ep->xfer_buff += len;
 8008e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695a      	ldr	r2, [r3, #20]
 8008e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e52:	441a      	add	r2, r3
 8008e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6a1a      	ldr	r2, [r3, #32]
 8008e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d90f      	bls.n	8008e9c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8c:	1ad2      	subs	r2, r2, r3
 8008e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	621a      	str	r2, [r3, #32]
 8008e9a:	e00e      	b.n	8008eba <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d16d      	bne.n	8008fa6 <USB_EPStartXfer+0x49c>
 8008eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	61bb      	str	r3, [r7, #24]
 8008ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	4413      	add	r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	00da      	lsls	r2, r3, #3
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	4413      	add	r3, r2
 8008f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f0c:	d91c      	bls.n	8008f48 <USB_EPStartXfer+0x43e>
 8008f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	f003 031f 	and.w	r3, r3, #31
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <USB_EPStartXfer+0x424>
 8008f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	029b      	lsls	r3, r3, #10
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	801a      	strh	r2, [r3, #0]
 8008f46:	e059      	b.n	8008ffc <USB_EPStartXfer+0x4f2>
 8008f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d112      	bne.n	8008f76 <USB_EPStartXfer+0x46c>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	801a      	strh	r2, [r3, #0]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	e042      	b.n	8008ffc <USB_EPStartXfer+0x4f2>
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7a:	085b      	lsrs	r3, r3, #1
 8008f7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <USB_EPStartXfer+0x48c>
 8008f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f90:	3301      	adds	r3, #1
 8008f92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	029b      	lsls	r3, r3, #10
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	e02a      	b.n	8008ffc <USB_EPStartXfer+0x4f2>
 8008fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d122      	bne.n	8008ffc <USB_EPStartXfer+0x4f2>
 8008fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	623b      	str	r3, [r7, #32]
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	623b      	str	r3, [r7, #32]
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	00da      	lsls	r2, r3, #3
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
 8008fea:	4413      	add	r3, r2
 8008fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	891b      	ldrh	r3, [r3, #8]
 8009008:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800900c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6959      	ldr	r1, [r3, #20]
 8009018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901c:	b29b      	uxth	r3, r3
 800901e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009022:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009026:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	f001 fa15 	bl	800a45a <USB_WritePMA>
 8009030:	e3c6      	b.n	80097c0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d16d      	bne.n	800911e <USB_EPStartXfer+0x614>
 8009042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	64bb      	str	r3, [r7, #72]	; 0x48
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800905c:	b29b      	uxth	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009062:	4413      	add	r3, r2
 8009064:	64bb      	str	r3, [r7, #72]	; 0x48
 8009066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	00da      	lsls	r2, r3, #3
 8009074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009076:	4413      	add	r3, r2
 8009078:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800907c:	647b      	str	r3, [r7, #68]	; 0x44
 800907e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009082:	2b3e      	cmp	r3, #62	; 0x3e
 8009084:	d91c      	bls.n	80090c0 <USB_EPStartXfer+0x5b6>
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908a:	095b      	lsrs	r3, r3, #5
 800908c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009094:	f003 031f 	and.w	r3, r3, #31
 8009098:	2b00      	cmp	r3, #0
 800909a:	d104      	bne.n	80090a6 <USB_EPStartXfer+0x59c>
 800909c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090a0:	3b01      	subs	r3, #1
 80090a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	029b      	lsls	r3, r3, #10
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090bc:	801a      	strh	r2, [r3, #0]
 80090be:	e059      	b.n	8009174 <USB_EPStartXfer+0x66a>
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d112      	bne.n	80090ee <USB_EPStartXfer+0x5e4>
 80090c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e042      	b.n	8009174 <USB_EPStartXfer+0x66a>
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <USB_EPStartXfer+0x604>
 8009104:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009108:	3301      	adds	r3, #1
 800910a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800910e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009112:	b29b      	uxth	r3, r3
 8009114:	029b      	lsls	r3, r3, #10
 8009116:	b29a      	uxth	r2, r3
 8009118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e02a      	b.n	8009174 <USB_EPStartXfer+0x66a>
 800911e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d122      	bne.n	8009174 <USB_EPStartXfer+0x66a>
 800912e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	653b      	str	r3, [r7, #80]	; 0x50
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009148:	b29b      	uxth	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914e:	4413      	add	r3, r2
 8009150:	653b      	str	r3, [r7, #80]	; 0x50
 8009152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	00da      	lsls	r2, r3, #3
 8009160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009162:	4413      	add	r3, r2
 8009164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800916a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916e:	b29a      	uxth	r2, r3
 8009170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	891b      	ldrh	r3, [r3, #8]
 8009180:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6959      	ldr	r1, [r3, #20]
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009194:	b29b      	uxth	r3, r3
 8009196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800919a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800919e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80091a2:	6800      	ldr	r0, [r0, #0]
 80091a4:	f001 f959 	bl	800a45a <USB_WritePMA>
            ep->xfer_buff += len;
 80091a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b8:	441a      	add	r2, r3
 80091ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6a1a      	ldr	r2, [r3, #32]
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d90f      	bls.n	8009202 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6a1a      	ldr	r2, [r3, #32]
 80091ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	621a      	str	r2, [r3, #32]
 8009200:	e00e      	b.n	8009220 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2200      	movs	r2, #0
 800921e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	643b      	str	r3, [r7, #64]	; 0x40
 800922c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d16d      	bne.n	8009318 <USB_EPStartXfer+0x80e>
 800923c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	63bb      	str	r3, [r7, #56]	; 0x38
 8009248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009256:	b29b      	uxth	r3, r3
 8009258:	461a      	mov	r2, r3
 800925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925c:	4413      	add	r3, r2
 800925e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	00da      	lsls	r2, r3, #3
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	4413      	add	r3, r2
 8009272:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009276:	637b      	str	r3, [r7, #52]	; 0x34
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	2b3e      	cmp	r3, #62	; 0x3e
 800927e:	d91c      	bls.n	80092ba <USB_EPStartXfer+0x7b0>
 8009280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009284:	095b      	lsrs	r3, r3, #5
 8009286:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928e:	f003 031f 	and.w	r3, r3, #31
 8009292:	2b00      	cmp	r3, #0
 8009294:	d104      	bne.n	80092a0 <USB_EPStartXfer+0x796>
 8009296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929a:	3b01      	subs	r3, #1
 800929c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	029b      	lsls	r3, r3, #10
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	e053      	b.n	8009362 <USB_EPStartXfer+0x858>
 80092ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d112      	bne.n	80092e8 <USB_EPStartXfer+0x7de>
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d0:	801a      	strh	r2, [r3, #0]
 80092d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e03c      	b.n	8009362 <USB_EPStartXfer+0x858>
 80092e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ec:	085b      	lsrs	r3, r3, #1
 80092ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d004      	beq.n	8009308 <USB_EPStartXfer+0x7fe>
 80092fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009302:	3301      	adds	r3, #1
 8009304:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	b29b      	uxth	r3, r3
 800930e:	029b      	lsls	r3, r3, #10
 8009310:	b29a      	uxth	r2, r3
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	e024      	b.n	8009362 <USB_EPStartXfer+0x858>
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d11c      	bne.n	8009362 <USB_EPStartXfer+0x858>
 8009328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800933c:	4413      	add	r3, r2
 800933e:	643b      	str	r3, [r7, #64]	; 0x40
 8009340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	00da      	lsls	r2, r3, #3
 800934e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009350:	4413      	add	r3, r2
 8009352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935c:	b29a      	uxth	r2, r3
 800935e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	895b      	ldrh	r3, [r3, #10]
 800936e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6959      	ldr	r1, [r3, #20]
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009382:	b29b      	uxth	r3, r3
 8009384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009388:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800938c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009390:	6800      	ldr	r0, [r0, #0]
 8009392:	f001 f862 	bl	800a45a <USB_WritePMA>
 8009396:	e213      	b.n	80097c0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80093a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80093ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80093d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	441a      	add	r2, r3
 80093ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80093f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009400:	b29b      	uxth	r3, r3
 8009402:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800941e:	b29b      	uxth	r3, r3
 8009420:	461a      	mov	r2, r3
 8009422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009424:	4413      	add	r3, r2
 8009426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	00da      	lsls	r2, r3, #3
 8009436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009438:	4413      	add	r3, r2
 800943a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800943e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009444:	b29a      	uxth	r2, r3
 8009446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009448:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800944a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	891b      	ldrh	r3, [r3, #8]
 8009456:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800945a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6959      	ldr	r1, [r3, #20]
 8009466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800946a:	b29b      	uxth	r3, r3
 800946c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009470:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009474:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009478:	6800      	ldr	r0, [r0, #0]
 800947a:	f000 ffee 	bl	800a45a <USB_WritePMA>
 800947e:	e19f      	b.n	80097c0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6a1a      	ldr	r2, [r3, #32]
 800948c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009490:	1ad2      	subs	r2, r2, r3
 8009492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80bc 	beq.w	800963e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	673b      	str	r3, [r7, #112]	; 0x70
 80094d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d16d      	bne.n	80095be <USB_EPStartXfer+0xab4>
 80094e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80094ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009502:	4413      	add	r3, r2
 8009504:	66bb      	str	r3, [r7, #104]	; 0x68
 8009506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	00da      	lsls	r2, r3, #3
 8009514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009516:	4413      	add	r3, r2
 8009518:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800951c:	667b      	str	r3, [r7, #100]	; 0x64
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009522:	2b3e      	cmp	r3, #62	; 0x3e
 8009524:	d91c      	bls.n	8009560 <USB_EPStartXfer+0xa56>
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <USB_EPStartXfer+0xa3c>
 800953c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009540:	3b01      	subs	r3, #1
 8009542:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009546:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800954a:	b29b      	uxth	r3, r3
 800954c:	029b      	lsls	r3, r3, #10
 800954e:	b29b      	uxth	r3, r3
 8009550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009558:	b29a      	uxth	r2, r3
 800955a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955c:	801a      	strh	r2, [r3, #0]
 800955e:	e053      	b.n	8009608 <USB_EPStartXfer+0xafe>
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009564:	2b00      	cmp	r3, #0
 8009566:	d112      	bne.n	800958e <USB_EPStartXfer+0xa84>
 8009568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009572:	b29a      	uxth	r2, r3
 8009574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009576:	801a      	strh	r2, [r3, #0]
 8009578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009586:	b29a      	uxth	r2, r3
 8009588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800958a:	801a      	strh	r2, [r3, #0]
 800958c:	e03c      	b.n	8009608 <USB_EPStartXfer+0xafe>
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009592:	085b      	lsrs	r3, r3, #1
 8009594:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <USB_EPStartXfer+0xaa4>
 80095a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095a8:	3301      	adds	r3, #1
 80095aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	029b      	lsls	r3, r3, #10
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	e024      	b.n	8009608 <USB_EPStartXfer+0xafe>
 80095be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d11c      	bne.n	8009608 <USB_EPStartXfer+0xafe>
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095dc:	b29b      	uxth	r3, r3
 80095de:	461a      	mov	r2, r3
 80095e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e2:	4413      	add	r3, r2
 80095e4:	673b      	str	r3, [r7, #112]	; 0x70
 80095e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	00da      	lsls	r2, r3, #3
 80095f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095f6:	4413      	add	r3, r2
 80095f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009602:	b29a      	uxth	r2, r3
 8009604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009606:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	895b      	ldrh	r3, [r3, #10]
 8009614:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6959      	ldr	r1, [r3, #20]
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009628:	b29b      	uxth	r3, r3
 800962a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800962e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009632:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	f000 ff0f 	bl	800a45a <USB_WritePMA>
 800963c:	e0c0      	b.n	80097c0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800963e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d16d      	bne.n	800972a <USB_EPStartXfer+0xc20>
 800964e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	67fb      	str	r3, [r7, #124]	; 0x7c
 800965a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009668:	b29b      	uxth	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800966e:	4413      	add	r3, r2
 8009670:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	00da      	lsls	r2, r3, #3
 8009680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009682:	4413      	add	r3, r2
 8009684:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009688:	67bb      	str	r3, [r7, #120]	; 0x78
 800968a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968e:	2b3e      	cmp	r3, #62	; 0x3e
 8009690:	d91c      	bls.n	80096cc <USB_EPStartXfer+0xbc2>
 8009692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009696:	095b      	lsrs	r3, r3, #5
 8009698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <USB_EPStartXfer+0xba8>
 80096a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096ac:	3b01      	subs	r3, #1
 80096ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	029b      	lsls	r3, r3, #10
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	e05f      	b.n	800978c <USB_EPStartXfer+0xc82>
 80096cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d112      	bne.n	80096fa <USB_EPStartXfer+0xbf0>
 80096d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096de:	b29a      	uxth	r2, r3
 80096e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e048      	b.n	800978c <USB_EPStartXfer+0xc82>
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <USB_EPStartXfer+0xc10>
 8009710:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009714:	3301      	adds	r3, #1
 8009716:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800971a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800971e:	b29b      	uxth	r3, r3
 8009720:	029b      	lsls	r3, r3, #10
 8009722:	b29a      	uxth	r2, r3
 8009724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	e030      	b.n	800978c <USB_EPStartXfer+0xc82>
 800972a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d128      	bne.n	800978c <USB_EPStartXfer+0xc82>
 800973a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009756:	b29b      	uxth	r3, r3
 8009758:	461a      	mov	r2, r3
 800975a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800975e:	4413      	add	r3, r2
 8009760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009776:	4413      	add	r3, r2
 8009778:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800977c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009784:	b29a      	uxth	r2, r3
 8009786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800978a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800978c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	891b      	ldrh	r3, [r3, #8]
 8009798:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800979c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6959      	ldr	r1, [r3, #20]
 80097a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80097b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	f000 fe4d 	bl	800a45a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80097c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097e6:	817b      	strh	r3, [r7, #10]
 80097e8:	897b      	ldrh	r3, [r7, #10]
 80097ea:	f083 0310 	eor.w	r3, r3, #16
 80097ee:	817b      	strh	r3, [r7, #10]
 80097f0:	897b      	ldrh	r3, [r7, #10]
 80097f2:	f083 0320 	eor.w	r3, r3, #32
 80097f6:	817b      	strh	r3, [r7, #10]
 80097f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	441a      	add	r2, r3
 8009812:	897b      	ldrh	r3, [r7, #10]
 8009814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009824:	b29b      	uxth	r3, r3
 8009826:	8013      	strh	r3, [r2, #0]
 8009828:	f000 bc9f 	b.w	800a16a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800982c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	7b1b      	ldrb	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 80ae 	bne.w	800999a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800983e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d917      	bls.n	800988a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800985a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800986a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699a      	ldr	r2, [r3, #24]
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	619a      	str	r2, [r3, #24]
 8009888:	e00e      	b.n	80098a8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800988a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80098a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098cc:	4413      	add	r3, r2
 80098ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	00da      	lsls	r2, r3, #3
 80098e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098e4:	4413      	add	r3, r2
 80098e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f2:	2b3e      	cmp	r3, #62	; 0x3e
 80098f4:	d91d      	bls.n	8009932 <USB_EPStartXfer+0xe28>
 80098f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fa:	095b      	lsrs	r3, r3, #5
 80098fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009904:	f003 031f 	and.w	r3, r3, #31
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <USB_EPStartXfer+0xe0c>
 800990c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009910:	3b01      	subs	r3, #1
 8009912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800991a:	b29b      	uxth	r3, r3
 800991c:	029b      	lsls	r3, r3, #10
 800991e:	b29b      	uxth	r3, r3
 8009920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009928:	b29a      	uxth	r2, r3
 800992a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e3e1      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009936:	2b00      	cmp	r3, #0
 8009938:	d116      	bne.n	8009968 <USB_EPStartXfer+0xe5e>
 800993a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009946:	b29a      	uxth	r2, r3
 8009948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994c:	801a      	strh	r2, [r3, #0]
 800994e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b29b      	uxth	r3, r3
 8009956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800995a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800995e:	b29a      	uxth	r2, r3
 8009960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009964:	801a      	strh	r2, [r3, #0]
 8009966:	e3c6      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800996c:	085b      	lsrs	r3, r3, #1
 800996e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <USB_EPStartXfer+0xe7e>
 800997e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009982:	3301      	adds	r3, #1
 8009984:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800998c:	b29b      	uxth	r3, r3
 800998e:	029b      	lsls	r3, r3, #10
 8009990:	b29a      	uxth	r2, r3
 8009992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	e3ad      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800999a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	78db      	ldrb	r3, [r3, #3]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	f040 8200 	bne.w	8009dac <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80099ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	785b      	ldrb	r3, [r3, #1]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f040 8091 	bne.w	8009ae0 <USB_EPStartXfer+0xfd6>
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099da:	b29b      	uxth	r3, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099e2:	4413      	add	r3, r2
 80099e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	00da      	lsls	r2, r3, #3
 80099f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099fa:	4413      	add	r3, r2
 80099fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	2b3e      	cmp	r3, #62	; 0x3e
 8009a12:	d925      	bls.n	8009a60 <USB_EPStartXfer+0xf56>
 8009a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d104      	bne.n	8009a44 <USB_EPStartXfer+0xf3a>
 8009a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	029b      	lsls	r3, r3, #10
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a5c:	801a      	strh	r2, [r3, #0]
 8009a5e:	e074      	b.n	8009b4a <USB_EPStartXfer+0x1040>
 8009a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d116      	bne.n	8009a9e <USB_EPStartXfer+0xf94>
 8009a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a9a:	801a      	strh	r2, [r3, #0]
 8009a9c:	e055      	b.n	8009b4a <USB_EPStartXfer+0x1040>
 8009a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <USB_EPStartXfer+0xfc4>
 8009ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	029b      	lsls	r3, r3, #10
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	e034      	b.n	8009b4a <USB_EPStartXfer+0x1040>
 8009ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d12c      	bne.n	8009b4a <USB_EPStartXfer+0x1040>
 8009af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b14:	4413      	add	r3, r2
 8009b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	00da      	lsls	r2, r3, #3
 8009b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f040 8091 	bne.w	8009c8c <USB_EPStartXfer+0x1182>
 8009b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b8e:	4413      	add	r3, r2
 8009b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	00da      	lsls	r2, r3, #3
 8009ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8009bbe:	d925      	bls.n	8009c0c <USB_EPStartXfer+0x1102>
 8009bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	f003 031f 	and.w	r3, r3, #31
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d104      	bne.n	8009bf0 <USB_EPStartXfer+0x10e6>
 8009be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bea:	3b01      	subs	r3, #1
 8009bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	029b      	lsls	r3, r3, #10
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	e06d      	b.n	8009ce8 <USB_EPStartXfer+0x11de>
 8009c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d116      	bne.n	8009c4a <USB_EPStartXfer+0x1140>
 8009c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c46:	801a      	strh	r2, [r3, #0]
 8009c48:	e04e      	b.n	8009ce8 <USB_EPStartXfer+0x11de>
 8009c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	085b      	lsrs	r3, r3, #1
 8009c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d004      	beq.n	8009c7a <USB_EPStartXfer+0x1170>
 8009c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c74:	3301      	adds	r3, #1
 8009c76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	029b      	lsls	r3, r3, #10
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	e02d      	b.n	8009ce8 <USB_EPStartXfer+0x11de>
 8009c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	785b      	ldrb	r3, [r3, #1]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d125      	bne.n	8009ce8 <USB_EPStartXfer+0x11de>
 8009c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	461a      	mov	r2, r3
 8009cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	00da      	lsls	r2, r3, #3
 8009cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cca:	4413      	add	r3, r2
 8009ccc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ce6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 81fe 	beq.w	800a0f6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d005      	beq.n	8009d32 <USB_EPStartXfer+0x1228>
 8009d26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10d      	bne.n	8009d4e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f040 81db 	bne.w	800a0f6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f040 81d4 	bne.w	800a0f6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d74:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	441a      	add	r2, r3
 8009d92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	8013      	strh	r3, [r2, #0]
 8009daa:	e1a4      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 819a 	bne.w	800a0f2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d917      	bls.n	8009e0a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfa:	1ad2      	subs	r2, r2, r3
 8009dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	619a      	str	r2, [r3, #24]
 8009e08:	e00e      	b.n	8009e28 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2200      	movs	r2, #0
 8009e26:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d178      	bne.n	8009f2a <USB_EPStartXfer+0x1420>
 8009e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	00da      	lsls	r2, r3, #3
 8009e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e74:	4413      	add	r3, r2
 8009e76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e82:	2b3e      	cmp	r3, #62	; 0x3e
 8009e84:	d91d      	bls.n	8009ec2 <USB_EPStartXfer+0x13b8>
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e94:	f003 031f 	and.w	r3, r3, #31
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <USB_EPStartXfer+0x139c>
 8009e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	e064      	b.n	8009f8c <USB_EPStartXfer+0x1482>
 8009ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d116      	bne.n	8009ef8 <USB_EPStartXfer+0x13ee>
 8009eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009edc:	801a      	strh	r2, [r3, #0]
 8009ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ef4:	801a      	strh	r2, [r3, #0]
 8009ef6:	e049      	b.n	8009f8c <USB_EPStartXfer+0x1482>
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efc:	085b      	lsrs	r3, r3, #1
 8009efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <USB_EPStartXfer+0x140e>
 8009f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f12:	3301      	adds	r3, #1
 8009f14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	029b      	lsls	r3, r3, #10
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f26:	801a      	strh	r2, [r3, #0]
 8009f28:	e030      	b.n	8009f8c <USB_EPStartXfer+0x1482>
 8009f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d128      	bne.n	8009f8c <USB_EPStartXfer+0x1482>
 8009f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	461a      	mov	r2, r3
 8009f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f5e:	4413      	add	r3, r2
 8009f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	00da      	lsls	r2, r3, #3
 8009f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f76:	4413      	add	r3, r2
 8009f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009f8a:	801a      	strh	r2, [r3, #0]
 8009f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	785b      	ldrb	r3, [r3, #1]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d178      	bne.n	800a09c <USB_EPStartXfer+0x1592>
 8009faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	461a      	mov	r2, r3
 8009fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fce:	4413      	add	r3, r2
 8009fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	00da      	lsls	r2, r3, #3
 8009fe2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ff6:	d91d      	bls.n	800a034 <USB_EPStartXfer+0x152a>
 8009ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffc:	095b      	lsrs	r3, r3, #5
 8009ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a006:	f003 031f 	and.w	r3, r3, #31
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d104      	bne.n	800a018 <USB_EPStartXfer+0x150e>
 800a00e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a012:	3b01      	subs	r3, #1
 800a014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	029b      	lsls	r3, r3, #10
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	e060      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
 800a034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d116      	bne.n	800a06a <USB_EPStartXfer+0x1560>
 800a03c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a048:	b29a      	uxth	r2, r3
 800a04a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a04e:	801a      	strh	r2, [r3, #0]
 800a050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a060:	b29a      	uxth	r2, r3
 800a062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a066:	801a      	strh	r2, [r3, #0]
 800a068:	e045      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d004      	beq.n	800a08a <USB_EPStartXfer+0x1580>
 800a080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a084:	3301      	adds	r3, #1
 800a086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a08a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a08e:	b29b      	uxth	r3, r3
 800a090:	029b      	lsls	r3, r3, #10
 800a092:	b29a      	uxth	r2, r3
 800a094:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a098:	801a      	strh	r2, [r3, #0]
 800a09a:	e02c      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
 800a09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d124      	bne.n	800a0f6 <USB_EPStartXfer+0x15ec>
 800a0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	00da      	lsls	r2, r3, #3
 800a0d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0da:	4413      	add	r3, r2
 800a0dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	e001      	b.n	800a0f6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e03a      	b.n	800a16c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	b29b      	uxth	r3, r3
 800a114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a124:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a128:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a12c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a134:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a13c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	441a      	add	r2, r3
 800a152:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a15a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a166:	b29b      	uxth	r3, r3
 800a168:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a176:	b480      	push	{r7}
 800a178:	b085      	sub	sp, #20
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d020      	beq.n	800a1ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b29b      	uxth	r3, r3
 800a196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a19a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a19e:	81bb      	strh	r3, [r7, #12]
 800a1a0:	89bb      	ldrh	r3, [r7, #12]
 800a1a2:	f083 0310 	eor.w	r3, r3, #16
 800a1a6:	81bb      	strh	r3, [r7, #12]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	441a      	add	r2, r3
 800a1b2:	89bb      	ldrh	r3, [r7, #12]
 800a1b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	8013      	strh	r3, [r2, #0]
 800a1c8:	e01f      	b.n	800a20a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e0:	81fb      	strh	r3, [r7, #14]
 800a1e2:	89fb      	ldrh	r3, [r7, #14]
 800a1e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1e8:	81fb      	strh	r3, [r7, #14]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	441a      	add	r2, r3
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a206:	b29b      	uxth	r3, r3
 800a208:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	7b1b      	ldrb	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f040 809d 	bne.w	800a366 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	785b      	ldrb	r3, [r3, #1]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d04c      	beq.n	800a2ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	823b      	strh	r3, [r7, #16]
 800a242:	8a3b      	ldrh	r3, [r7, #16]
 800a244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01b      	beq.n	800a284 <USB_EPClearStall+0x6c>
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a262:	81fb      	strh	r3, [r7, #14]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	441a      	add	r2, r3
 800a26e:	89fb      	ldrh	r3, [r7, #14]
 800a270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a280:	b29b      	uxth	r3, r3
 800a282:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	78db      	ldrb	r3, [r3, #3]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d06c      	beq.n	800a366 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a2:	81bb      	strh	r3, [r7, #12]
 800a2a4:	89bb      	ldrh	r3, [r7, #12]
 800a2a6:	f083 0320 	eor.w	r3, r3, #32
 800a2aa:	81bb      	strh	r3, [r7, #12]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	441a      	add	r2, r3
 800a2b6:	89bb      	ldrh	r3, [r7, #12]
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
 800a2cc:	e04b      	b.n	800a366 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	82fb      	strh	r3, [r7, #22]
 800a2dc:	8afb      	ldrh	r3, [r7, #22]
 800a2de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d01b      	beq.n	800a31e <USB_EPClearStall+0x106>
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	82bb      	strh	r3, [r7, #20]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	441a      	add	r2, r3
 800a308:	8abb      	ldrh	r3, [r7, #20]
 800a30a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a30e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a334:	827b      	strh	r3, [r7, #18]
 800a336:	8a7b      	ldrh	r3, [r7, #18]
 800a338:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a33c:	827b      	strh	r3, [r7, #18]
 800a33e:	8a7b      	ldrh	r3, [r7, #18]
 800a340:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a344:	827b      	strh	r3, [r7, #18]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	441a      	add	r2, r3
 800a350:	8a7b      	ldrh	r3, [r7, #18]
 800a352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a35a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a362:	b29b      	uxth	r3, r3
 800a364:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2203      	movs	r2, #3
 800a390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2280      	movs	r2, #128	; 0x80
 800a3b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a406:	b29b      	uxth	r3, r3
 800a408:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a422:	b480      	push	{r7}
 800a424:	b085      	sub	sp, #20
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a430:	b29b      	uxth	r3, r3
 800a432:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a434:	68fb      	ldr	r3, [r7, #12]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b08d      	sub	sp, #52	; 0x34
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	4611      	mov	r1, r2
 800a466:	461a      	mov	r2, r3
 800a468:	460b      	mov	r3, r1
 800a46a:	80fb      	strh	r3, [r7, #6]
 800a46c:	4613      	mov	r3, r2
 800a46e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a470:	88bb      	ldrh	r3, [r7, #4]
 800a472:	3301      	adds	r3, #1
 800a474:	085b      	lsrs	r3, r3, #1
 800a476:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a480:	88fa      	ldrh	r2, [r7, #6]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a48a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a490:	e01b      	b.n	800a4ca <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	3301      	adds	r3, #1
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	021b      	lsls	r3, r3, #8
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	3302      	adds	r3, #2
 800a4bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e0      	bne.n	800a492 <USB_WritePMA+0x38>
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	3734      	adds	r7, #52	; 0x34
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b08b      	sub	sp, #44	; 0x2c
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	80fb      	strh	r3, [r7, #6]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a4f4:	88bb      	ldrh	r3, [r7, #4]
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a504:	88fa      	ldrh	r2, [r7, #6]
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a50e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
 800a514:	e018      	b.n	800a548 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	3302      	adds	r3, #2
 800a522:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	b2da      	uxtb	r2, r3
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	3301      	adds	r3, #1
 800a530:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	b2da      	uxtb	r2, r3
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	3301      	adds	r3, #1
 800a540:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	3b01      	subs	r3, #1
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e3      	bne.n	800a516 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a54e:	88bb      	ldrh	r3, [r7, #4]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	b2da      	uxtb	r2, r3
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	701a      	strb	r2, [r3, #0]
  }
}
 800a56a:	bf00      	nop
 800a56c:	372c      	adds	r7, #44	; 0x2c
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a582:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a586:	f002 fb23 	bl	800cbd0 <USBD_static_malloc>
 800a58a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d105      	bne.n	800a59e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a59a:	2302      	movs	r3, #2
 800a59c:	e066      	b.n	800a66c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7c1b      	ldrb	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d119      	bne.n	800a5e2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	2181      	movs	r1, #129	; 0x81
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f002 f942 	bl	800c840 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f002 f938 	bl	800c840 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2210      	movs	r2, #16
 800a5dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a5e0:	e016      	b.n	800a610 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5e2:	2340      	movs	r3, #64	; 0x40
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	2181      	movs	r1, #129	; 0x81
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f002 f929 	bl	800c840 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f002 f920 	bl	800c840 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2210      	movs	r2, #16
 800a60c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a610:	2308      	movs	r3, #8
 800a612:	2203      	movs	r2, #3
 800a614:	2182      	movs	r1, #130	; 0x82
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f002 f912 	bl	800c840 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7c1b      	ldrb	r3, [r3, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d109      	bne.n	800a65a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a650:	2101      	movs	r1, #1
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f002 fa70 	bl	800cb38 <USBD_LL_PrepareReceive>
 800a658:	e007      	b.n	800a66a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a660:	2340      	movs	r3, #64	; 0x40
 800a662:	2101      	movs	r1, #1
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f002 fa67 	bl	800cb38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a680:	2181      	movs	r1, #129	; 0x81
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f002 f91a 	bl	800c8bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a68e:	2101      	movs	r1, #1
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f002 f913 	bl	800c8bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a69e:	2182      	movs	r1, #130	; 0x82
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f002 f90b 	bl	800c8bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00e      	beq.n	800a6de <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 fa8b 	bl	800cbec <USBD_static_free>
    pdev->pClassData = NULL;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e0af      	b.n	800a870 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d03f      	beq.n	800a79c <USBD_CDC_Setup+0xb4>
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	f040 809f 	bne.w	800a860 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	88db      	ldrh	r3, [r3, #6]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d02e      	beq.n	800a788 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b25b      	sxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	da16      	bge.n	800a762 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a740:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	88d2      	ldrh	r2, [r2, #6]
 800a746:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	88db      	ldrh	r3, [r3, #6]
 800a74c:	2b07      	cmp	r3, #7
 800a74e:	bf28      	it	cs
 800a750:	2307      	movcs	r3, #7
 800a752:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	89fa      	ldrh	r2, [r7, #14]
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fad9 	bl	800bd12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a760:	e085      	b.n	800a86e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	785a      	ldrb	r2, [r3, #1]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	88db      	ldrh	r3, [r3, #6]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a778:	6939      	ldr	r1, [r7, #16]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	88db      	ldrh	r3, [r3, #6]
 800a77e:	461a      	mov	r2, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 faf2 	bl	800bd6a <USBD_CtlPrepareRx>
      break;
 800a786:	e072      	b.n	800a86e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	7850      	ldrb	r0, [r2, #1]
 800a794:	2200      	movs	r2, #0
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	4798      	blx	r3
      break;
 800a79a:	e068      	b.n	800a86e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b0b      	cmp	r3, #11
 800a7a2:	d852      	bhi.n	800a84a <USBD_CDC_Setup+0x162>
 800a7a4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <USBD_CDC_Setup+0xc4>)
 800a7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7aa:	bf00      	nop
 800a7ac:	0800a7dd 	.word	0x0800a7dd
 800a7b0:	0800a859 	.word	0x0800a859
 800a7b4:	0800a84b 	.word	0x0800a84b
 800a7b8:	0800a84b 	.word	0x0800a84b
 800a7bc:	0800a84b 	.word	0x0800a84b
 800a7c0:	0800a84b 	.word	0x0800a84b
 800a7c4:	0800a84b 	.word	0x0800a84b
 800a7c8:	0800a84b 	.word	0x0800a84b
 800a7cc:	0800a84b 	.word	0x0800a84b
 800a7d0:	0800a84b 	.word	0x0800a84b
 800a7d4:	0800a807 	.word	0x0800a807
 800a7d8:	0800a831 	.word	0x0800a831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d107      	bne.n	800a7f8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a7e8:	f107 030a 	add.w	r3, r7, #10
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fa8e 	bl	800bd12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7f6:	e032      	b.n	800a85e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f001 fa18 	bl	800bc30 <USBD_CtlError>
            ret = USBD_FAIL;
 800a800:	2303      	movs	r3, #3
 800a802:	75fb      	strb	r3, [r7, #23]
          break;
 800a804:	e02b      	b.n	800a85e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d107      	bne.n	800a822 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a812:	f107 030d 	add.w	r3, r7, #13
 800a816:	2201      	movs	r2, #1
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 fa79 	bl	800bd12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a820:	e01d      	b.n	800a85e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fa03 	bl	800bc30 <USBD_CtlError>
            ret = USBD_FAIL;
 800a82a:	2303      	movs	r3, #3
 800a82c:	75fb      	strb	r3, [r7, #23]
          break;
 800a82e:	e016      	b.n	800a85e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d00f      	beq.n	800a85c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f001 f9f6 	bl	800bc30 <USBD_CtlError>
            ret = USBD_FAIL;
 800a844:	2303      	movs	r3, #3
 800a846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a848:	e008      	b.n	800a85c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f001 f9ef 	bl	800bc30 <USBD_CtlError>
          ret = USBD_FAIL;
 800a852:	2303      	movs	r3, #3
 800a854:	75fb      	strb	r3, [r7, #23]
          break;
 800a856:	e002      	b.n	800a85e <USBD_CDC_Setup+0x176>
          break;
 800a858:	bf00      	nop
 800a85a:	e008      	b.n	800a86e <USBD_CDC_Setup+0x186>
          break;
 800a85c:	bf00      	nop
      }
      break;
 800a85e:	e006      	b.n	800a86e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f001 f9e4 	bl	800bc30 <USBD_CtlError>
      ret = USBD_FAIL;
 800a868:	2303      	movs	r3, #3
 800a86a:	75fb      	strb	r3, [r7, #23]
      break;
 800a86c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a88a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a896:	2303      	movs	r3, #3
 800a898:	e04f      	b.n	800a93a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3318      	adds	r3, #24
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d029      	beq.n	800a90c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a8b8:	78fa      	ldrb	r2, [r7, #3]
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	3318      	adds	r3, #24
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	78f9      	ldrb	r1, [r7, #3]
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	440b      	add	r3, r1
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	4403      	add	r3, r0
 800a8d8:	333c      	adds	r3, #60	; 0x3c
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d110      	bne.n	800a90c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a8ea:	78fa      	ldrb	r2, [r7, #3]
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3318      	adds	r3, #24
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8fe:	78f9      	ldrb	r1, [r7, #3]
 800a900:	2300      	movs	r3, #0
 800a902:	2200      	movs	r2, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f002 f8df 	bl	800cac8 <USBD_LL_Transmit>
 800a90a:	e015      	b.n	800a938 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a934:	78fa      	ldrb	r2, [r7, #3]
 800a936:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	460b      	mov	r3, r1
 800a94c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a960:	2303      	movs	r3, #3
 800a962:	e015      	b.n	800a990 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f002 f91d 	bl	800cba8 <USBD_LL_GetRxDataSize>
 800a96e:	4602      	mov	r2, r0
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a98a:	4611      	mov	r1, r2
 800a98c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e01b      	b.n	800a9ea <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d015      	beq.n	800a9e8 <USBD_CDC_EP0_RxReady+0x50>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a9c2:	2bff      	cmp	r3, #255	; 0xff
 800a9c4:	d010      	beq.n	800a9e8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a9d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a9dc:	b292      	uxth	r2, r2
 800a9de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	22ff      	movs	r2, #255	; 0xff
 800a9e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2243      	movs	r2, #67	; 0x43
 800aa00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800aa02:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	200000b4 	.word	0x200000b4

0800aa14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2243      	movs	r2, #67	; 0x43
 800aa20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800aa22:	4b03      	ldr	r3, [pc, #12]	; (800aa30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	20000070 	.word	0x20000070

0800aa34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2243      	movs	r2, #67	; 0x43
 800aa40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800aa42:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	200000f8 	.word	0x200000f8

0800aa54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	220a      	movs	r2, #10
 800aa60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa62:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	2000002c 	.word	0x2000002c

0800aa74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e004      	b.n	800aa92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aab0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e008      	b.n	800aace <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aada:	b480      	push	{r7}
 800aadc:	b085      	sub	sp, #20
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e004      	b.n	800ab00 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e01a      	b.n	800ab64 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d114      	bne.n	800ab62 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab56:	2181      	movs	r1, #129	; 0x81
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f001 ffb5 	bl	800cac8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e016      	b.n	800abb8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	7c1b      	ldrb	r3, [r3, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d109      	bne.n	800aba6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 ffca 	bl	800cb38 <USBD_LL_PrepareReceive>
 800aba4:	e007      	b.n	800abb6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abac:	2340      	movs	r3, #64	; 0x40
 800abae:	2101      	movs	r1, #1
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f001 ffc1 	bl	800cb38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	4613      	mov	r3, r2
 800abcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e01f      	b.n	800ac18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	79fa      	ldrb	r2, [r7, #7]
 800ac0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 fd1f 	bl	800c650 <USBD_LL_Init>
 800ac12:	4603      	mov	r3, r0
 800ac14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 fdd7 	bl	800c7dc <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d011      	beq.n	800ac64 <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6852      	ldr	r2, [r2, #4]
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	4611      	mov	r1, r2
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
    pdev->pClass = NULL;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 fd4d 	bl	800c714 <USBD_LL_DeInit>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73fb      	strb	r3, [r7, #15]

  return ret;
 800ac7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e016      	b.n	800acce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	f107 020e 	add.w	r2, r7, #14
 800acc0:	4610      	mov	r0, r2
 800acc2:	4798      	blx	r3
 800acc4:	4602      	mov	r2, r0
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 fd4a 	bl	800c778 <USBD_LL_Start>
 800ace4:	4603      	mov	r3, r0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad10:	2303      	movs	r3, #3
 800ad12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	78fa      	ldrb	r2, [r7, #3]
 800ad28:	4611      	mov	r1, r2
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	4798      	blx	r3
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d007      	beq.n	800ad62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	78fa      	ldrb	r2, [r7, #3]
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
  }

  return USBD_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 ff1c 	bl	800bbbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ad92:	461a      	mov	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ada0:	f003 031f 	and.w	r3, r3, #31
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d01a      	beq.n	800adde <USBD_LL_SetupStage+0x72>
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d822      	bhi.n	800adf2 <USBD_LL_SetupStage+0x86>
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <USBD_LL_SetupStage+0x4a>
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d00a      	beq.n	800adca <USBD_LL_SetupStage+0x5e>
 800adb4:	e01d      	b.n	800adf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9ee 	bl	800b1a0 <USBD_StdDevReq>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
      break;
 800adc8:	e020      	b.n	800ae0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa52 	bl	800b27c <USBD_StdItfReq>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e016      	b.n	800ae0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa91 	bl	800b30e <USBD_StdEPReq>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
      break;
 800adf0:	e00c      	b.n	800ae0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 fd91 	bl	800c928 <USBD_LL_StallEP>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0a:	bf00      	nop
  }

  return ret;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	607a      	str	r2, [r7, #4]
 800ae22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d138      	bne.n	800ae9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d14a      	bne.n	800aed2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d913      	bls.n	800ae70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	1ad2      	subs	r2, r2, r3
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	68da      	ldr	r2, [r3, #12]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	bf28      	it	cs
 800ae62:	4613      	movcs	r3, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	6879      	ldr	r1, [r7, #4]
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 ff9b 	bl	800bda4 <USBD_CtlContinueRx>
 800ae6e:	e030      	b.n	800aed2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d10b      	bne.n	800ae94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 ff96 	bl	800bdc6 <USBD_CtlSendStatus>
 800ae9a:	e01a      	b.n	800aed2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d114      	bne.n	800aed2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00e      	beq.n	800aed2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	7afa      	ldrb	r2, [r7, #11]
 800aebe:	4611      	mov	r1, r2
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	4798      	blx	r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	e000      	b.n	800aed4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	460b      	mov	r3, r1
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d16b      	bne.n	800afc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3314      	adds	r3, #20
 800aef4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d156      	bne.n	800afae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d914      	bls.n	800af36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	689a      	ldr	r2, [r3, #8]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	1ad2      	subs	r2, r2, r3
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	461a      	mov	r2, r3
 800af20:	6879      	ldr	r1, [r7, #4]
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f000 ff10 	bl	800bd48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af28:	2300      	movs	r3, #0
 800af2a:	2200      	movs	r2, #0
 800af2c:	2100      	movs	r1, #0
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f001 fe02 	bl	800cb38 <USBD_LL_PrepareReceive>
 800af34:	e03b      	b.n	800afae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	68da      	ldr	r2, [r3, #12]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d11c      	bne.n	800af7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d316      	bcc.n	800af7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800af58:	429a      	cmp	r2, r3
 800af5a:	d20f      	bcs.n	800af7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800af5c:	2200      	movs	r2, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f000 fef1 	bl	800bd48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af6e:	2300      	movs	r3, #0
 800af70:	2200      	movs	r2, #0
 800af72:	2100      	movs	r1, #0
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f001 fddf 	bl	800cb38 <USBD_LL_PrepareReceive>
 800af7a:	e018      	b.n	800afae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b03      	cmp	r3, #3
 800af86:	d10b      	bne.n	800afa0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afa0:	2180      	movs	r1, #128	; 0x80
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f001 fcc0 	bl	800c928 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 ff1f 	bl	800bdec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d122      	bne.n	800affe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff fe98 	bl	800acee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800afc6:	e01a      	b.n	800affe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d114      	bne.n	800affe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00e      	beq.n	800affe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	7afa      	ldrb	r2, [r7, #11]
 800afea:	4611      	mov	r1, r2
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	4798      	blx	r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	e000      	b.n	800b000 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	e02f      	b.n	800b09c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00f      	beq.n	800b066 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d009      	beq.n	800b066 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	6852      	ldr	r2, [r2, #4]
 800b05e:	b2d2      	uxtb	r2, r2
 800b060:	4611      	mov	r1, r2
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b066:	2340      	movs	r3, #64	; 0x40
 800b068:	2200      	movs	r2, #0
 800b06a:	2100      	movs	r1, #0
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fbe7 	bl	800c840 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2240      	movs	r2, #64	; 0x40
 800b07e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b082:	2340      	movs	r3, #64	; 0x40
 800b084:	2200      	movs	r2, #0
 800b086:	2180      	movs	r1, #128	; 0x80
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 fbd9 	bl	800c840 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2240      	movs	r2, #64	; 0x40
 800b098:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2204      	movs	r2, #4
 800b0de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b04      	cmp	r3, #4
 800b102:	d106      	bne.n	800b112 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b132:	2303      	movs	r3, #3
 800b134:	e012      	b.n	800b15c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d10b      	bne.n	800b15a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	3301      	adds	r3, #1
 800b17a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b182:	8a3b      	ldrh	r3, [r7, #16]
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	b21a      	sxth	r2, r3
 800b188:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	b21b      	sxth	r3, r3
 800b190:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b192:	89fb      	ldrh	r3, [r7, #14]
}
 800b194:	4618      	mov	r0, r3
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1b6:	2b40      	cmp	r3, #64	; 0x40
 800b1b8:	d005      	beq.n	800b1c6 <USBD_StdDevReq+0x26>
 800b1ba:	2b40      	cmp	r3, #64	; 0x40
 800b1bc:	d853      	bhi.n	800b266 <USBD_StdDevReq+0xc6>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00b      	beq.n	800b1da <USBD_StdDevReq+0x3a>
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	d14f      	bne.n	800b266 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d8:	e04a      	b.n	800b270 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	785b      	ldrb	r3, [r3, #1]
 800b1de:	2b09      	cmp	r3, #9
 800b1e0:	d83b      	bhi.n	800b25a <USBD_StdDevReq+0xba>
 800b1e2:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <USBD_StdDevReq+0x48>)
 800b1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e8:	0800b23d 	.word	0x0800b23d
 800b1ec:	0800b251 	.word	0x0800b251
 800b1f0:	0800b25b 	.word	0x0800b25b
 800b1f4:	0800b247 	.word	0x0800b247
 800b1f8:	0800b25b 	.word	0x0800b25b
 800b1fc:	0800b21b 	.word	0x0800b21b
 800b200:	0800b211 	.word	0x0800b211
 800b204:	0800b25b 	.word	0x0800b25b
 800b208:	0800b233 	.word	0x0800b233
 800b20c:	0800b225 	.word	0x0800b225
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f9de 	bl	800b5d4 <USBD_GetDescriptor>
          break;
 800b218:	e024      	b.n	800b264 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fb43 	bl	800b8a8 <USBD_SetAddress>
          break;
 800b222:	e01f      	b.n	800b264 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fb82 	bl	800b930 <USBD_SetConfig>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
          break;
 800b230:	e018      	b.n	800b264 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fc21 	bl	800ba7c <USBD_GetConfig>
          break;
 800b23a:	e013      	b.n	800b264 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fc52 	bl	800bae8 <USBD_GetStatus>
          break;
 800b244:	e00e      	b.n	800b264 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fc81 	bl	800bb50 <USBD_SetFeature>
          break;
 800b24e:	e009      	b.n	800b264 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fc90 	bl	800bb78 <USBD_ClrFeature>
          break;
 800b258:	e004      	b.n	800b264 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fce7 	bl	800bc30 <USBD_CtlError>
          break;
 800b262:	bf00      	nop
      }
      break;
 800b264:	e004      	b.n	800b270 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fce1 	bl	800bc30 <USBD_CtlError>
      break;
 800b26e:	bf00      	nop
  }

  return ret;
 800b270:	7bfb      	ldrb	r3, [r7, #15]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop

0800b27c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b292:	2b40      	cmp	r3, #64	; 0x40
 800b294:	d005      	beq.n	800b2a2 <USBD_StdItfReq+0x26>
 800b296:	2b40      	cmp	r3, #64	; 0x40
 800b298:	d82f      	bhi.n	800b2fa <USBD_StdItfReq+0x7e>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <USBD_StdItfReq+0x26>
 800b29e:	2b20      	cmp	r3, #32
 800b2a0:	d12b      	bne.n	800b2fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d81d      	bhi.n	800b2ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	889b      	ldrh	r3, [r3, #4]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d813      	bhi.n	800b2e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	88db      	ldrh	r3, [r3, #6]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d110      	bne.n	800b2f6 <USBD_StdItfReq+0x7a>
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10d      	bne.n	800b2f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fd73 	bl	800bdc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b2e0:	e009      	b.n	800b2f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fca3 	bl	800bc30 <USBD_CtlError>
          break;
 800b2ea:	e004      	b.n	800b2f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fc9e 	bl	800bc30 <USBD_CtlError>
          break;
 800b2f4:	e000      	b.n	800b2f8 <USBD_StdItfReq+0x7c>
          break;
 800b2f6:	bf00      	nop
      }
      break;
 800b2f8:	e004      	b.n	800b304 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc97 	bl	800bc30 <USBD_CtlError>
      break;
 800b302:	bf00      	nop
  }

  return ret;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	889b      	ldrh	r3, [r3, #4]
 800b320:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b32a:	2b40      	cmp	r3, #64	; 0x40
 800b32c:	d007      	beq.n	800b33e <USBD_StdEPReq+0x30>
 800b32e:	2b40      	cmp	r3, #64	; 0x40
 800b330:	f200 8145 	bhi.w	800b5be <USBD_StdEPReq+0x2b0>
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00c      	beq.n	800b352 <USBD_StdEPReq+0x44>
 800b338:	2b20      	cmp	r3, #32
 800b33a:	f040 8140 	bne.w	800b5be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	4798      	blx	r3
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]
      break;
 800b350:	e13a      	b.n	800b5c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	785b      	ldrb	r3, [r3, #1]
 800b356:	2b03      	cmp	r3, #3
 800b358:	d007      	beq.n	800b36a <USBD_StdEPReq+0x5c>
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	f300 8129 	bgt.w	800b5b2 <USBD_StdEPReq+0x2a4>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d07f      	beq.n	800b464 <USBD_StdEPReq+0x156>
 800b364:	2b01      	cmp	r3, #1
 800b366:	d03c      	beq.n	800b3e2 <USBD_StdEPReq+0xd4>
 800b368:	e123      	b.n	800b5b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b02      	cmp	r3, #2
 800b374:	d002      	beq.n	800b37c <USBD_StdEPReq+0x6e>
 800b376:	2b03      	cmp	r3, #3
 800b378:	d016      	beq.n	800b3a8 <USBD_StdEPReq+0x9a>
 800b37a:	e02c      	b.n	800b3d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00d      	beq.n	800b39e <USBD_StdEPReq+0x90>
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	2b80      	cmp	r3, #128	; 0x80
 800b386:	d00a      	beq.n	800b39e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 facb 	bl	800c928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b392:	2180      	movs	r1, #128	; 0x80
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fac7 	bl	800c928 <USBD_LL_StallEP>
 800b39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b39c:	e020      	b.n	800b3e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fc45 	bl	800bc30 <USBD_CtlError>
              break;
 800b3a6:	e01b      	b.n	800b3e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	885b      	ldrh	r3, [r3, #2]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10e      	bne.n	800b3ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00b      	beq.n	800b3ce <USBD_StdEPReq+0xc0>
 800b3b6:	7bbb      	ldrb	r3, [r7, #14]
 800b3b8:	2b80      	cmp	r3, #128	; 0x80
 800b3ba:	d008      	beq.n	800b3ce <USBD_StdEPReq+0xc0>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	88db      	ldrh	r3, [r3, #6]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d104      	bne.n	800b3ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 faad 	bl	800c928 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fcf9 	bl	800bdc6 <USBD_CtlSendStatus>

              break;
 800b3d4:	e004      	b.n	800b3e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fc29 	bl	800bc30 <USBD_CtlError>
              break;
 800b3de:	bf00      	nop
          }
          break;
 800b3e0:	e0ec      	b.n	800b5bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d002      	beq.n	800b3f4 <USBD_StdEPReq+0xe6>
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d016      	beq.n	800b420 <USBD_StdEPReq+0x112>
 800b3f2:	e030      	b.n	800b456 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3f4:	7bbb      	ldrb	r3, [r7, #14]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00d      	beq.n	800b416 <USBD_StdEPReq+0x108>
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	2b80      	cmp	r3, #128	; 0x80
 800b3fe:	d00a      	beq.n	800b416 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f001 fa8f 	bl	800c928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b40a:	2180      	movs	r1, #128	; 0x80
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 fa8b 	bl	800c928 <USBD_LL_StallEP>
 800b412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b414:	e025      	b.n	800b462 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fc09 	bl	800bc30 <USBD_CtlError>
              break;
 800b41e:	e020      	b.n	800b462 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	885b      	ldrh	r3, [r3, #2]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11b      	bne.n	800b460 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b428:	7bbb      	ldrb	r3, [r7, #14]
 800b42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f001 faac 	bl	800c994 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fcc2 	bl	800bdc6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	4798      	blx	r3
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b454:	e004      	b.n	800b460 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fbe9 	bl	800bc30 <USBD_CtlError>
              break;
 800b45e:	e000      	b.n	800b462 <USBD_StdEPReq+0x154>
              break;
 800b460:	bf00      	nop
          }
          break;
 800b462:	e0ab      	b.n	800b5bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d002      	beq.n	800b476 <USBD_StdEPReq+0x168>
 800b470:	2b03      	cmp	r3, #3
 800b472:	d032      	beq.n	800b4da <USBD_StdEPReq+0x1cc>
 800b474:	e097      	b.n	800b5a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d007      	beq.n	800b48c <USBD_StdEPReq+0x17e>
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b80      	cmp	r3, #128	; 0x80
 800b480:	d004      	beq.n	800b48c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fbd3 	bl	800bc30 <USBD_CtlError>
                break;
 800b48a:	e091      	b.n	800b5b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b490:	2b00      	cmp	r3, #0
 800b492:	da0b      	bge.n	800b4ac <USBD_StdEPReq+0x19e>
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b49a:	4613      	mov	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	3310      	adds	r3, #16
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	e00b      	b.n	800b4c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
 800b4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fc1d 	bl	800bd12 <USBD_CtlSendData>
              break;
 800b4d8:	e06a      	b.n	800b5b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	da11      	bge.n	800b506 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
 800b4e4:	f003 020f 	and.w	r2, r3, #15
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3324      	adds	r3, #36	; 0x24
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d117      	bne.n	800b52c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fb96 	bl	800bc30 <USBD_CtlError>
                  break;
 800b504:	e054      	b.n	800b5b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	f003 020f 	and.w	r2, r3, #15
 800b50c:	6879      	ldr	r1, [r7, #4]
 800b50e:	4613      	mov	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	440b      	add	r3, r1
 800b518:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d104      	bne.n	800b52c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fb83 	bl	800bc30 <USBD_CtlError>
                  break;
 800b52a:	e041      	b.n	800b5b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b530:	2b00      	cmp	r3, #0
 800b532:	da0b      	bge.n	800b54c <USBD_StdEPReq+0x23e>
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	3310      	adds	r3, #16
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	4413      	add	r3, r2
 800b548:	3304      	adds	r3, #4
 800b54a:	e00b      	b.n	800b564 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	4413      	add	r3, r2
 800b562:	3304      	adds	r3, #4
 800b564:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <USBD_StdEPReq+0x264>
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	2b80      	cmp	r3, #128	; 0x80
 800b570:	d103      	bne.n	800b57a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	e00e      	b.n	800b598 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 fa3e 	bl	800ca00 <USBD_LL_IsStallEP>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2201      	movs	r2, #1
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	e002      	b.n	800b598 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2202      	movs	r2, #2
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fbb7 	bl	800bd12 <USBD_CtlSendData>
              break;
 800b5a4:	e004      	b.n	800b5b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fb41 	bl	800bc30 <USBD_CtlError>
              break;
 800b5ae:	bf00      	nop
          }
          break;
 800b5b0:	e004      	b.n	800b5bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fb3b 	bl	800bc30 <USBD_CtlError>
          break;
 800b5ba:	bf00      	nop
      }
      break;
 800b5bc:	e004      	b.n	800b5c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fb35 	bl	800bc30 <USBD_CtlError>
      break;
 800b5c6:	bf00      	nop
  }

  return ret;
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	885b      	ldrh	r3, [r3, #2]
 800b5ee:	0a1b      	lsrs	r3, r3, #8
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	2b06      	cmp	r3, #6
 800b5f6:	f200 8128 	bhi.w	800b84a <USBD_GetDescriptor+0x276>
 800b5fa:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <USBD_GetDescriptor+0x2c>)
 800b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b600:	0800b61d 	.word	0x0800b61d
 800b604:	0800b635 	.word	0x0800b635
 800b608:	0800b675 	.word	0x0800b675
 800b60c:	0800b84b 	.word	0x0800b84b
 800b610:	0800b84b 	.word	0x0800b84b
 800b614:	0800b7eb 	.word	0x0800b7eb
 800b618:	0800b817 	.word	0x0800b817
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	7c12      	ldrb	r2, [r2, #16]
 800b628:	f107 0108 	add.w	r1, r7, #8
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
 800b630:	60f8      	str	r0, [r7, #12]
      break;
 800b632:	e112      	b.n	800b85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	7c1b      	ldrb	r3, [r3, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10d      	bne.n	800b658 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b644:	f107 0208 	add.w	r2, r7, #8
 800b648:	4610      	mov	r0, r2
 800b64a:	4798      	blx	r3
 800b64c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3301      	adds	r3, #1
 800b652:	2202      	movs	r2, #2
 800b654:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b656:	e100      	b.n	800b85a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	f107 0208 	add.w	r2, r7, #8
 800b664:	4610      	mov	r0, r2
 800b666:	4798      	blx	r3
 800b668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3301      	adds	r3, #1
 800b66e:	2202      	movs	r2, #2
 800b670:	701a      	strb	r2, [r3, #0]
      break;
 800b672:	e0f2      	b.n	800b85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	885b      	ldrh	r3, [r3, #2]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b05      	cmp	r3, #5
 800b67c:	f200 80ac 	bhi.w	800b7d8 <USBD_GetDescriptor+0x204>
 800b680:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <USBD_GetDescriptor+0xb4>)
 800b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b6a1 	.word	0x0800b6a1
 800b68c:	0800b6d5 	.word	0x0800b6d5
 800b690:	0800b709 	.word	0x0800b709
 800b694:	0800b73d 	.word	0x0800b73d
 800b698:	0800b771 	.word	0x0800b771
 800b69c:	0800b7a5 	.word	0x0800b7a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	7c12      	ldrb	r2, [r2, #16]
 800b6b8:	f107 0108 	add.w	r1, r7, #8
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6c2:	e091      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fab2 	bl	800bc30 <USBD_CtlError>
            err++;
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6d2:	e089      	b.n	800b7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6f6:	e077      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa98 	bl	800bc30 <USBD_CtlError>
            err++;
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	3301      	adds	r3, #1
 800b704:	72fb      	strb	r3, [r7, #11]
          break;
 800b706:	e06f      	b.n	800b7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00b      	beq.n	800b72c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	7c12      	ldrb	r2, [r2, #16]
 800b720:	f107 0108 	add.w	r1, r7, #8
 800b724:	4610      	mov	r0, r2
 800b726:	4798      	blx	r3
 800b728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b72a:	e05d      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa7e 	bl	800bc30 <USBD_CtlError>
            err++;
 800b734:	7afb      	ldrb	r3, [r7, #11]
 800b736:	3301      	adds	r3, #1
 800b738:	72fb      	strb	r3, [r7, #11]
          break;
 800b73a:	e055      	b.n	800b7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	7c12      	ldrb	r2, [r2, #16]
 800b754:	f107 0108 	add.w	r1, r7, #8
 800b758:	4610      	mov	r0, r2
 800b75a:	4798      	blx	r3
 800b75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b75e:	e043      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fa64 	bl	800bc30 <USBD_CtlError>
            err++;
 800b768:	7afb      	ldrb	r3, [r7, #11]
 800b76a:	3301      	adds	r3, #1
 800b76c:	72fb      	strb	r3, [r7, #11]
          break;
 800b76e:	e03b      	b.n	800b7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	7c12      	ldrb	r2, [r2, #16]
 800b788:	f107 0108 	add.w	r1, r7, #8
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
 800b790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b792:	e029      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fa4a 	bl	800bc30 <USBD_CtlError>
            err++;
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7a2:	e021      	b.n	800b7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c6:	e00f      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fa30 	bl	800bc30 <USBD_CtlError>
            err++;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d6:	e007      	b.n	800b7e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa28 	bl	800bc30 <USBD_CtlError>
          err++;
 800b7e0:	7afb      	ldrb	r3, [r7, #11]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b7e6:	bf00      	nop
      }
      break;
 800b7e8:	e037      	b.n	800b85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	7c1b      	ldrb	r3, [r3, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fa:	f107 0208 	add.w	r2, r7, #8
 800b7fe:	4610      	mov	r0, r2
 800b800:	4798      	blx	r3
 800b802:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b804:	e029      	b.n	800b85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa11 	bl	800bc30 <USBD_CtlError>
        err++;
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	3301      	adds	r3, #1
 800b812:	72fb      	strb	r3, [r7, #11]
      break;
 800b814:	e021      	b.n	800b85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	7c1b      	ldrb	r3, [r3, #16]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10d      	bne.n	800b83a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b826:	f107 0208 	add.w	r2, r7, #8
 800b82a:	4610      	mov	r0, r2
 800b82c:	4798      	blx	r3
 800b82e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	3301      	adds	r3, #1
 800b834:	2207      	movs	r2, #7
 800b836:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b838:	e00f      	b.n	800b85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f9f7 	bl	800bc30 <USBD_CtlError>
        err++;
 800b842:	7afb      	ldrb	r3, [r7, #11]
 800b844:	3301      	adds	r3, #1
 800b846:	72fb      	strb	r3, [r7, #11]
      break;
 800b848:	e007      	b.n	800b85a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f9ef 	bl	800bc30 <USBD_CtlError>
      err++;
 800b852:	7afb      	ldrb	r3, [r7, #11]
 800b854:	3301      	adds	r3, #1
 800b856:	72fb      	strb	r3, [r7, #11]
      break;
 800b858:	bf00      	nop
  }

  if (err != 0U)
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d11e      	bne.n	800b89e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	88db      	ldrh	r3, [r3, #6]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d016      	beq.n	800b896 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b868:	893b      	ldrh	r3, [r7, #8]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00e      	beq.n	800b88c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	88da      	ldrh	r2, [r3, #6]
 800b872:	893b      	ldrh	r3, [r7, #8]
 800b874:	4293      	cmp	r3, r2
 800b876:	bf28      	it	cs
 800b878:	4613      	movcs	r3, r2
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b87e:	893b      	ldrh	r3, [r7, #8]
 800b880:	461a      	mov	r2, r3
 800b882:	68f9      	ldr	r1, [r7, #12]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fa44 	bl	800bd12 <USBD_CtlSendData>
 800b88a:	e009      	b.n	800b8a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f9ce 	bl	800bc30 <USBD_CtlError>
 800b894:	e004      	b.n	800b8a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa95 	bl	800bdc6 <USBD_CtlSendStatus>
 800b89c:	e000      	b.n	800b8a0 <USBD_GetDescriptor+0x2cc>
    return;
 800b89e:	bf00      	nop
  }
}
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop

0800b8a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	889b      	ldrh	r3, [r3, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d131      	bne.n	800b91e <USBD_SetAddress+0x76>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	88db      	ldrh	r3, [r3, #6]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d12d      	bne.n	800b91e <USBD_SetAddress+0x76>
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	885b      	ldrh	r3, [r3, #2]
 800b8c6:	2b7f      	cmp	r3, #127	; 0x7f
 800b8c8:	d829      	bhi.n	800b91e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	885b      	ldrh	r3, [r3, #2]
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d104      	bne.n	800b8ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f9a3 	bl	800bc30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ea:	e01d      	b.n	800b928 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	7bfa      	ldrb	r2, [r7, #15]
 800b8f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 f8af 	bl	800ca5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa61 	bl	800bdc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2202      	movs	r2, #2
 800b90e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b912:	e009      	b.n	800b928 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b91c:	e004      	b.n	800b928 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f985 	bl	800bc30 <USBD_CtlError>
  }
}
 800b926:	bf00      	nop
 800b928:	bf00      	nop
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	885b      	ldrh	r3, [r3, #2]
 800b942:	b2da      	uxtb	r2, r3
 800b944:	4b4c      	ldr	r3, [pc, #304]	; (800ba78 <USBD_SetConfig+0x148>)
 800b946:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b948:	4b4b      	ldr	r3, [pc, #300]	; (800ba78 <USBD_SetConfig+0x148>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d905      	bls.n	800b95c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f96c 	bl	800bc30 <USBD_CtlError>
    return USBD_FAIL;
 800b958:	2303      	movs	r3, #3
 800b95a:	e088      	b.n	800ba6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b02      	cmp	r3, #2
 800b966:	d002      	beq.n	800b96e <USBD_SetConfig+0x3e>
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d025      	beq.n	800b9b8 <USBD_SetConfig+0x88>
 800b96c:	e071      	b.n	800ba52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b96e:	4b42      	ldr	r3, [pc, #264]	; (800ba78 <USBD_SetConfig+0x148>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d01c      	beq.n	800b9b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b976:	4b40      	ldr	r3, [pc, #256]	; (800ba78 <USBD_SetConfig+0x148>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b980:	4b3d      	ldr	r3, [pc, #244]	; (800ba78 <USBD_SetConfig+0x148>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff f9bc 	bl	800ad04 <USBD_SetClassConfig>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d004      	beq.n	800b9a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f949 	bl	800bc30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b99e:	e065      	b.n	800ba6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fa10 	bl	800bdc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2203      	movs	r2, #3
 800b9aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b9ae:	e05d      	b.n	800ba6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fa08 	bl	800bdc6 <USBD_CtlSendStatus>
      break;
 800b9b6:	e059      	b.n	800ba6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b9b8:	4b2f      	ldr	r3, [pc, #188]	; (800ba78 <USBD_SetConfig+0x148>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d112      	bne.n	800b9e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b9c8:	4b2b      	ldr	r3, [pc, #172]	; (800ba78 <USBD_SetConfig+0x148>)
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9d2:	4b29      	ldr	r3, [pc, #164]	; (800ba78 <USBD_SetConfig+0x148>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff f9af 	bl	800ad3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f9f1 	bl	800bdc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9e4:	e042      	b.n	800ba6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b9e6:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <USBD_SetConfig+0x148>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d02a      	beq.n	800ba4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff f99d 	bl	800ad3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba02:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <USBD_SetConfig+0x148>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba0c:	4b1a      	ldr	r3, [pc, #104]	; (800ba78 <USBD_SetConfig+0x148>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff f976 	bl	800ad04 <USBD_SetClassConfig>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00f      	beq.n	800ba42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f903 	bl	800bc30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff f982 	bl	800ad3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba40:	e014      	b.n	800ba6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f9bf 	bl	800bdc6 <USBD_CtlSendStatus>
      break;
 800ba48:	e010      	b.n	800ba6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f9bb 	bl	800bdc6 <USBD_CtlSendStatus>
      break;
 800ba50:	e00c      	b.n	800ba6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f8eb 	bl	800bc30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <USBD_SetConfig+0x148>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff f96b 	bl	800ad3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ba66:	2303      	movs	r3, #3
 800ba68:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6a:	bf00      	nop
  }

  return ret;
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20000468 	.word	0x20000468

0800ba7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	88db      	ldrh	r3, [r3, #6]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d004      	beq.n	800ba98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f8cd 	bl	800bc30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba96:	e023      	b.n	800bae0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	dc02      	bgt.n	800baaa <USBD_GetConfig+0x2e>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	dc03      	bgt.n	800bab0 <USBD_GetConfig+0x34>
 800baa8:	e015      	b.n	800bad6 <USBD_GetConfig+0x5a>
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d00b      	beq.n	800bac6 <USBD_GetConfig+0x4a>
 800baae:	e012      	b.n	800bad6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3308      	adds	r3, #8
 800baba:	2201      	movs	r2, #1
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f927 	bl	800bd12 <USBD_CtlSendData>
        break;
 800bac4:	e00c      	b.n	800bae0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	3304      	adds	r3, #4
 800baca:	2201      	movs	r2, #1
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f91f 	bl	800bd12 <USBD_CtlSendData>
        break;
 800bad4:	e004      	b.n	800bae0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bad6:	6839      	ldr	r1, [r7, #0]
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f8a9 	bl	800bc30 <USBD_CtlError>
        break;
 800bade:	bf00      	nop
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	3b01      	subs	r3, #1
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d81e      	bhi.n	800bb3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	88db      	ldrh	r3, [r3, #6]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d004      	beq.n	800bb12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f890 	bl	800bc30 <USBD_CtlError>
        break;
 800bb10:	e01a      	b.n	800bb48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	f043 0202 	orr.w	r2, r3, #2
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	330c      	adds	r3, #12
 800bb32:	2202      	movs	r2, #2
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f8eb 	bl	800bd12 <USBD_CtlSendData>
      break;
 800bb3c:	e004      	b.n	800bb48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f875 	bl	800bc30 <USBD_CtlError>
      break;
 800bb46:	bf00      	nop
  }
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	885b      	ldrh	r3, [r3, #2]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d106      	bne.n	800bb70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f92b 	bl	800bdc6 <USBD_CtlSendStatus>
  }
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d80b      	bhi.n	800bba8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	885b      	ldrh	r3, [r3, #2]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d10c      	bne.n	800bbb2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f910 	bl	800bdc6 <USBD_CtlSendStatus>
      }
      break;
 800bba6:	e004      	b.n	800bbb2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f840 	bl	800bc30 <USBD_CtlError>
      break;
 800bbb0:	e000      	b.n	800bbb4 <USBD_ClrFeature+0x3c>
      break;
 800bbb2:	bf00      	nop
  }
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	781a      	ldrb	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fabc 	bl	800b164 <SWAPBYTE>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff faaf 	bl	800b164 <SWAPBYTE>
 800bc06:	4603      	mov	r3, r0
 800bc08:	461a      	mov	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3301      	adds	r3, #1
 800bc12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff faa2 	bl	800b164 <SWAPBYTE>
 800bc20:	4603      	mov	r3, r0
 800bc22:	461a      	mov	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	80da      	strh	r2, [r3, #6]
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc3a:	2180      	movs	r1, #128	; 0x80
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fe73 	bl	800c928 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc42:	2100      	movs	r1, #0
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fe6f 	bl	800c928 <USBD_LL_StallEP>
}
 800bc4a:	bf00      	nop
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b086      	sub	sp, #24
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d036      	beq.n	800bcd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc6c:	6938      	ldr	r0, [r7, #16]
 800bc6e:	f000 f836 	bl	800bcde <USBD_GetLen>
 800bc72:	4603      	mov	r3, r0
 800bc74:	3301      	adds	r3, #1
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	4413      	add	r3, r2
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	7812      	ldrb	r2, [r2, #0]
 800bc8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	4413      	add	r3, r2
 800bc98:	2203      	movs	r2, #3
 800bc9a:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bca2:	e013      	b.n	800bccc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	4413      	add	r3, r2
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	7812      	ldrb	r2, [r2, #0]
 800bcae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	613b      	str	r3, [r7, #16]
    idx++;
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]
    idx++;
 800bcc6:	7dfb      	ldrb	r3, [r7, #23]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e7      	bne.n	800bca4 <USBD_GetString+0x52>
 800bcd4:	e000      	b.n	800bcd8 <USBD_GetString+0x86>
    return;
 800bcd6:	bf00      	nop
  }
}
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b085      	sub	sp, #20
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bcee:	e005      	b.n	800bcfc <USBD_GetLen+0x1e>
  {
    len++;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1f5      	bne.n	800bcf0 <USBD_GetLen+0x12>
  }

  return len;
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2202      	movs	r2, #2
 800bd22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	2100      	movs	r1, #0
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 fec5 	bl	800cac8 <USBD_LL_Transmit>

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	2100      	movs	r1, #0
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f000 feb4 	bl	800cac8 <USBD_LL_Transmit>

  return USBD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2203      	movs	r2, #3
 800bd7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	2100      	movs	r1, #0
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 fecf 	bl	800cb38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 febe 	bl	800cb38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2204      	movs	r2, #4
 800bdd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2100      	movs	r1, #0
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fe73 	bl	800cac8 <USBD_LL_Transmit>

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2205      	movs	r2, #5
 800bdf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	2200      	movs	r2, #0
 800be00:	2100      	movs	r1, #0
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fe98 	bl	800cb38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit()
{
 800be14:	b580      	push	{r7, lr}
 800be16:	af00      	add	r7, sp, #0
	USBD_DeInit(&hUsbDeviceFS);
 800be18:	4802      	ldr	r0, [pc, #8]	; (800be24 <MX_USB_DEVICE_DeInit+0x10>)
 800be1a:	f7fe ff01 	bl	800ac20 <USBD_DeInit>
}
 800be1e:	bf00      	nop
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	2000046c 	.word	0x2000046c

0800be28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be2c:	2200      	movs	r2, #0
 800be2e:	4912      	ldr	r1, [pc, #72]	; (800be78 <MX_USB_DEVICE_Init+0x50>)
 800be30:	4812      	ldr	r0, [pc, #72]	; (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be32:	f7fe fec5 	bl	800abc0 <USBD_Init>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be3c:	f7f5 fabc 	bl	80013b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be40:	490f      	ldr	r1, [pc, #60]	; (800be80 <MX_USB_DEVICE_Init+0x58>)
 800be42:	480e      	ldr	r0, [pc, #56]	; (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be44:	f7fe ff20 	bl	800ac88 <USBD_RegisterClass>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be4e:	f7f5 fab3 	bl	80013b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be52:	490c      	ldr	r1, [pc, #48]	; (800be84 <MX_USB_DEVICE_Init+0x5c>)
 800be54:	4809      	ldr	r0, [pc, #36]	; (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be56:	f7fe fe0d 	bl	800aa74 <USBD_CDC_RegisterInterface>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be60:	f7f5 faaa 	bl	80013b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be64:	4805      	ldr	r0, [pc, #20]	; (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be66:	f7fe ff36 	bl	800acd6 <USBD_Start>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be70:	f7f5 faa2 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be74:	bf00      	nop
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000150 	.word	0x20000150
 800be7c:	2000046c 	.word	0x2000046c
 800be80:	20000038 	.word	0x20000038
 800be84:	2000013c 	.word	0x2000013c

0800be88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	size_t size = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be8e:	2340      	movs	r3, #64	; 0x40
 800be90:	607b      	str	r3, [r7, #4]
	rx_buf_handle = ring_buffer_init(size);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7f5 faa0 	bl	80013d8 <ring_buffer_init>
 800be98:	4603      	mov	r3, r0
 800be9a:	4a09      	ldr	r2, [pc, #36]	; (800bec0 <CDC_Init_FS+0x38>)
 800be9c:	6013      	str	r3, [r2, #0]
	data_rdy = false;
 800be9e:	4b09      	ldr	r3, [pc, #36]	; (800bec4 <CDC_Init_FS+0x3c>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bea4:	2200      	movs	r2, #0
 800bea6:	4908      	ldr	r1, [pc, #32]	; (800bec8 <CDC_Init_FS+0x40>)
 800bea8:	4808      	ldr	r0, [pc, #32]	; (800becc <CDC_Init_FS+0x44>)
 800beaa:	f7fe fdf8 	bl	800aa9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800beae:	4908      	ldr	r1, [pc, #32]	; (800bed0 <CDC_Init_FS+0x48>)
 800beb0:	4806      	ldr	r0, [pc, #24]	; (800becc <CDC_Init_FS+0x44>)
 800beb2:	f7fe fe12 	bl	800aada <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800beb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	2000073c 	.word	0x2000073c
 800bec4:	20000740 	.word	0x20000740
 800bec8:	200007c4 	.word	0x200007c4
 800becc:	2000046c 	.word	0x2000046c
 800bed0:	20000744 	.word	0x20000744

0800bed4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	ring_buffer_SIG ret = ring_buffer_deinit(rx_buf_handle);
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <CDC_DeInit_FS+0x34>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f5 fc00 	bl	80016e4 <ring_buffer_deinit>
 800bee4:	4603      	mov	r3, r0
 800bee6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	if (ret == OK)
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <CDC_DeInit_FS+0x1e>
	{
		return (USBD_OK);
 800beee:	2300      	movs	r3, #0
 800bef0:	e005      	b.n	800befe <CDC_DeInit_FS+0x2a>
	}
	else if (ret == BUSY)
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d101      	bne.n	800befc <CDC_DeInit_FS+0x28>
	{
		return (USBD_BUSY);
 800bef8:	2301      	movs	r3, #1
 800befa:	e000      	b.n	800befe <CDC_DeInit_FS+0x2a>
	}
	else
	{
		return USBD_FAIL;
 800befc:	2303      	movs	r3, #3
	}
  /* USER CODE END 4 */
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	2000073c 	.word	0x2000073c

0800bf0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	6039      	str	r1, [r7, #0]
 800bf16:	71fb      	strb	r3, [r7, #7]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	2b23      	cmp	r3, #35	; 0x23
 800bf20:	d86a      	bhi.n	800bff8 <CDC_Control_FS+0xec>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <CDC_Control_FS+0x1c>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bff9 	.word	0x0800bff9
 800bf2c:	0800bff9 	.word	0x0800bff9
 800bf30:	0800bff9 	.word	0x0800bff9
 800bf34:	0800bff9 	.word	0x0800bff9
 800bf38:	0800bff9 	.word	0x0800bff9
 800bf3c:	0800bff9 	.word	0x0800bff9
 800bf40:	0800bff9 	.word	0x0800bff9
 800bf44:	0800bff9 	.word	0x0800bff9
 800bf48:	0800bff9 	.word	0x0800bff9
 800bf4c:	0800bff9 	.word	0x0800bff9
 800bf50:	0800bff9 	.word	0x0800bff9
 800bf54:	0800bff9 	.word	0x0800bff9
 800bf58:	0800bff9 	.word	0x0800bff9
 800bf5c:	0800bff9 	.word	0x0800bff9
 800bf60:	0800bff9 	.word	0x0800bff9
 800bf64:	0800bff9 	.word	0x0800bff9
 800bf68:	0800bff9 	.word	0x0800bff9
 800bf6c:	0800bff9 	.word	0x0800bff9
 800bf70:	0800bff9 	.word	0x0800bff9
 800bf74:	0800bff9 	.word	0x0800bff9
 800bf78:	0800bff9 	.word	0x0800bff9
 800bf7c:	0800bff9 	.word	0x0800bff9
 800bf80:	0800bff9 	.word	0x0800bff9
 800bf84:	0800bff9 	.word	0x0800bff9
 800bf88:	0800bff9 	.word	0x0800bff9
 800bf8c:	0800bff9 	.word	0x0800bff9
 800bf90:	0800bff9 	.word	0x0800bff9
 800bf94:	0800bff9 	.word	0x0800bff9
 800bf98:	0800bff9 	.word	0x0800bff9
 800bf9c:	0800bff9 	.word	0x0800bff9
 800bfa0:	0800bff9 	.word	0x0800bff9
 800bfa4:	0800bff9 	.word	0x0800bff9
 800bfa8:	0800bff9 	.word	0x0800bff9
 800bfac:	0800bff9 	.word	0x0800bff9
 800bfb0:	0800bfb9 	.word	0x0800bfb9
 800bfb4:	0800bff9 	.word	0x0800bff9
    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	/*When CDC_SET_CONTROL_LINE_STATE is called, once usb is plugged pbuf[2] doesn't exist. As a result it returns 0 and resets rts*/
    	/*this is used as workaround*/
    	if (pbuf[2])
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	3302      	adds	r3, #2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <CDC_Control_FS+0xce>
    	{
    		rts = (bool)(pbuf[2] & 0x02);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	3302      	adds	r3, #2
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 0302 	and.w	r3, r3, #2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bf14      	ite	ne
 800bfd0:	2301      	movne	r3, #1
 800bfd2:	2300      	moveq	r3, #0
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	4b0d      	ldr	r3, [pc, #52]	; (800c00c <CDC_Control_FS+0x100>)
 800bfd8:	701a      	strb	r2, [r3, #0]
    	}
    	if (!rts)
 800bfda:	4b0c      	ldr	r3, [pc, #48]	; (800c00c <CDC_Control_FS+0x100>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f083 0301 	eor.w	r3, r3, #1
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d008      	beq.n	800bffc <CDC_Control_FS+0xf0>
    	{
    		rts_counter++;
 800bfea:	4b09      	ldr	r3, [pc, #36]	; (800c010 <CDC_Control_FS+0x104>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	3301      	adds	r3, #1
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <CDC_Control_FS+0x104>)
 800bff4:	701a      	strb	r2, [r3, #0]
    	}

    break;
 800bff6:	e001      	b.n	800bffc <CDC_Control_FS+0xf0>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bff8:	bf00      	nop
 800bffa:	e000      	b.n	800bffe <CDC_Control_FS+0xf2>
    break;
 800bffc:	bf00      	nop
  }

  return (USBD_OK);
 800bffe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	20000741 	.word	0x20000741
 800c010:	20000743 	.word	0x20000743

0800c014 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t len = (uint32_t) *Len; /* Get the size of the packet*/
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60fb      	str	r3, [r7, #12]

	/*Check if there are bytes available*/
	if (len == 0)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <CDC_Receive_FS+0x1a>
	{
		return USBD_FAIL;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e02a      	b.n	800c084 <CDC_Receive_FS+0x70>
	}
	else
	{
		/*Reset the board hook*/
		if (rts_counter>=4 && len==1)
 800c02e:	4b17      	ldr	r3, [pc, #92]	; (800c08c <CDC_Receive_FS+0x78>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b03      	cmp	r3, #3
 800c034:	d90c      	bls.n	800c050 <CDC_Receive_FS+0x3c>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d109      	bne.n	800c050 <CDC_Receive_FS+0x3c>
		{
			    rts_counter = 0;
 800c03c:	4b13      	ldr	r3, [pc, #76]	; (800c08c <CDC_Receive_FS+0x78>)
 800c03e:	2200      	movs	r2, #0
 800c040:	701a      	strb	r2, [r3, #0]
				board_reset_hook(Buf[0]);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f8ae 	bl	800c1a8 <board_reset_hook>
				return USBD_FAIL;
			}
		}

	}
	return USBD_FAIL;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e019      	b.n	800c084 <CDC_Receive_FS+0x70>
			ring_buffer_SIG ret = ring_buffer_write(rx_buf_handle, Buf, len);
 800c050:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <CDC_Receive_FS+0x7c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7f5 fa3d 	bl	80014d8 <ring_buffer_write>
 800c05e:	4603      	mov	r3, r0
 800c060:	72fb      	strb	r3, [r7, #11]
			rts_counter = 0;
 800c062:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <CDC_Receive_FS+0x78>)
 800c064:	2200      	movs	r2, #0
 800c066:	701a      	strb	r2, [r3, #0]
			if (ret == OK)
 800c068:	7afb      	ldrb	r3, [r7, #11]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d104      	bne.n	800c078 <CDC_Receive_FS+0x64>
				data_rdy = true;
 800c06e:	4b09      	ldr	r3, [pc, #36]	; (800c094 <CDC_Receive_FS+0x80>)
 800c070:	2201      	movs	r2, #1
 800c072:	701a      	strb	r2, [r3, #0]
				return (USBD_OK);
 800c074:	2300      	movs	r3, #0
 800c076:	e005      	b.n	800c084 <CDC_Receive_FS+0x70>
			else if (ret == BUSY)
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d101      	bne.n	800c082 <CDC_Receive_FS+0x6e>
				return (USBD_BUSY);
 800c07e:	2301      	movs	r3, #1
 800c080:	e000      	b.n	800c084 <CDC_Receive_FS+0x70>
				return USBD_FAIL;
 800c082:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20000743 	.word	0x20000743
 800c090:	2000073c 	.word	0x2000073c
 800c094:	20000740 	.word	0x20000740

0800c098 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0a8:	4b0d      	ldr	r3, [pc, #52]	; (800c0e0 <CDC_Transmit_FS+0x48>)
 800c0aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e00b      	b.n	800c0d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c0be:	887b      	ldrh	r3, [r7, #2]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4806      	ldr	r0, [pc, #24]	; (800c0e0 <CDC_Transmit_FS+0x48>)
 800c0c6:	f7fe fcea 	bl	800aa9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c0ca:	4805      	ldr	r0, [pc, #20]	; (800c0e0 <CDC_Transmit_FS+0x48>)
 800c0cc:	f7fe fd1e 	bl	800ab0c <USBD_CDC_TransmitPacket>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	2000046c 	.word	0x2000046c

0800c0e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c0f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
	...

0800c108 <CDC_Available_FS>:
  *
  *
  * @retval uint32_t: Number of bytes occupying the ring buffer.
  */
uint32_t CDC_Available_FS()
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
	if (!data_rdy)
 800c10c:	4b08      	ldr	r3, [pc, #32]	; (800c130 <CDC_Available_FS+0x28>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f083 0301 	eor.w	r3, r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <CDC_Available_FS+0x16>
	{
		return 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	e006      	b.n	800c12c <CDC_Available_FS+0x24>
	}
	else
	{
		return (uint32_t)ring_buffer_available_bytes(rx_buf_handle);
 800c11e:	4b05      	ldr	r3, [pc, #20]	; (800c134 <CDC_Available_FS+0x2c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4618      	mov	r0, r3
 800c124:	f7f5 f98a 	bl	800143c <ring_buffer_available_bytes>
 800c128:	4603      	mov	r3, r0
 800c12a:	bf00      	nop
	}
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	20000740 	.word	0x20000740
 800c134:	2000073c 	.word	0x2000073c

0800c138 <CDC_Read_FS>:
  * @param  data: pointer to the user provided buffer
  * @param  size: size of the user provided buffer
  * @retval Ring_Buffer_StatusTypeDef: Result of the operation: RING_BUFFER_OK if all operations are OK else RING_BUFFER_ERROR.
  */
uint8_t CDC_Read_FS(uint8_t* data, uint32_t size)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	if (!data_rdy)
 800c142:	4b16      	ldr	r3, [pc, #88]	; (800c19c <CDC_Read_FS+0x64>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	f083 0301 	eor.w	r3, r3, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <CDC_Read_FS+0x1c>
	{
		return 0;
 800c150:	2300      	movs	r3, #0
 800c152:	e01e      	b.n	800c192 <CDC_Read_FS+0x5a>
	}
	else
	{
		ring_buffer_SIG ret = ring_buffer_read(rx_buf_handle, data, size);
 800c154:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <CDC_Read_FS+0x68>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7f5 fa3b 	bl	80015d8 <ring_buffer_read>
 800c162:	4603      	mov	r3, r0
 800c164:	73fb      	strb	r3, [r7, #15]
		if (ret == BUSY)
 800c166:	7bfb      	ldrb	r3, [r7, #15]
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d101      	bne.n	800c170 <CDC_Read_FS+0x38>
		{
		    return USBD_BUSY;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e010      	b.n	800c192 <CDC_Read_FS+0x5a>
		}
		else if(ret == FAIL)
 800c170:	7bfb      	ldrb	r3, [r7, #15]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <CDC_Read_FS+0x42>
		{
			return USBD_FAIL;
 800c176:	2303      	movs	r3, #3
 800c178:	e00b      	b.n	800c192 <CDC_Read_FS+0x5a>
		}
		else
		{
			if (USBD_CDC_ReceivePacket(&hUsbDeviceFS)!= USBD_OK)
 800c17a:	480a      	ldr	r0, [pc, #40]	; (800c1a4 <CDC_Read_FS+0x6c>)
 800c17c:	f7fe fcf6 	bl	800ab6c <USBD_CDC_ReceivePacket>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <CDC_Read_FS+0x52>
			{
				return USBD_FAIL;
 800c186:	2303      	movs	r3, #3
 800c188:	e003      	b.n	800c192 <CDC_Read_FS+0x5a>
			}
			else
			{
				data_rdy = false;
 800c18a:	4b04      	ldr	r3, [pc, #16]	; (800c19c <CDC_Read_FS+0x64>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	701a      	strb	r2, [r3, #0]
				return USBD_OK;
 800c190:	2300      	movs	r3, #0
			}
		}
	}
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000740 	.word	0x20000740
 800c1a0:	2000073c 	.word	0x2000073c
 800c1a4:	2000046c 	.word	0x2000046c

0800c1a8 <board_reset_hook>:

void board_reset_hook(uint8_t Buf)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	71fb      	strb	r3, [r7, #7]
	if (Buf == (uint8_t)RESET)
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	2b99      	cmp	r3, #153	; 0x99
 800c1b6:	d102      	bne.n	800c1be <board_reset_hook+0x16>
	{
		is_reset = true;
 800c1b8:	4b04      	ldr	r3, [pc, #16]	; (800c1cc <board_reset_hook+0x24>)
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	701a      	strb	r2, [r3, #0]
	}
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000742 	.word	0x20000742

0800c1d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	6039      	str	r1, [r7, #0]
 800c1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2212      	movs	r2, #18
 800c1e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1e2:	4b03      	ldr	r3, [pc, #12]	; (800c1f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	2000016c 	.word	0x2000016c

0800c1f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	6039      	str	r1, [r7, #0]
 800c1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	2204      	movs	r2, #4
 800c204:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c206:	4b03      	ldr	r3, [pc, #12]	; (800c214 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	20000180 	.word	0x20000180

0800c218 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	6039      	str	r1, [r7, #0]
 800c222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d105      	bne.n	800c236 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	4907      	ldr	r1, [pc, #28]	; (800c24c <USBD_FS_ProductStrDescriptor+0x34>)
 800c22e:	4808      	ldr	r0, [pc, #32]	; (800c250 <USBD_FS_ProductStrDescriptor+0x38>)
 800c230:	f7ff fd0f 	bl	800bc52 <USBD_GetString>
 800c234:	e004      	b.n	800c240 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	4904      	ldr	r1, [pc, #16]	; (800c24c <USBD_FS_ProductStrDescriptor+0x34>)
 800c23a:	4805      	ldr	r0, [pc, #20]	; (800c250 <USBD_FS_ProductStrDescriptor+0x38>)
 800c23c:	f7ff fd09 	bl	800bc52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c240:	4b02      	ldr	r3, [pc, #8]	; (800c24c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	200017c4 	.word	0x200017c4
 800c250:	0800cee0 	.word	0x0800cee0

0800c254 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	4603      	mov	r3, r0
 800c25c:	6039      	str	r1, [r7, #0]
 800c25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	4904      	ldr	r1, [pc, #16]	; (800c274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c264:	4804      	ldr	r0, [pc, #16]	; (800c278 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c266:	f7ff fcf4 	bl	800bc52 <USBD_GetString>
  return USBD_StrDesc;
 800c26a:	4b02      	ldr	r3, [pc, #8]	; (800c274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	200017c4 	.word	0x200017c4
 800c278:	0800cef8 	.word	0x0800cef8

0800c27c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	6039      	str	r1, [r7, #0]
 800c286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	221a      	movs	r2, #26
 800c28c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c28e:	f000 f843 	bl	800c318 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c292:	4b02      	ldr	r3, [pc, #8]	; (800c29c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20000184 	.word	0x20000184

0800c2a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	6039      	str	r1, [r7, #0]
 800c2aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	4907      	ldr	r1, [pc, #28]	; (800c2d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2b6:	4808      	ldr	r0, [pc, #32]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2b8:	f7ff fccb 	bl	800bc52 <USBD_GetString>
 800c2bc:	e004      	b.n	800c2c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	4904      	ldr	r1, [pc, #16]	; (800c2d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2c2:	4805      	ldr	r0, [pc, #20]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2c4:	f7ff fcc5 	bl	800bc52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2c8:	4b02      	ldr	r3, [pc, #8]	; (800c2d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	200017c4 	.word	0x200017c4
 800c2d8:	0800cf0c 	.word	0x0800cf0c

0800c2dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	6039      	str	r1, [r7, #0]
 800c2e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d105      	bne.n	800c2fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	4907      	ldr	r1, [pc, #28]	; (800c310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2f2:	4808      	ldr	r0, [pc, #32]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2f4:	f7ff fcad 	bl	800bc52 <USBD_GetString>
 800c2f8:	e004      	b.n	800c304 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	4904      	ldr	r1, [pc, #16]	; (800c310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2fe:	4805      	ldr	r0, [pc, #20]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c300:	f7ff fca7 	bl	800bc52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c304:	4b02      	ldr	r3, [pc, #8]	; (800c310 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c306:	4618      	mov	r0, r3
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	200017c4 	.word	0x200017c4
 800c314:	0800cf18 	.word	0x0800cf18

0800c318 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c31e:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <Get_SerialNum+0x44>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c324:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <Get_SerialNum+0x48>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c32a:	4b0e      	ldr	r3, [pc, #56]	; (800c364 <Get_SerialNum+0x4c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4413      	add	r3, r2
 800c336:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d009      	beq.n	800c352 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c33e:	2208      	movs	r2, #8
 800c340:	4909      	ldr	r1, [pc, #36]	; (800c368 <Get_SerialNum+0x50>)
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 f814 	bl	800c370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c348:	2204      	movs	r2, #4
 800c34a:	4908      	ldr	r1, [pc, #32]	; (800c36c <Get_SerialNum+0x54>)
 800c34c:	68b8      	ldr	r0, [r7, #8]
 800c34e:	f000 f80f 	bl	800c370 <IntToUnicode>
  }
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	1fff7590 	.word	0x1fff7590
 800c360:	1fff7594 	.word	0x1fff7594
 800c364:	1fff7598 	.word	0x1fff7598
 800c368:	20000186 	.word	0x20000186
 800c36c:	20000196 	.word	0x20000196

0800c370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c370:	b480      	push	{r7}
 800c372:	b087      	sub	sp, #28
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c382:	2300      	movs	r3, #0
 800c384:	75fb      	strb	r3, [r7, #23]
 800c386:	e027      	b.n	800c3d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	0f1b      	lsrs	r3, r3, #28
 800c38c:	2b09      	cmp	r3, #9
 800c38e:	d80b      	bhi.n	800c3a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	0f1b      	lsrs	r3, r3, #28
 800c394:	b2da      	uxtb	r2, r3
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4619      	mov	r1, r3
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	440b      	add	r3, r1
 800c3a0:	3230      	adds	r2, #48	; 0x30
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e00a      	b.n	800c3be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	0f1b      	lsrs	r3, r3, #28
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	440b      	add	r3, r1
 800c3b8:	3237      	adds	r2, #55	; 0x37
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	011b      	lsls	r3, r3, #4
 800c3c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	75fb      	strb	r3, [r7, #23]
 800c3d8:	7dfa      	ldrb	r2, [r7, #23]
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d3d3      	bcc.n	800c388 <IntToUnicode+0x18>
  }
}
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b0a4      	sub	sp, #144	; 0x90
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	605a      	str	r2, [r3, #4]
 800c402:	609a      	str	r2, [r3, #8]
 800c404:	60da      	str	r2, [r3, #12]
 800c406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c408:	f107 0314 	add.w	r3, r7, #20
 800c40c:	2268      	movs	r2, #104	; 0x68
 800c40e:	2100      	movs	r1, #0
 800c410:	4618      	mov	r0, r3
 800c412:	f000 fc3d 	bl	800cc90 <memset>
  if(pcdHandle->Instance==USB)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a26      	ldr	r2, [pc, #152]	; (800c4b4 <HAL_PCD_MspInit+0xc4>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d144      	bne.n	800c4aa <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c424:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c426:	2300      	movs	r3, #0
 800c428:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c42a:	f107 0314 	add.w	r3, r7, #20
 800c42e:	4618      	mov	r0, r3
 800c430:	f7f9 fdd2 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c43a:	f7f4 ffbd 	bl	80013b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c43e:	4b1e      	ldr	r3, [pc, #120]	; (800c4b8 <HAL_PCD_MspInit+0xc8>)
 800c440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c442:	4a1d      	ldr	r2, [pc, #116]	; (800c4b8 <HAL_PCD_MspInit+0xc8>)
 800c444:	f043 0301 	orr.w	r3, r3, #1
 800c448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c44a:	4b1b      	ldr	r3, [pc, #108]	; (800c4b8 <HAL_PCD_MspInit+0xc8>)
 800c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44e:	f003 0301 	and.w	r3, r3, #1
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c456:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c45a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c45c:	2302      	movs	r3, #2
 800c45e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c462:	2300      	movs	r3, #0
 800c464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c468:	2303      	movs	r3, #3
 800c46a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800c46e:	230a      	movs	r3, #10
 800c470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c478:	4619      	mov	r1, r3
 800c47a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c47e:	f7f6 fe09 	bl	8003094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c482:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <HAL_PCD_MspInit+0xc8>)
 800c484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c486:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <HAL_PCD_MspInit+0xc8>)
 800c488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c48c:	6593      	str	r3, [r2, #88]	; 0x58
 800c48e:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <HAL_PCD_MspInit+0xc8>)
 800c490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c492:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c49a:	2200      	movs	r2, #0
 800c49c:	2100      	movs	r1, #0
 800c49e:	2043      	movs	r0, #67	; 0x43
 800c4a0:	f7f5 fdbd 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c4a4:	2043      	movs	r0, #67	; 0x43
 800c4a6:	f7f5 fdd6 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c4aa:	bf00      	nop
 800c4ac:	3790      	adds	r7, #144	; 0x90
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	40006800 	.word	0x40006800
 800c4b8:	40021000 	.word	0x40021000

0800c4bc <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a0a      	ldr	r2, [pc, #40]	; (800c4f4 <HAL_PCD_MspDeInit+0x38>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d10e      	bne.n	800c4ec <HAL_PCD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 800c4ce:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <HAL_PCD_MspDeInit+0x3c>)
 800c4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <HAL_PCD_MspDeInit+0x3c>)
 800c4d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c4d8:	6593      	str	r3, [r2, #88]	; 0x58

    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800c4da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c4de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4e2:	f7f6 ff51 	bl	8003388 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_IRQn);
 800c4e6:	2043      	movs	r0, #67	; 0x43
 800c4e8:	f7f5 fdc3 	bl	8002072 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 800c4ec:	bf00      	nop
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	40006800 	.word	0x40006800
 800c4f8:	40021000 	.word	0x40021000

0800c4fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7fe fc2a 	bl	800ad6c <USBD_LL_SetupStage>
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c532:	78fa      	ldrb	r2, [r7, #3]
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	440b      	add	r3, r1
 800c540:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	78fb      	ldrb	r3, [r7, #3]
 800c548:	4619      	mov	r1, r3
 800c54a:	f7fe fc64 	bl	800ae16 <USBD_LL_DataOutStage>
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	440b      	add	r3, r1
 800c576:	3340      	adds	r3, #64	; 0x40
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	4619      	mov	r1, r3
 800c57e:	f7fe fcad 	bl	800aedc <USBD_LL_DataInStage>
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fdc1 	bl	800b120 <USBD_LL_SOF>
}
 800c59e:	bf00      	nop
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d001      	beq.n	800c5be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c5ba:	f7f4 fefd 	bl	80013b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c5c4:	7bfa      	ldrb	r2, [r7, #15]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fd6b 	bl	800b0a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe fd17 	bl	800b008 <USBD_LL_Reset>
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fe fd66 	bl	800b0c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d005      	beq.n	800c60c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c600:	4b04      	ldr	r3, [pc, #16]	; (800c614 <HAL_PCD_SuspendCallback+0x30>)
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	4a03      	ldr	r2, [pc, #12]	; (800c614 <HAL_PCD_SuspendCallback+0x30>)
 800c606:	f043 0306 	orr.w	r3, r3, #6
 800c60a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	e000ed00 	.word	0xe000ed00

0800c618 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d007      	beq.n	800c638 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c628:	4b08      	ldr	r3, [pc, #32]	; (800c64c <HAL_PCD_ResumeCallback+0x34>)
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	4a07      	ldr	r2, [pc, #28]	; (800c64c <HAL_PCD_ResumeCallback+0x34>)
 800c62e:	f023 0306 	bic.w	r3, r3, #6
 800c632:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c634:	f000 fae4 	bl	800cc00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fe fd56 	bl	800b0f0 <USBD_LL_Resume>
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	e000ed00 	.word	0xe000ed00

0800c650 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c658:	f7f8 fdf0 	bl	800523c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c65c:	4a2b      	ldr	r2, [pc, #172]	; (800c70c <USBD_LL_Init+0xbc>)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a29      	ldr	r2, [pc, #164]	; (800c70c <USBD_LL_Init+0xbc>)
 800c668:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c66c:	4b27      	ldr	r3, [pc, #156]	; (800c70c <USBD_LL_Init+0xbc>)
 800c66e:	4a28      	ldr	r2, [pc, #160]	; (800c710 <USBD_LL_Init+0xc0>)
 800c670:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c672:	4b26      	ldr	r3, [pc, #152]	; (800c70c <USBD_LL_Init+0xbc>)
 800c674:	2208      	movs	r2, #8
 800c676:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c678:	4b24      	ldr	r3, [pc, #144]	; (800c70c <USBD_LL_Init+0xbc>)
 800c67a:	2202      	movs	r2, #2
 800c67c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c67e:	4b23      	ldr	r3, [pc, #140]	; (800c70c <USBD_LL_Init+0xbc>)
 800c680:	2202      	movs	r2, #2
 800c682:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c684:	4b21      	ldr	r3, [pc, #132]	; (800c70c <USBD_LL_Init+0xbc>)
 800c686:	2200      	movs	r2, #0
 800c688:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c68a:	4b20      	ldr	r3, [pc, #128]	; (800c70c <USBD_LL_Init+0xbc>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c690:	4b1e      	ldr	r3, [pc, #120]	; (800c70c <USBD_LL_Init+0xbc>)
 800c692:	2200      	movs	r2, #0
 800c694:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c696:	4b1d      	ldr	r3, [pc, #116]	; (800c70c <USBD_LL_Init+0xbc>)
 800c698:	2200      	movs	r2, #0
 800c69a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c69c:	481b      	ldr	r0, [pc, #108]	; (800c70c <USBD_LL_Init+0xbc>)
 800c69e:	f7f6 ff97 	bl	80035d0 <HAL_PCD_Init>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c6a8:	f7f4 fe86 	bl	80013b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6b2:	2318      	movs	r3, #24
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	f7f8 fce1 	bl	800507e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6c2:	2358      	movs	r3, #88	; 0x58
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	2180      	movs	r1, #128	; 0x80
 800c6c8:	f7f8 fcd9 	bl	800507e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6d2:	23c0      	movs	r3, #192	; 0xc0
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	2181      	movs	r1, #129	; 0x81
 800c6d8:	f7f8 fcd1 	bl	800507e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	f7f8 fcc8 	bl	800507e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	2182      	movs	r1, #130	; 0x82
 800c6fc:	f7f8 fcbf 	bl	800507e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	200019c4 	.word	0x200019c4
 800c710:	40006800 	.word	0x40006800

0800c714 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f7 f867 	bl	80037fe <HAL_PCD_DeInit>
 800c730:	4603      	mov	r3, r0
 800c732:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	2b03      	cmp	r3, #3
 800c738:	d816      	bhi.n	800c768 <USBD_LL_DeInit+0x54>
 800c73a:	a201      	add	r2, pc, #4	; (adr r2, 800c740 <USBD_LL_DeInit+0x2c>)
 800c73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c740:	0800c751 	.word	0x0800c751
 800c744:	0800c757 	.word	0x0800c757
 800c748:	0800c75d 	.word	0x0800c75d
 800c74c:	0800c763 	.word	0x0800c763
    case HAL_OK :
      usb_status = USBD_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	73fb      	strb	r3, [r7, #15]
    break;
 800c754:	e00b      	b.n	800c76e <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c756:	2303      	movs	r3, #3
 800c758:	73fb      	strb	r3, [r7, #15]
    break;
 800c75a:	e008      	b.n	800c76e <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
    break;
 800c760:	e005      	b.n	800c76e <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c762:	2303      	movs	r3, #3
 800c764:	73fb      	strb	r3, [r7, #15]
    break;
 800c766:	e002      	b.n	800c76e <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c768:	2303      	movs	r3, #3
 800c76a:	73fb      	strb	r3, [r7, #15]
    break;
 800c76c:	bf00      	nop
  }
  return usb_status;
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c78e:	4618      	mov	r0, r3
 800c790:	f7f7 f858 	bl	8003844 <HAL_PCD_Start>
 800c794:	4603      	mov	r3, r0
 800c796:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d816      	bhi.n	800c7cc <USBD_LL_Start+0x54>
 800c79e:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <USBD_LL_Start+0x2c>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c7b5 	.word	0x0800c7b5
 800c7a8:	0800c7bb 	.word	0x0800c7bb
 800c7ac:	0800c7c1 	.word	0x0800c7c1
 800c7b0:	0800c7c7 	.word	0x0800c7c7
    case HAL_OK :
      usb_status = USBD_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b8:	e00b      	b.n	800c7d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c7be:	e008      	b.n	800c7d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c4:	e005      	b.n	800c7d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ca:	e002      	b.n	800c7d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d0:	bf00      	nop
  }
  return usb_status;
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f7 f848 	bl	8003888 <HAL_PCD_Stop>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c7fc:	7bbb      	ldrb	r3, [r7, #14]
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d816      	bhi.n	800c830 <USBD_LL_Stop+0x54>
 800c802:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <USBD_LL_Stop+0x2c>)
 800c804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c808:	0800c819 	.word	0x0800c819
 800c80c:	0800c81f 	.word	0x0800c81f
 800c810:	0800c825 	.word	0x0800c825
 800c814:	0800c82b 	.word	0x0800c82b
    case HAL_OK :
      usb_status = USBD_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	73fb      	strb	r3, [r7, #15]
    break;
 800c81c:	e00b      	b.n	800c836 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c81e:	2303      	movs	r3, #3
 800c820:	73fb      	strb	r3, [r7, #15]
    break;
 800c822:	e008      	b.n	800c836 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c824:	2301      	movs	r3, #1
 800c826:	73fb      	strb	r3, [r7, #15]
    break;
 800c828:	e005      	b.n	800c836 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c82a:	2303      	movs	r3, #3
 800c82c:	73fb      	strb	r3, [r7, #15]
    break;
 800c82e:	e002      	b.n	800c836 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c830:	2303      	movs	r3, #3
 800c832:	73fb      	strb	r3, [r7, #15]
    break;
 800c834:	bf00      	nop
  }
  return usb_status;
 800c836:	7bfb      	ldrb	r3, [r7, #15]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	4608      	mov	r0, r1
 800c84a:	4611      	mov	r1, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	4603      	mov	r3, r0
 800c850:	70fb      	strb	r3, [r7, #3]
 800c852:	460b      	mov	r3, r1
 800c854:	70bb      	strb	r3, [r7, #2]
 800c856:	4613      	mov	r3, r2
 800c858:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c85e:	2300      	movs	r3, #0
 800c860:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c868:	78bb      	ldrb	r3, [r7, #2]
 800c86a:	883a      	ldrh	r2, [r7, #0]
 800c86c:	78f9      	ldrb	r1, [r7, #3]
 800c86e:	f7f7 f979 	bl	8003b64 <HAL_PCD_EP_Open>
 800c872:	4603      	mov	r3, r0
 800c874:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	2b03      	cmp	r3, #3
 800c87a:	d817      	bhi.n	800c8ac <USBD_LL_OpenEP+0x6c>
 800c87c:	a201      	add	r2, pc, #4	; (adr r2, 800c884 <USBD_LL_OpenEP+0x44>)
 800c87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c882:	bf00      	nop
 800c884:	0800c895 	.word	0x0800c895
 800c888:	0800c89b 	.word	0x0800c89b
 800c88c:	0800c8a1 	.word	0x0800c8a1
 800c890:	0800c8a7 	.word	0x0800c8a7
    case HAL_OK :
      usb_status = USBD_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
    break;
 800c898:	e00b      	b.n	800c8b2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c89a:	2303      	movs	r3, #3
 800c89c:	73fb      	strb	r3, [r7, #15]
    break;
 800c89e:	e008      	b.n	800c8b2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a4:	e005      	b.n	800c8b2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8aa:	e002      	b.n	800c8b2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b0:	bf00      	nop
  }
  return usb_status;
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8d6:	78fa      	ldrb	r2, [r7, #3]
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7f7 f9aa 	bl	8003c34 <HAL_PCD_EP_Close>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c8e4:	7bbb      	ldrb	r3, [r7, #14]
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d816      	bhi.n	800c918 <USBD_LL_CloseEP+0x5c>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <USBD_LL_CloseEP+0x34>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c901 	.word	0x0800c901
 800c8f4:	0800c907 	.word	0x0800c907
 800c8f8:	0800c90d 	.word	0x0800c90d
 800c8fc:	0800c913 	.word	0x0800c913
    case HAL_OK :
      usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
    break;
 800c904:	e00b      	b.n	800c91e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c906:	2303      	movs	r3, #3
 800c908:	73fb      	strb	r3, [r7, #15]
    break;
 800c90a:	e008      	b.n	800c91e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c90c:	2301      	movs	r3, #1
 800c90e:	73fb      	strb	r3, [r7, #15]
    break;
 800c910:	e005      	b.n	800c91e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c912:	2303      	movs	r3, #3
 800c914:	73fb      	strb	r3, [r7, #15]
    break;
 800c916:	e002      	b.n	800c91e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c918:	2303      	movs	r3, #3
 800c91a:	73fb      	strb	r3, [r7, #15]
    break;
 800c91c:	bf00      	nop
  }
  return usb_status;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c942:	78fa      	ldrb	r2, [r7, #3]
 800c944:	4611      	mov	r1, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7f7 fa58 	bl	8003dfc <HAL_PCD_EP_SetStall>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	2b03      	cmp	r3, #3
 800c954:	d816      	bhi.n	800c984 <USBD_LL_StallEP+0x5c>
 800c956:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <USBD_LL_StallEP+0x34>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c96d 	.word	0x0800c96d
 800c960:	0800c973 	.word	0x0800c973
 800c964:	0800c979 	.word	0x0800c979
 800c968:	0800c97f 	.word	0x0800c97f
    case HAL_OK :
      usb_status = USBD_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
    break;
 800c970:	e00b      	b.n	800c98a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c972:	2303      	movs	r3, #3
 800c974:	73fb      	strb	r3, [r7, #15]
    break;
 800c976:	e008      	b.n	800c98a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c978:	2301      	movs	r3, #1
 800c97a:	73fb      	strb	r3, [r7, #15]
    break;
 800c97c:	e005      	b.n	800c98a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c97e:	2303      	movs	r3, #3
 800c980:	73fb      	strb	r3, [r7, #15]
    break;
 800c982:	e002      	b.n	800c98a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c984:	2303      	movs	r3, #3
 800c986:	73fb      	strb	r3, [r7, #15]
    break;
 800c988:	bf00      	nop
  }
  return usb_status;
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9ae:	78fa      	ldrb	r2, [r7, #3]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f7 fa84 	bl	8003ec0 <HAL_PCD_EP_ClrStall>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d816      	bhi.n	800c9f0 <USBD_LL_ClearStallEP+0x5c>
 800c9c2:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <USBD_LL_ClearStallEP+0x34>)
 800c9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c8:	0800c9d9 	.word	0x0800c9d9
 800c9cc:	0800c9df 	.word	0x0800c9df
 800c9d0:	0800c9e5 	.word	0x0800c9e5
 800c9d4:	0800c9eb 	.word	0x0800c9eb
    case HAL_OK :
      usb_status = USBD_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73fb      	strb	r3, [r7, #15]
    break;
 800c9dc:	e00b      	b.n	800c9f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e2:	e008      	b.n	800c9f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e8:	e005      	b.n	800c9f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ee:	e002      	b.n	800c9f6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9f4:	bf00      	nop
  }
  return usb_status;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	da0c      	bge.n	800ca36 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca22:	68f9      	ldr	r1, [r7, #12]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	440b      	add	r3, r1
 800ca30:	3306      	adds	r3, #6
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	e00b      	b.n	800ca4e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca36:	78fb      	ldrb	r3, [r7, #3]
 800ca38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca3c:	68f9      	ldr	r1, [r7, #12]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	440b      	add	r3, r1
 800ca48:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800ca4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
	...

0800ca5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca76:	78fa      	ldrb	r2, [r7, #3]
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7f7 f84d 	bl	8003b1a <HAL_PCD_SetAddress>
 800ca80:	4603      	mov	r3, r0
 800ca82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca84:	7bbb      	ldrb	r3, [r7, #14]
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d816      	bhi.n	800cab8 <USBD_LL_SetUSBAddress+0x5c>
 800ca8a:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <USBD_LL_SetUSBAddress+0x34>)
 800ca8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca90:	0800caa1 	.word	0x0800caa1
 800ca94:	0800caa7 	.word	0x0800caa7
 800ca98:	0800caad 	.word	0x0800caad
 800ca9c:	0800cab3 	.word	0x0800cab3
    case HAL_OK :
      usb_status = USBD_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]
    break;
 800caa4:	e00b      	b.n	800cabe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caa6:	2303      	movs	r3, #3
 800caa8:	73fb      	strb	r3, [r7, #15]
    break;
 800caaa:	e008      	b.n	800cabe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800caac:	2301      	movs	r3, #1
 800caae:	73fb      	strb	r3, [r7, #15]
    break;
 800cab0:	e005      	b.n	800cabe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cab2:	2303      	movs	r3, #3
 800cab4:	73fb      	strb	r3, [r7, #15]
    break;
 800cab6:	e002      	b.n	800cabe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cab8:	2303      	movs	r3, #3
 800caba:	73fb      	strb	r3, [r7, #15]
    break;
 800cabc:	bf00      	nop
  }
  return usb_status;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	607a      	str	r2, [r7, #4]
 800cad2:	603b      	str	r3, [r7, #0]
 800cad4:	460b      	mov	r3, r1
 800cad6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cae6:	7af9      	ldrb	r1, [r7, #11]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	f7f7 f942 	bl	8003d74 <HAL_PCD_EP_Transmit>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800caf4:	7dbb      	ldrb	r3, [r7, #22]
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d816      	bhi.n	800cb28 <USBD_LL_Transmit+0x60>
 800cafa:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <USBD_LL_Transmit+0x38>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb11 	.word	0x0800cb11
 800cb04:	0800cb17 	.word	0x0800cb17
 800cb08:	0800cb1d 	.word	0x0800cb1d
 800cb0c:	0800cb23 	.word	0x0800cb23
    case HAL_OK :
      usb_status = USBD_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	75fb      	strb	r3, [r7, #23]
    break;
 800cb14:	e00b      	b.n	800cb2e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb16:	2303      	movs	r3, #3
 800cb18:	75fb      	strb	r3, [r7, #23]
    break;
 800cb1a:	e008      	b.n	800cb2e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	75fb      	strb	r3, [r7, #23]
    break;
 800cb20:	e005      	b.n	800cb2e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb22:	2303      	movs	r3, #3
 800cb24:	75fb      	strb	r3, [r7, #23]
    break;
 800cb26:	e002      	b.n	800cb2e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	75fb      	strb	r3, [r7, #23]
    break;
 800cb2c:	bf00      	nop
  }
  return usb_status;
 800cb2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	607a      	str	r2, [r7, #4]
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	460b      	mov	r3, r1
 800cb46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb56:	7af9      	ldrb	r1, [r7, #11]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	f7f7 f8b4 	bl	8003cc8 <HAL_PCD_EP_Receive>
 800cb60:	4603      	mov	r3, r0
 800cb62:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cb64:	7dbb      	ldrb	r3, [r7, #22]
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	d816      	bhi.n	800cb98 <USBD_LL_PrepareReceive+0x60>
 800cb6a:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <USBD_LL_PrepareReceive+0x38>)
 800cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb70:	0800cb81 	.word	0x0800cb81
 800cb74:	0800cb87 	.word	0x0800cb87
 800cb78:	0800cb8d 	.word	0x0800cb8d
 800cb7c:	0800cb93 	.word	0x0800cb93
    case HAL_OK :
      usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	75fb      	strb	r3, [r7, #23]
    break;
 800cb84:	e00b      	b.n	800cb9e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb86:	2303      	movs	r3, #3
 800cb88:	75fb      	strb	r3, [r7, #23]
    break;
 800cb8a:	e008      	b.n	800cb9e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	75fb      	strb	r3, [r7, #23]
    break;
 800cb90:	e005      	b.n	800cb9e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb92:	2303      	movs	r3, #3
 800cb94:	75fb      	strb	r3, [r7, #23]
    break;
 800cb96:	e002      	b.n	800cb9e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	75fb      	strb	r3, [r7, #23]
    break;
 800cb9c:	bf00      	nop
  }
  return usb_status;
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbba:	78fa      	ldrb	r2, [r7, #3]
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7f7 f8c0 	bl	8003d44 <HAL_PCD_EP_GetRxCount>
 800cbc4:	4603      	mov	r3, r0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
	...

0800cbd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cbd8:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <USBD_static_malloc+0x18>)
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	20001cbc 	.word	0x20001cbc

0800cbec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]

}
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cc04:	f7f4 f9ca 	bl	8000f9c <SystemClock_Config>
}
 800cc08:	bf00      	nop
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <calloc>:
 800cc0c:	4b02      	ldr	r3, [pc, #8]	; (800cc18 <calloc+0xc>)
 800cc0e:	460a      	mov	r2, r1
 800cc10:	4601      	mov	r1, r0
 800cc12:	6818      	ldr	r0, [r3, #0]
 800cc14:	f000 b844 	b.w	800cca0 <_calloc_r>
 800cc18:	200001a0 	.word	0x200001a0

0800cc1c <__errno>:
 800cc1c:	4b01      	ldr	r3, [pc, #4]	; (800cc24 <__errno+0x8>)
 800cc1e:	6818      	ldr	r0, [r3, #0]
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	200001a0 	.word	0x200001a0

0800cc28 <__libc_init_array>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	4d0d      	ldr	r5, [pc, #52]	; (800cc60 <__libc_init_array+0x38>)
 800cc2c:	4c0d      	ldr	r4, [pc, #52]	; (800cc64 <__libc_init_array+0x3c>)
 800cc2e:	1b64      	subs	r4, r4, r5
 800cc30:	10a4      	asrs	r4, r4, #2
 800cc32:	2600      	movs	r6, #0
 800cc34:	42a6      	cmp	r6, r4
 800cc36:	d109      	bne.n	800cc4c <__libc_init_array+0x24>
 800cc38:	4d0b      	ldr	r5, [pc, #44]	; (800cc68 <__libc_init_array+0x40>)
 800cc3a:	4c0c      	ldr	r4, [pc, #48]	; (800cc6c <__libc_init_array+0x44>)
 800cc3c:	f000 f944 	bl	800cec8 <_init>
 800cc40:	1b64      	subs	r4, r4, r5
 800cc42:	10a4      	asrs	r4, r4, #2
 800cc44:	2600      	movs	r6, #0
 800cc46:	42a6      	cmp	r6, r4
 800cc48:	d105      	bne.n	800cc56 <__libc_init_array+0x2e>
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc50:	4798      	blx	r3
 800cc52:	3601      	adds	r6, #1
 800cc54:	e7ee      	b.n	800cc34 <__libc_init_array+0xc>
 800cc56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc5a:	4798      	blx	r3
 800cc5c:	3601      	adds	r6, #1
 800cc5e:	e7f2      	b.n	800cc46 <__libc_init_array+0x1e>
 800cc60:	0800cf78 	.word	0x0800cf78
 800cc64:	0800cf78 	.word	0x0800cf78
 800cc68:	0800cf78 	.word	0x0800cf78
 800cc6c:	0800cf7c 	.word	0x0800cf7c

0800cc70 <malloc>:
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <malloc+0xc>)
 800cc72:	4601      	mov	r1, r0
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	f000 b895 	b.w	800cda4 <_malloc_r>
 800cc7a:	bf00      	nop
 800cc7c:	200001a0 	.word	0x200001a0

0800cc80 <free>:
 800cc80:	4b02      	ldr	r3, [pc, #8]	; (800cc8c <free+0xc>)
 800cc82:	4601      	mov	r1, r0
 800cc84:	6818      	ldr	r0, [r3, #0]
 800cc86:	f000 b821 	b.w	800cccc <_free_r>
 800cc8a:	bf00      	nop
 800cc8c:	200001a0 	.word	0x200001a0

0800cc90 <memset>:
 800cc90:	4402      	add	r2, r0
 800cc92:	4603      	mov	r3, r0
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d100      	bne.n	800cc9a <memset+0xa>
 800cc98:	4770      	bx	lr
 800cc9a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc9e:	e7f9      	b.n	800cc94 <memset+0x4>

0800cca0 <_calloc_r>:
 800cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cca2:	fba1 2402 	umull	r2, r4, r1, r2
 800cca6:	b94c      	cbnz	r4, 800ccbc <_calloc_r+0x1c>
 800cca8:	4611      	mov	r1, r2
 800ccaa:	9201      	str	r2, [sp, #4]
 800ccac:	f000 f87a 	bl	800cda4 <_malloc_r>
 800ccb0:	9a01      	ldr	r2, [sp, #4]
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	b930      	cbnz	r0, 800ccc4 <_calloc_r+0x24>
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	b003      	add	sp, #12
 800ccba:	bd30      	pop	{r4, r5, pc}
 800ccbc:	220c      	movs	r2, #12
 800ccbe:	6002      	str	r2, [r0, #0]
 800ccc0:	2500      	movs	r5, #0
 800ccc2:	e7f8      	b.n	800ccb6 <_calloc_r+0x16>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	f7ff ffe3 	bl	800cc90 <memset>
 800ccca:	e7f4      	b.n	800ccb6 <_calloc_r+0x16>

0800cccc <_free_r>:
 800cccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d044      	beq.n	800cd5c <_free_r+0x90>
 800ccd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd6:	9001      	str	r0, [sp, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f1a1 0404 	sub.w	r4, r1, #4
 800ccde:	bfb8      	it	lt
 800cce0:	18e4      	addlt	r4, r4, r3
 800cce2:	f000 f8e3 	bl	800ceac <__malloc_lock>
 800cce6:	4a1e      	ldr	r2, [pc, #120]	; (800cd60 <_free_r+0x94>)
 800cce8:	9801      	ldr	r0, [sp, #4]
 800ccea:	6813      	ldr	r3, [r2, #0]
 800ccec:	b933      	cbnz	r3, 800ccfc <_free_r+0x30>
 800ccee:	6063      	str	r3, [r4, #4]
 800ccf0:	6014      	str	r4, [r2, #0]
 800ccf2:	b003      	add	sp, #12
 800ccf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf8:	f000 b8de 	b.w	800ceb8 <__malloc_unlock>
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	d908      	bls.n	800cd12 <_free_r+0x46>
 800cd00:	6825      	ldr	r5, [r4, #0]
 800cd02:	1961      	adds	r1, r4, r5
 800cd04:	428b      	cmp	r3, r1
 800cd06:	bf01      	itttt	eq
 800cd08:	6819      	ldreq	r1, [r3, #0]
 800cd0a:	685b      	ldreq	r3, [r3, #4]
 800cd0c:	1949      	addeq	r1, r1, r5
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	e7ed      	b.n	800ccee <_free_r+0x22>
 800cd12:	461a      	mov	r2, r3
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	b10b      	cbz	r3, 800cd1c <_free_r+0x50>
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d9fa      	bls.n	800cd12 <_free_r+0x46>
 800cd1c:	6811      	ldr	r1, [r2, #0]
 800cd1e:	1855      	adds	r5, r2, r1
 800cd20:	42a5      	cmp	r5, r4
 800cd22:	d10b      	bne.n	800cd3c <_free_r+0x70>
 800cd24:	6824      	ldr	r4, [r4, #0]
 800cd26:	4421      	add	r1, r4
 800cd28:	1854      	adds	r4, r2, r1
 800cd2a:	42a3      	cmp	r3, r4
 800cd2c:	6011      	str	r1, [r2, #0]
 800cd2e:	d1e0      	bne.n	800ccf2 <_free_r+0x26>
 800cd30:	681c      	ldr	r4, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	6053      	str	r3, [r2, #4]
 800cd36:	4421      	add	r1, r4
 800cd38:	6011      	str	r1, [r2, #0]
 800cd3a:	e7da      	b.n	800ccf2 <_free_r+0x26>
 800cd3c:	d902      	bls.n	800cd44 <_free_r+0x78>
 800cd3e:	230c      	movs	r3, #12
 800cd40:	6003      	str	r3, [r0, #0]
 800cd42:	e7d6      	b.n	800ccf2 <_free_r+0x26>
 800cd44:	6825      	ldr	r5, [r4, #0]
 800cd46:	1961      	adds	r1, r4, r5
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	bf04      	itt	eq
 800cd4c:	6819      	ldreq	r1, [r3, #0]
 800cd4e:	685b      	ldreq	r3, [r3, #4]
 800cd50:	6063      	str	r3, [r4, #4]
 800cd52:	bf04      	itt	eq
 800cd54:	1949      	addeq	r1, r1, r5
 800cd56:	6021      	streq	r1, [r4, #0]
 800cd58:	6054      	str	r4, [r2, #4]
 800cd5a:	e7ca      	b.n	800ccf2 <_free_r+0x26>
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bd30      	pop	{r4, r5, pc}
 800cd60:	20001edc 	.word	0x20001edc

0800cd64 <sbrk_aligned>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	4e0e      	ldr	r6, [pc, #56]	; (800cda0 <sbrk_aligned+0x3c>)
 800cd68:	460c      	mov	r4, r1
 800cd6a:	6831      	ldr	r1, [r6, #0]
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	b911      	cbnz	r1, 800cd76 <sbrk_aligned+0x12>
 800cd70:	f000 f88c 	bl	800ce8c <_sbrk_r>
 800cd74:	6030      	str	r0, [r6, #0]
 800cd76:	4621      	mov	r1, r4
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f000 f887 	bl	800ce8c <_sbrk_r>
 800cd7e:	1c43      	adds	r3, r0, #1
 800cd80:	d00a      	beq.n	800cd98 <sbrk_aligned+0x34>
 800cd82:	1cc4      	adds	r4, r0, #3
 800cd84:	f024 0403 	bic.w	r4, r4, #3
 800cd88:	42a0      	cmp	r0, r4
 800cd8a:	d007      	beq.n	800cd9c <sbrk_aligned+0x38>
 800cd8c:	1a21      	subs	r1, r4, r0
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 f87c 	bl	800ce8c <_sbrk_r>
 800cd94:	3001      	adds	r0, #1
 800cd96:	d101      	bne.n	800cd9c <sbrk_aligned+0x38>
 800cd98:	f04f 34ff 	mov.w	r4, #4294967295
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	20001ee0 	.word	0x20001ee0

0800cda4 <_malloc_r>:
 800cda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda8:	1ccd      	adds	r5, r1, #3
 800cdaa:	f025 0503 	bic.w	r5, r5, #3
 800cdae:	3508      	adds	r5, #8
 800cdb0:	2d0c      	cmp	r5, #12
 800cdb2:	bf38      	it	cc
 800cdb4:	250c      	movcc	r5, #12
 800cdb6:	2d00      	cmp	r5, #0
 800cdb8:	4607      	mov	r7, r0
 800cdba:	db01      	blt.n	800cdc0 <_malloc_r+0x1c>
 800cdbc:	42a9      	cmp	r1, r5
 800cdbe:	d905      	bls.n	800cdcc <_malloc_r+0x28>
 800cdc0:	230c      	movs	r3, #12
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	2600      	movs	r6, #0
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdcc:	4e2e      	ldr	r6, [pc, #184]	; (800ce88 <_malloc_r+0xe4>)
 800cdce:	f000 f86d 	bl	800ceac <__malloc_lock>
 800cdd2:	6833      	ldr	r3, [r6, #0]
 800cdd4:	461c      	mov	r4, r3
 800cdd6:	bb34      	cbnz	r4, 800ce26 <_malloc_r+0x82>
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4638      	mov	r0, r7
 800cddc:	f7ff ffc2 	bl	800cd64 <sbrk_aligned>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	4604      	mov	r4, r0
 800cde4:	d14d      	bne.n	800ce82 <_malloc_r+0xde>
 800cde6:	6834      	ldr	r4, [r6, #0]
 800cde8:	4626      	mov	r6, r4
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	d140      	bne.n	800ce70 <_malloc_r+0xcc>
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	eb04 0803 	add.w	r8, r4, r3
 800cdf8:	f000 f848 	bl	800ce8c <_sbrk_r>
 800cdfc:	4580      	cmp	r8, r0
 800cdfe:	d13a      	bne.n	800ce76 <_malloc_r+0xd2>
 800ce00:	6821      	ldr	r1, [r4, #0]
 800ce02:	3503      	adds	r5, #3
 800ce04:	1a6d      	subs	r5, r5, r1
 800ce06:	f025 0503 	bic.w	r5, r5, #3
 800ce0a:	3508      	adds	r5, #8
 800ce0c:	2d0c      	cmp	r5, #12
 800ce0e:	bf38      	it	cc
 800ce10:	250c      	movcc	r5, #12
 800ce12:	4629      	mov	r1, r5
 800ce14:	4638      	mov	r0, r7
 800ce16:	f7ff ffa5 	bl	800cd64 <sbrk_aligned>
 800ce1a:	3001      	adds	r0, #1
 800ce1c:	d02b      	beq.n	800ce76 <_malloc_r+0xd2>
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	442b      	add	r3, r5
 800ce22:	6023      	str	r3, [r4, #0]
 800ce24:	e00e      	b.n	800ce44 <_malloc_r+0xa0>
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	1b52      	subs	r2, r2, r5
 800ce2a:	d41e      	bmi.n	800ce6a <_malloc_r+0xc6>
 800ce2c:	2a0b      	cmp	r2, #11
 800ce2e:	d916      	bls.n	800ce5e <_malloc_r+0xba>
 800ce30:	1961      	adds	r1, r4, r5
 800ce32:	42a3      	cmp	r3, r4
 800ce34:	6025      	str	r5, [r4, #0]
 800ce36:	bf18      	it	ne
 800ce38:	6059      	strne	r1, [r3, #4]
 800ce3a:	6863      	ldr	r3, [r4, #4]
 800ce3c:	bf08      	it	eq
 800ce3e:	6031      	streq	r1, [r6, #0]
 800ce40:	5162      	str	r2, [r4, r5]
 800ce42:	604b      	str	r3, [r1, #4]
 800ce44:	4638      	mov	r0, r7
 800ce46:	f104 060b 	add.w	r6, r4, #11
 800ce4a:	f000 f835 	bl	800ceb8 <__malloc_unlock>
 800ce4e:	f026 0607 	bic.w	r6, r6, #7
 800ce52:	1d23      	adds	r3, r4, #4
 800ce54:	1af2      	subs	r2, r6, r3
 800ce56:	d0b6      	beq.n	800cdc6 <_malloc_r+0x22>
 800ce58:	1b9b      	subs	r3, r3, r6
 800ce5a:	50a3      	str	r3, [r4, r2]
 800ce5c:	e7b3      	b.n	800cdc6 <_malloc_r+0x22>
 800ce5e:	6862      	ldr	r2, [r4, #4]
 800ce60:	42a3      	cmp	r3, r4
 800ce62:	bf0c      	ite	eq
 800ce64:	6032      	streq	r2, [r6, #0]
 800ce66:	605a      	strne	r2, [r3, #4]
 800ce68:	e7ec      	b.n	800ce44 <_malloc_r+0xa0>
 800ce6a:	4623      	mov	r3, r4
 800ce6c:	6864      	ldr	r4, [r4, #4]
 800ce6e:	e7b2      	b.n	800cdd6 <_malloc_r+0x32>
 800ce70:	4634      	mov	r4, r6
 800ce72:	6876      	ldr	r6, [r6, #4]
 800ce74:	e7b9      	b.n	800cdea <_malloc_r+0x46>
 800ce76:	230c      	movs	r3, #12
 800ce78:	603b      	str	r3, [r7, #0]
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f000 f81c 	bl	800ceb8 <__malloc_unlock>
 800ce80:	e7a1      	b.n	800cdc6 <_malloc_r+0x22>
 800ce82:	6025      	str	r5, [r4, #0]
 800ce84:	e7de      	b.n	800ce44 <_malloc_r+0xa0>
 800ce86:	bf00      	nop
 800ce88:	20001edc 	.word	0x20001edc

0800ce8c <_sbrk_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d06      	ldr	r5, [pc, #24]	; (800cea8 <_sbrk_r+0x1c>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	602b      	str	r3, [r5, #0]
 800ce98:	f7f4 fe5e 	bl	8001b58 <_sbrk>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_sbrk_r+0x1a>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_sbrk_r+0x1a>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20001ee4 	.word	0x20001ee4

0800ceac <__malloc_lock>:
 800ceac:	4801      	ldr	r0, [pc, #4]	; (800ceb4 <__malloc_lock+0x8>)
 800ceae:	f000 b809 	b.w	800cec4 <__retarget_lock_acquire_recursive>
 800ceb2:	bf00      	nop
 800ceb4:	20001ee8 	.word	0x20001ee8

0800ceb8 <__malloc_unlock>:
 800ceb8:	4801      	ldr	r0, [pc, #4]	; (800cec0 <__malloc_unlock+0x8>)
 800ceba:	f000 b804 	b.w	800cec6 <__retarget_lock_release_recursive>
 800cebe:	bf00      	nop
 800cec0:	20001ee8 	.word	0x20001ee8

0800cec4 <__retarget_lock_acquire_recursive>:
 800cec4:	4770      	bx	lr

0800cec6 <__retarget_lock_release_recursive>:
 800cec6:	4770      	bx	lr

0800cec8 <_init>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	bf00      	nop
 800cecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cece:	bc08      	pop	{r3}
 800ced0:	469e      	mov	lr, r3
 800ced2:	4770      	bx	lr

0800ced4 <_fini>:
 800ced4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced6:	bf00      	nop
 800ced8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceda:	bc08      	pop	{r3}
 800cedc:	469e      	mov	lr, r3
 800cede:	4770      	bx	lr
